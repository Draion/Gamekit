/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGLUA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrappering all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { lua_pushstring(L, (char *) msg); goto fail; } else

/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {lua_pushfstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {lua_pushfstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default value is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  lua_pushstring(L,"This variable is immutable");
  lua_error(L);
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
    return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

/* registering a module in lua */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }	
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
    SWIG_Lua_add_function(L,clss->name,clss->constructor);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    lua_pushfstring(L,"Error in %s, expected a %s at argument number %d\n",
      func_name,(type && type->str)?type->str:"void*",argnum);
    lua_error(L);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua a really simple way of calling lua from C
Unfortunately lua keeps changing its API's, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Array swig_types[0]
#define SWIGTYPE_p_BrickList swig_types[1]
#define SWIGTYPE_p_Iterator swig_types[2]
#define SWIGTYPE_p_gkCharacter swig_types[3]
#define SWIGTYPE_p_gkDynamicsWorld swig_types[4]
#define SWIGTYPE_p_gkLuaCurState swig_types[5]
#define SWIGTYPE_p_gsActionActuator swig_types[6]
#define SWIGTYPE_p_gsActuator swig_types[7]
#define SWIGTYPE_p_gsActuatorSensor swig_types[8]
#define SWIGTYPE_p_gsAlwaysSensor swig_types[9]
#define SWIGTYPE_p_gsArrayIteratorT_gkGameObject_t swig_types[10]
#define SWIGTYPE_p_gsArrayIteratorT_gkLogicActuator_t swig_types[11]
#define SWIGTYPE_p_gsArrayIteratorT_gkLogicController_t swig_types[12]
#define SWIGTYPE_p_gsArrayIteratorT_gkLogicLink_t swig_types[13]
#define SWIGTYPE_p_gsArrayIteratorT_gkLogicSensor_t swig_types[14]
#define SWIGTYPE_p_gsArrayT_gsActuator_gkLogicActuator_t swig_types[15]
#define SWIGTYPE_p_gsArrayT_gsController_gkLogicController_t swig_types[16]
#define SWIGTYPE_p_gsArrayT_gsGameObject_gkGameObject_t swig_types[17]
#define SWIGTYPE_p_gsArrayT_gsLogicObject_gkLogicLink_t swig_types[18]
#define SWIGTYPE_p_gsArrayT_gsSensor_gkLogicSensor_t swig_types[19]
#define SWIGTYPE_p_gsBrick swig_types[20]
#define SWIGTYPE_p_gsCamera swig_types[21]
#define SWIGTYPE_p_gsCharacter swig_types[22]
#define SWIGTYPE_p_gsCollisionSensor swig_types[23]
#define SWIGTYPE_p_gsController swig_types[24]
#define SWIGTYPE_p_gsDebugger swig_types[25]
#define SWIGTYPE_p_gsDelaySensor swig_types[26]
#define SWIGTYPE_p_gsDynamicsWorld swig_types[27]
#define SWIGTYPE_p_gsEditObjectActuator swig_types[28]
#define SWIGTYPE_p_gsEngine swig_types[29]
#define SWIGTYPE_p_gsEntity swig_types[30]
#define SWIGTYPE_p_gsExpressionController swig_types[31]
#define SWIGTYPE_p_gsFSM swig_types[32]
#define SWIGTYPE_p_gsGameActuator swig_types[33]
#define SWIGTYPE_p_gsGameObject swig_types[34]
#define SWIGTYPE_p_gsHUD swig_types[35]
#define SWIGTYPE_p_gsHUDElement swig_types[36]
#define SWIGTYPE_p_gsJoystick swig_types[37]
#define SWIGTYPE_p_gsKeyboard swig_types[38]
#define SWIGTYPE_p_gsKeyboardSensor swig_types[39]
#define SWIGTYPE_p_gsLight swig_types[40]
#define SWIGTYPE_p_gsLogicManager swig_types[41]
#define SWIGTYPE_p_gsLogicObject swig_types[42]
#define SWIGTYPE_p_gsLogicOpController swig_types[43]
#define SWIGTYPE_p_gsLuaManager swig_types[44]
#define SWIGTYPE_p_gsLuaScript swig_types[45]
#define SWIGTYPE_p_gsMessageActuator swig_types[46]
#define SWIGTYPE_p_gsMessageSensor swig_types[47]
#define SWIGTYPE_p_gsMotionActuator swig_types[48]
#define SWIGTYPE_p_gsMouse swig_types[49]
#define SWIGTYPE_p_gsMouseSensor swig_types[50]
#define SWIGTYPE_p_gsNearSensor swig_types[51]
#define SWIGTYPE_p_gsObject swig_types[52]
#define SWIGTYPE_p_gsParentActuator swig_types[53]
#define SWIGTYPE_p_gsParticles swig_types[54]
#define SWIGTYPE_p_gsProperty swig_types[55]
#define SWIGTYPE_p_gsPropertyActuator swig_types[56]
#define SWIGTYPE_p_gsPropertySensor swig_types[57]
#define SWIGTYPE_p_gsQuaternion swig_types[58]
#define SWIGTYPE_p_gsRadarSensor swig_types[59]
#define SWIGTYPE_p_gsRandomActuator swig_types[60]
#define SWIGTYPE_p_gsRandomSensor swig_types[61]
#define SWIGTYPE_p_gsRay swig_types[62]
#define SWIGTYPE_p_gsRaySensor swig_types[63]
#define SWIGTYPE_p_gsRayTest swig_types[64]
#define SWIGTYPE_p_gsScene swig_types[65]
#define SWIGTYPE_p_gsSceneActuator swig_types[66]
#define SWIGTYPE_p_gsScriptController swig_types[67]
#define SWIGTYPE_p_gsSensor swig_types[68]
#define SWIGTYPE_p_gsSkeleton swig_types[69]
#define SWIGTYPE_p_gsSoundActuator swig_types[70]
#define SWIGTYPE_p_gsStateActuator swig_types[71]
#define SWIGTYPE_p_gsSweptTest swig_types[72]
#define SWIGTYPE_p_gsTouchSensor swig_types[73]
#define SWIGTYPE_p_gsUserDefs swig_types[74]
#define SWIGTYPE_p_gsVector3 swig_types[75]
#define SWIGTYPE_p_gsVisibilityActuator swig_types[76]
#define SWIGTYPE_p_gsWhenEvent swig_types[77]
#define SWIGTYPE_p_utArrayT_gkGameObject_p_t swig_types[78]
#define SWIGTYPE_p_utArrayT_gkLogicActuator_p_t swig_types[79]
#define SWIGTYPE_p_utArrayT_gkLogicController_p_t swig_types[80]
#define SWIGTYPE_p_utArrayT_gkLogicLink_p_t swig_types[81]
#define SWIGTYPE_p_utArrayT_gkLogicSensor_p_t swig_types[82]
static swig_type_info *swig_types[84];
static swig_module_info swig_module = {swig_types, 83, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "OgreKit"
#define SWIG_init      luaopen_OgreKit
#define SWIG_init_user luaopen_OgreKit_user

#define SWIG_LUACODE   luaopen_OgreKit_luacode


namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include "gsCommon.h"


#include "gsUtils.h"


#include "gsMath.h"


#include "gsCore.h"


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include "gsAI.h"


#include "gsBricks.h"


#include "gsPhysics.h"


static int gsGetProperty(lua_State *L, const gsProperty& prop)
{
	int SWIG_arg= 0;
	switch (prop.getType())
	{
	case PROP_BOOL:
		lua_pushboolean(L, prop.toBool()); 
		SWIG_arg++;
		break;
	case PROP_NUMBER:
		lua_pushnumber(L, prop.toNumber()); 
		SWIG_arg++;
		break;
	case PROP_STRING:
		{
			gkString str = prop.toString();
			lua_pushlstring(L, str.c_str(), str.size());
			SWIG_arg++;
			break;
		}
	}
	return SWIG_arg;
}

#define GS_TYPEOF(a, b)   ((a) && typeid(*a) == typeid(b))
#define GS_TYPE_RET(GK, GS, T) if (GS_TYPEOF(GK, gk##T)) { SWIG_NewPointerObj(L, GS, SWIGTYPE_p_##gs##T, 1); return 1; }

// ------------------------------------------------------------------------------
// Convert & store gk<Class> objects as gs<Class> with consistent userdata values
// ------------------------------------------------------------------------------
template <class GKTYPE, class GSTYPE>
static int gsLuaStoreAndReturnObject(lua_State *L, GKTYPE* obj, const char* className, swig_type_info* swigTypeInfo)
{
    // Early exit on nil
    if (!obj)
    {
        lua_pushnil(L);
        return 1;
    }
    
    // Create the storage name
    char tableName[256];
    sprintf(tableName, ".gsCache{%s}", className);
    
    // Try to get the table in which the objects would be stored
    lua_pushstring(L, tableName);
    lua_rawget(L,     LUA_REGISTRYINDEX);
    
    // If that did not work - create it and put it on top
    if (!lua_istable(L, -1))
    {
        lua_pushstring(L, tableName);
        lua_newtable(L);
        
        lua_createtable(L,  0, 1);
        lua_pushstring(L,   "v");
        lua_setfield(L,     -2, "__mode");
        lua_setmetatable(L, -2);
        
        lua_rawset(L, LUA_REGISTRYINDEX);
        
        // Try to get the table
        lua_pushstring(L, tableName);
        lua_rawget(L,     LUA_REGISTRYINDEX);
    }
    
    // We now have a table to get the user data from - so check if it's there
    lua_pushlightuserdata(L, obj);
    lua_gettable(L, -2);
    
    if (lua_isnil(L, -1))
    {
        // We no longer need the nil value
        lua_pop(L, 1);
        
        // Push the pointer value onto the stack (as the key)
        lua_pushlightuserdata(L, obj);
        
        // Create and push the value
        GSTYPE* wrappedObject = new GSTYPE(obj);
        SWIG_NewPointerObj(L, wrappedObject, swigTypeInfo, 1);
        
        // Store it in the table
        lua_settable(L, -3);
        
        // Reget the value from the table
        lua_pushlightuserdata(L, obj);
        lua_gettable(L, -2);
    }
    return 1;
}

#define GS_LUA_OBJECT_WRAP_STORE(OBJ, T, WT) gsLuaStoreAndReturnObject<gk##T, gs##WT>(L, (gk##T*)OBJ, #WT, SWIGTYPE_p_##gs##WT)
#define GS_LUA_OBJECT_STORE(OBJ, T) GS_LUA_OBJECT_WRAP_STORE(OBJ, T, T)
#define GS_LUA_OBJECT_RET(OBJ, T) if (GS_TYPEOF(OBJ, gk##T)) { return GS_LUA_OBJECT_STORE(OBJ, T); }
#define GS_LUA_OBJECT_WRAP_RET(OBJ, T, WT) if (GS_TYPEOF(OBJ, gk##T)) { return GS_LUA_OBJECT_WRAP_STORE(OBJ, T, WT); }

static int gsWrapGameObject(lua_State *L, gkGameObject *obj)
{    
    //gkPrintf("Object Size: %d\n", (int)sizeof(gsParticles));
    GS_LUA_OBJECT_RET(obj, Camera);
    GS_LUA_OBJECT_RET(obj, Entity);
    GS_LUA_OBJECT_RET(obj, Light);
    GS_LUA_OBJECT_RET(obj, Skeleton);
    GS_LUA_OBJECT_WRAP_RET(obj, ParticleObject, Particles);
    
    return GS_LUA_OBJECT_STORE(obj, GameObject);
}

static int gsWrapSensor(lua_State *L, gkLogicSensor *obj)
{    
    GS_LUA_OBJECT_RET(obj, ActuatorSensor);
    GS_LUA_OBJECT_RET(obj, AlwaysSensor);
    GS_LUA_OBJECT_RET(obj, KeyboardSensor);
    GS_LUA_OBJECT_RET(obj, CollisionSensor);
    GS_LUA_OBJECT_RET(obj, DelaySensor);
    GS_LUA_OBJECT_RET(obj, MessageSensor);
    GS_LUA_OBJECT_RET(obj, MouseSensor);
    GS_LUA_OBJECT_RET(obj, NearSensor);
    GS_LUA_OBJECT_RET(obj, PropertySensor);
    GS_LUA_OBJECT_RET(obj, RaySensor);
    GS_LUA_OBJECT_RET(obj, RadarSensor);
    GS_LUA_OBJECT_RET(obj, RandomSensor);
    
    return GS_LUA_OBJECT_WRAP_STORE(obj, LogicSensor, Sensor);
}
    
static int gsWrapController(lua_State *L, gkLogicController *obj)
{    
    GS_LUA_OBJECT_RET(obj, LogicOpController);
    GS_LUA_OBJECT_RET(obj, ScriptController);
    GS_LUA_OBJECT_RET(obj, ExpressionController);
    
    return GS_LUA_OBJECT_WRAP_STORE(obj, LogicController, Controller);
}

static int gsWrapActuator(lua_State *L, gkLogicActuator *obj)
{    
    GS_LUA_OBJECT_RET(obj, ActionActuator);
    GS_LUA_OBJECT_RET(obj, EditObjectActuator);
    GS_LUA_OBJECT_RET(obj, GameActuator);
    GS_LUA_OBJECT_RET(obj, MessageActuator);
    GS_LUA_OBJECT_RET(obj, MotionActuator);
    GS_LUA_OBJECT_RET(obj, ParentActuator);
    GS_LUA_OBJECT_RET(obj, PropertyActuator);
    GS_LUA_OBJECT_RET(obj, RandomActuator);
    GS_LUA_OBJECT_RET(obj, SceneActuator);
    GS_LUA_OBJECT_RET(obj, SoundActuator);
    GS_LUA_OBJECT_RET(obj, StateActuator);
    GS_LUA_OBJECT_RET(obj, VisibilityActuator);

    return GS_LUA_OBJECT_WRAP_STORE(obj, LogicActuator, Actuator);
}


// ------------------------------------------------------------------------------



#include "gsScript.h"

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_Vector3_x_set(lua_State* L) {
  int SWIG_arg = 0;
  gsVector3 *arg1 = (gsVector3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsVector3::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsVector3::x",1,"gsVector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsVector3::x",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vector3_x_set",1,SWIGTYPE_p_gsVector3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_x_get(lua_State* L) {
  int SWIG_arg = 0;
  gsVector3 *arg1 = (gsVector3 *) 0 ;
  float result;
  
  SWIG_check_num_args("gsVector3::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsVector3::x",1,"gsVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vector3_x_get",1,SWIGTYPE_p_gsVector3);
  }
  
  result = (float) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_y_set(lua_State* L) {
  int SWIG_arg = 0;
  gsVector3 *arg1 = (gsVector3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsVector3::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsVector3::y",1,"gsVector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsVector3::y",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vector3_y_set",1,SWIGTYPE_p_gsVector3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_y_get(lua_State* L) {
  int SWIG_arg = 0;
  gsVector3 *arg1 = (gsVector3 *) 0 ;
  float result;
  
  SWIG_check_num_args("gsVector3::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsVector3::y",1,"gsVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vector3_y_get",1,SWIGTYPE_p_gsVector3);
  }
  
  result = (float) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_z_set(lua_State* L) {
  int SWIG_arg = 0;
  gsVector3 *arg1 = (gsVector3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsVector3::z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsVector3::z",1,"gsVector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsVector3::z",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vector3_z_set",1,SWIGTYPE_p_gsVector3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->z = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_z_get(lua_State* L) {
  int SWIG_arg = 0;
  gsVector3 *arg1 = (gsVector3 *) 0 ;
  float result;
  
  SWIG_check_num_args("gsVector3::z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsVector3::z",1,"gsVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vector3_z_get",1,SWIGTYPE_p_gsVector3);
  }
  
  result = (float) ((arg1)->z);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsVector3 *result = 0 ;
  
  SWIG_check_num_args("gsVector3::gsVector3",0,0)
  result = (gsVector3 *)new gsVector3();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsVector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  gsVector3 *result = 0 ;
  
  SWIG_check_num_args("gsVector3::gsVector3",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gsVector3::gsVector3",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsVector3::gsVector3",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsVector3::gsVector3",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (gsVector3 *)new gsVector3(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsVector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsVector3 *arg1 = 0 ;
  gsVector3 *result = 0 ;
  
  SWIG_check_num_args("gsVector3::gsVector3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gsVector3::gsVector3",1,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("new_Vector3",1,SWIGTYPE_p_gsVector3);
  }
  
  result = (gsVector3 *)new gsVector3((gsVector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsVector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vector3__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_2(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Vector3__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Vector3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsVector3::gsVector3()\n"
    "    gsVector3::gsVector3(float,float,float)\n"
    "    gsVector3::gsVector3(gsVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3___tostring(lua_State* L) {
  int SWIG_arg = 0;
  gsVector3 *arg1 = (gsVector3 *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("gsVector3::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsVector3::__str__",1,"gsVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vector3___tostring",1,SWIGTYPE_p_gsVector3);
  }
  
  result = (char *)(arg1)->__str__();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_normalize(lua_State* L) {
  int SWIG_arg = 0;
  gsVector3 *arg1 = (gsVector3 *) 0 ;
  float result;
  
  SWIG_check_num_args("gsVector3::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsVector3::normalize",1,"gsVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vector3_normalize",1,SWIGTYPE_p_gsVector3);
  }
  
  result = (float)(arg1)->normalize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_dot(lua_State* L) {
  int SWIG_arg = 0;
  gsVector3 *arg1 = (gsVector3 *) 0 ;
  gsVector3 *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("gsVector3::dot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsVector3::dot",1,"gsVector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsVector3::dot",2,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vector3_dot",1,SWIGTYPE_p_gsVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vector3_dot",2,SWIGTYPE_p_gsVector3);
  }
  
  result = (float)(arg1)->dot((gsVector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_cross(lua_State* L) {
  int SWIG_arg = 0;
  gsVector3 *arg1 = (gsVector3 *) 0 ;
  gsVector3 *arg2 = 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsVector3::cross",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsVector3::cross",1,"gsVector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsVector3::cross",2,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vector3_cross",1,SWIGTYPE_p_gsVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vector3_cross",2,SWIGTYPE_p_gsVector3);
  }
  
  result = (arg1)->cross((gsVector3 const &)*arg2);
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_length(lua_State* L) {
  int SWIG_arg = 0;
  gsVector3 *arg1 = (gsVector3 *) 0 ;
  float result;
  
  SWIG_check_num_args("gsVector3::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsVector3::length",1,"gsVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vector3_length",1,SWIGTYPE_p_gsVector3);
  }
  
  result = (float)(arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_length2(lua_State* L) {
  int SWIG_arg = 0;
  gsVector3 *arg1 = (gsVector3 *) 0 ;
  float result;
  
  SWIG_check_num_args("gsVector3::length2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsVector3::length2",1,"gsVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vector3_length2",1,SWIGTYPE_p_gsVector3);
  }
  
  result = (float)(arg1)->length2();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_distance(lua_State* L) {
  int SWIG_arg = 0;
  gsVector3 *arg1 = (gsVector3 *) 0 ;
  gsVector3 *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("gsVector3::distance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsVector3::distance",1,"gsVector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsVector3::distance",2,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vector3_distance",1,SWIGTYPE_p_gsVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vector3_distance",2,SWIGTYPE_p_gsVector3);
  }
  
  result = (float)(arg1)->distance((gsVector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_distance2(lua_State* L) {
  int SWIG_arg = 0;
  gsVector3 *arg1 = (gsVector3 *) 0 ;
  gsVector3 *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("gsVector3::distance2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsVector3::distance2",1,"gsVector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsVector3::distance2",2,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vector3_distance2",1,SWIGTYPE_p_gsVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vector3_distance2",2,SWIGTYPE_p_gsVector3);
  }
  
  result = (float)(arg1)->distance2((gsVector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___unm(lua_State* L) {
  int SWIG_arg = 0;
  gsVector3 *arg1 = (gsVector3 *) 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsVector3::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsVector3::operator -",1,"gsVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vector3___unm",1,SWIGTYPE_p_gsVector3);
  }
  
  result = (arg1)->operator -();
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___add(lua_State* L) {
  int SWIG_arg = 0;
  gsVector3 *arg1 = (gsVector3 *) 0 ;
  gsVector3 *arg2 = 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsVector3::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsVector3::operator +",1,"gsVector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsVector3::operator +",2,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vector3___add",1,SWIGTYPE_p_gsVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vector3___add",2,SWIGTYPE_p_gsVector3);
  }
  
  result = (arg1)->operator +((gsVector3 const &)*arg2);
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___sub(lua_State* L) {
  int SWIG_arg = 0;
  gsVector3 *arg1 = (gsVector3 *) 0 ;
  gsVector3 *arg2 = 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsVector3::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsVector3::operator -",1,"gsVector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsVector3::operator -",2,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vector3___sub",1,SWIGTYPE_p_gsVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vector3___sub",2,SWIGTYPE_p_gsVector3);
  }
  
  result = (arg1)->operator -((gsVector3 const &)*arg2);
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsVector3 *arg1 = (gsVector3 *) 0 ;
  gsVector3 *arg2 = 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsVector3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsVector3::operator *",1,"gsVector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsVector3::operator *",2,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vector3___mul",1,SWIGTYPE_p_gsVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vector3___mul",2,SWIGTYPE_p_gsVector3);
  }
  
  result = (arg1)->operator *((gsVector3 const &)*arg2);
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsVector3 *arg1 = (gsVector3 *) 0 ;
  float arg2 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsVector3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsVector3::operator *",1,"gsVector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsVector3::operator *",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vector3___mul",1,SWIGTYPE_p_gsVector3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (arg1)->operator *(arg2);
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gsVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector3___mul__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Vector3___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsVector3::operator *(gsVector3 const &)\n"
    "    gsVector3::operator *(float)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsVector3 *arg1 = (gsVector3 *) 0 ;
  gsVector3 *arg2 = 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsVector3::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsVector3::operator /",1,"gsVector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsVector3::operator /",2,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vector3___div",1,SWIGTYPE_p_gsVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vector3___div",2,SWIGTYPE_p_gsVector3);
  }
  
  result = (arg1)->operator /((gsVector3 const &)*arg2);
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsVector3 *arg1 = (gsVector3 *) 0 ;
  float arg2 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsVector3::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsVector3::operator /",1,"gsVector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsVector3::operator /",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vector3___div",1,SWIGTYPE_p_gsVector3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (arg1)->operator /(arg2);
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gsVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector3___div__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Vector3___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsVector3::operator /(gsVector3 const &)\n"
    "    gsVector3::operator /(float)\n");
  lua_error(L);return 0;
}


static void swig_delete_Vector3(void *obj) {
gsVector3 *arg1 = (gsVector3 *) obj;
delete arg1;
}
static swig_lua_method swig_gsVector3_methods[] = {
    {"__tostring", _wrap_Vector3___tostring}, 
    {"normalize", _wrap_Vector3_normalize}, 
    {"dot", _wrap_Vector3_dot}, 
    {"cross", _wrap_Vector3_cross}, 
    {"length", _wrap_Vector3_length}, 
    {"length2", _wrap_Vector3_length2}, 
    {"distance", _wrap_Vector3_distance}, 
    {"distance2", _wrap_Vector3_distance2}, 
    {"__unm", _wrap_Vector3___unm}, 
    {"__add", _wrap_Vector3___add}, 
    {"__sub", _wrap_Vector3___sub}, 
    {"__mul", _wrap_Vector3___mul}, 
    {"__div", _wrap_Vector3___div}, 
    {0,0}
};
static swig_lua_attribute swig_gsVector3_attributes[] = {
    { "x", _wrap_Vector3_x_get, _wrap_Vector3_x_set},
    { "y", _wrap_Vector3_y_get, _wrap_Vector3_y_set},
    { "z", _wrap_Vector3_z_get, _wrap_Vector3_z_set},
    {0,0,0}
};
static swig_lua_class *swig_gsVector3_bases[] = {0};
static const char *swig_gsVector3_base_names[] = {0};
static swig_lua_class _wrap_class_gsVector3 = { "Vector3", &SWIGTYPE_p_gsVector3,_wrap_new_Vector3, swig_delete_Vector3, swig_gsVector3_methods, swig_gsVector3_attributes, swig_gsVector3_bases, swig_gsVector3_base_names };

static int _wrap_Quaternion_w_set(lua_State* L) {
  int SWIG_arg = 0;
  gsQuaternion *arg1 = (gsQuaternion *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsQuaternion::w",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsQuaternion::w",1,"gsQuaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsQuaternion::w",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("Quaternion_w_set",1,SWIGTYPE_p_gsQuaternion);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->w = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_w_get(lua_State* L) {
  int SWIG_arg = 0;
  gsQuaternion *arg1 = (gsQuaternion *) 0 ;
  float result;
  
  SWIG_check_num_args("gsQuaternion::w",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsQuaternion::w",1,"gsQuaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("Quaternion_w_get",1,SWIGTYPE_p_gsQuaternion);
  }
  
  result = (float) ((arg1)->w);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_x_set(lua_State* L) {
  int SWIG_arg = 0;
  gsQuaternion *arg1 = (gsQuaternion *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsQuaternion::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsQuaternion::x",1,"gsQuaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsQuaternion::x",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("Quaternion_x_set",1,SWIGTYPE_p_gsQuaternion);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_x_get(lua_State* L) {
  int SWIG_arg = 0;
  gsQuaternion *arg1 = (gsQuaternion *) 0 ;
  float result;
  
  SWIG_check_num_args("gsQuaternion::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsQuaternion::x",1,"gsQuaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("Quaternion_x_get",1,SWIGTYPE_p_gsQuaternion);
  }
  
  result = (float) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_y_set(lua_State* L) {
  int SWIG_arg = 0;
  gsQuaternion *arg1 = (gsQuaternion *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsQuaternion::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsQuaternion::y",1,"gsQuaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsQuaternion::y",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("Quaternion_y_set",1,SWIGTYPE_p_gsQuaternion);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_y_get(lua_State* L) {
  int SWIG_arg = 0;
  gsQuaternion *arg1 = (gsQuaternion *) 0 ;
  float result;
  
  SWIG_check_num_args("gsQuaternion::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsQuaternion::y",1,"gsQuaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("Quaternion_y_get",1,SWIGTYPE_p_gsQuaternion);
  }
  
  result = (float) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_z_set(lua_State* L) {
  int SWIG_arg = 0;
  gsQuaternion *arg1 = (gsQuaternion *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsQuaternion::z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsQuaternion::z",1,"gsQuaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsQuaternion::z",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("Quaternion_z_set",1,SWIGTYPE_p_gsQuaternion);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->z = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_z_get(lua_State* L) {
  int SWIG_arg = 0;
  gsQuaternion *arg1 = (gsQuaternion *) 0 ;
  float result;
  
  SWIG_check_num_args("gsQuaternion::z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsQuaternion::z",1,"gsQuaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("Quaternion_z_get",1,SWIGTYPE_p_gsQuaternion);
  }
  
  result = (float) ((arg1)->z);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsQuaternion *result = 0 ;
  
  SWIG_check_num_args("gsQuaternion::gsQuaternion",0,0)
  result = (gsQuaternion *)new gsQuaternion();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsQuaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  gsQuaternion *result = 0 ;
  
  SWIG_check_num_args("gsQuaternion::gsQuaternion",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gsQuaternion::gsQuaternion",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsQuaternion::gsQuaternion",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsQuaternion::gsQuaternion",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gsQuaternion::gsQuaternion",4,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (gsQuaternion *)new gsQuaternion(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsQuaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsQuaternion *arg1 = 0 ;
  gsQuaternion *result = 0 ;
  
  SWIG_check_num_args("gsQuaternion::gsQuaternion",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gsQuaternion::gsQuaternion",1,"gsQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_gsQuaternion);
  }
  
  result = (gsQuaternion *)new gsQuaternion((gsQuaternion const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsQuaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Quaternion__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsQuaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Quaternion__SWIG_2(L);
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Quaternion__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Quaternion'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsQuaternion::gsQuaternion()\n"
    "    gsQuaternion::gsQuaternion(float,float,float,float)\n"
    "    gsQuaternion::gsQuaternion(gsQuaternion const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion___tostring(lua_State* L) {
  int SWIG_arg = 0;
  gsQuaternion *arg1 = (gsQuaternion *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("gsQuaternion::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsQuaternion::__str__",1,"gsQuaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("Quaternion___tostring",1,SWIGTYPE_p_gsQuaternion);
  }
  
  result = (char *)(arg1)->__str__();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_normalize(lua_State* L) {
  int SWIG_arg = 0;
  gsQuaternion *arg1 = (gsQuaternion *) 0 ;
  float result;
  
  SWIG_check_num_args("gsQuaternion::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsQuaternion::normalize",1,"gsQuaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("Quaternion_normalize",1,SWIGTYPE_p_gsQuaternion);
  }
  
  result = (float)(arg1)->normalize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_length2(lua_State* L) {
  int SWIG_arg = 0;
  gsQuaternion *arg1 = (gsQuaternion *) 0 ;
  float result;
  
  SWIG_check_num_args("gsQuaternion::length2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsQuaternion::length2",1,"gsQuaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("Quaternion_length2",1,SWIGTYPE_p_gsQuaternion);
  }
  
  result = (float)(arg1)->length2();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_dot(lua_State* L) {
  int SWIG_arg = 0;
  gsQuaternion *arg1 = (gsQuaternion *) 0 ;
  gsQuaternion *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("gsQuaternion::dot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsQuaternion::dot",1,"gsQuaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsQuaternion::dot",2,"gsQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("Quaternion_dot",1,SWIGTYPE_p_gsQuaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("Quaternion_dot",2,SWIGTYPE_p_gsQuaternion);
  }
  
  result = (float)(arg1)->dot((gsQuaternion const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_inverse(lua_State* L) {
  int SWIG_arg = 0;
  gsQuaternion *arg1 = (gsQuaternion *) 0 ;
  gsQuaternion result;
  
  SWIG_check_num_args("gsQuaternion::inverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsQuaternion::inverse",1,"gsQuaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("Quaternion_inverse",1,SWIGTYPE_p_gsQuaternion);
  }
  
  result = (arg1)->inverse();
  {
    gsQuaternion * resultptr = new gsQuaternion((const gsQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___unm(lua_State* L) {
  int SWIG_arg = 0;
  gsQuaternion *arg1 = (gsQuaternion *) 0 ;
  gsQuaternion result;
  
  SWIG_check_num_args("gsQuaternion::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsQuaternion::operator -",1,"gsQuaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("Quaternion___unm",1,SWIGTYPE_p_gsQuaternion);
  }
  
  result = (arg1)->operator -();
  {
    gsQuaternion * resultptr = new gsQuaternion((const gsQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___add(lua_State* L) {
  int SWIG_arg = 0;
  gsQuaternion *arg1 = (gsQuaternion *) 0 ;
  gsQuaternion *arg2 = 0 ;
  gsQuaternion result;
  
  SWIG_check_num_args("gsQuaternion::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsQuaternion::operator +",1,"gsQuaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsQuaternion::operator +",2,"gsQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("Quaternion___add",1,SWIGTYPE_p_gsQuaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("Quaternion___add",2,SWIGTYPE_p_gsQuaternion);
  }
  
  result = (arg1)->operator +((gsQuaternion const &)*arg2);
  {
    gsQuaternion * resultptr = new gsQuaternion((const gsQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___sub(lua_State* L) {
  int SWIG_arg = 0;
  gsQuaternion *arg1 = (gsQuaternion *) 0 ;
  gsQuaternion *arg2 = 0 ;
  gsQuaternion result;
  
  SWIG_check_num_args("gsQuaternion::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsQuaternion::operator -",1,"gsQuaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsQuaternion::operator -",2,"gsQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("Quaternion___sub",1,SWIGTYPE_p_gsQuaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("Quaternion___sub",2,SWIGTYPE_p_gsQuaternion);
  }
  
  result = (arg1)->operator -((gsQuaternion const &)*arg2);
  {
    gsQuaternion * resultptr = new gsQuaternion((const gsQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsQuaternion *arg1 = (gsQuaternion *) 0 ;
  gsQuaternion *arg2 = 0 ;
  gsQuaternion result;
  
  SWIG_check_num_args("gsQuaternion::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsQuaternion::operator *",1,"gsQuaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsQuaternion::operator *",2,"gsQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",1,SWIGTYPE_p_gsQuaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",2,SWIGTYPE_p_gsQuaternion);
  }
  
  result = (arg1)->operator *((gsQuaternion const &)*arg2);
  {
    gsQuaternion * resultptr = new gsQuaternion((const gsQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsQuaternion *arg1 = (gsQuaternion *) 0 ;
  float arg2 ;
  gsQuaternion result;
  
  SWIG_check_num_args("gsQuaternion::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsQuaternion::operator *",1,"gsQuaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsQuaternion::operator *",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",1,SWIGTYPE_p_gsQuaternion);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (arg1)->operator *(arg2);
  {
    gsQuaternion * resultptr = new gsQuaternion((const gsQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsQuaternion *arg1 = (gsQuaternion *) 0 ;
  gsVector3 *arg2 = 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsQuaternion::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsQuaternion::operator *",1,"gsQuaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsQuaternion::operator *",2,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",1,SWIGTYPE_p_gsQuaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Quaternion___mul",2,SWIGTYPE_p_gsVector3);
  }
  
  result = (arg1)->operator *((gsVector3 const &)*arg2);
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsQuaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gsQuaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsQuaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gsVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsQuaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Quaternion___mul__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Quaternion___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsQuaternion::operator *(gsQuaternion const &)\n"
    "    gsQuaternion::operator *(float)\n"
    "    gsQuaternion::operator *(gsVector3 const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Quaternion(void *obj) {
gsQuaternion *arg1 = (gsQuaternion *) obj;
delete arg1;
}
static swig_lua_method swig_gsQuaternion_methods[] = {
    {"__tostring", _wrap_Quaternion___tostring}, 
    {"normalize", _wrap_Quaternion_normalize}, 
    {"length2", _wrap_Quaternion_length2}, 
    {"dot", _wrap_Quaternion_dot}, 
    {"inverse", _wrap_Quaternion_inverse}, 
    {"__unm", _wrap_Quaternion___unm}, 
    {"__add", _wrap_Quaternion___add}, 
    {"__sub", _wrap_Quaternion___sub}, 
    {"__mul", _wrap_Quaternion___mul}, 
    {0,0}
};
static swig_lua_attribute swig_gsQuaternion_attributes[] = {
    { "w", _wrap_Quaternion_w_get, _wrap_Quaternion_w_set},
    { "x", _wrap_Quaternion_x_get, _wrap_Quaternion_x_set},
    { "y", _wrap_Quaternion_y_get, _wrap_Quaternion_y_set},
    { "z", _wrap_Quaternion_z_get, _wrap_Quaternion_z_set},
    {0,0,0}
};
static swig_lua_class *swig_gsQuaternion_bases[] = {0};
static const char *swig_gsQuaternion_base_names[] = {0};
static swig_lua_class _wrap_class_gsQuaternion = { "Quaternion", &SWIGTYPE_p_gsQuaternion,_wrap_new_Quaternion, swig_delete_Quaternion, swig_gsQuaternion_methods, swig_gsQuaternion_attributes, swig_gsQuaternion_bases, swig_gsQuaternion_base_names };

static int _wrap_new_Ray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsRay *result = 0 ;
  
  SWIG_check_num_args("gsRay::gsRay",0,0)
  result = (gsRay *)new gsRay();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsRay,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Ray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsVector3 *arg1 = 0 ;
  gsVector3 *arg2 = 0 ;
  gsRay *result = 0 ;
  
  SWIG_check_num_args("gsRay::gsRay",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gsRay::gsRay",1,"gsVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsRay::gsRay",2,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("new_Ray",1,SWIGTYPE_p_gsVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("new_Ray",2,SWIGTYPE_p_gsVector3);
  }
  
  result = (gsRay *)new gsRay((gsVector3 const &)*arg1,(gsVector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsRay,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Ray(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Ray__SWIG_0(L);
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gsVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Ray__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Ray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsRay::gsRay()\n"
    "    gsRay::gsRay(gsVector3 const &,gsVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Ray_setOrigin(lua_State* L) {
  int SWIG_arg = 0;
  gsRay *arg1 = (gsRay *) 0 ;
  gsVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("gsRay::setOrigin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRay::setOrigin",1,"gsRay *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsRay::setOrigin",2,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRay,0))){
    SWIG_fail_ptr("Ray_setOrigin",1,SWIGTYPE_p_gsRay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Ray_setOrigin",2,SWIGTYPE_p_gsVector3);
  }
  
  (arg1)->setOrigin((gsVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_setDirection(lua_State* L) {
  int SWIG_arg = 0;
  gsRay *arg1 = (gsRay *) 0 ;
  gsVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("gsRay::setDirection",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRay::setDirection",1,"gsRay *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsRay::setDirection",2,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRay,0))){
    SWIG_fail_ptr("Ray_setDirection",1,SWIGTYPE_p_gsRay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Ray_setDirection",2,SWIGTYPE_p_gsVector3);
  }
  
  (arg1)->setDirection((gsVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_getOrigin(lua_State* L) {
  int SWIG_arg = 0;
  gsRay *arg1 = (gsRay *) 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsRay::getOrigin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRay::getOrigin",1,"gsRay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRay,0))){
    SWIG_fail_ptr("Ray_getOrigin",1,SWIGTYPE_p_gsRay);
  }
  
  result = (arg1)->getOrigin();
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_getDirection(lua_State* L) {
  int SWIG_arg = 0;
  gsRay *arg1 = (gsRay *) 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsRay::getDirection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRay::getDirection",1,"gsRay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRay,0))){
    SWIG_fail_ptr("Ray_getDirection",1,SWIGTYPE_p_gsRay);
  }
  
  result = (arg1)->getDirection();
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Ray(void *obj) {
gsRay *arg1 = (gsRay *) obj;
delete arg1;
}
static swig_lua_method swig_gsRay_methods[] = {
    {"setOrigin", _wrap_Ray_setOrigin}, 
    {"setDirection", _wrap_Ray_setDirection}, 
    {"getOrigin", _wrap_Ray_getOrigin}, 
    {"getDirection", _wrap_Ray_getDirection}, 
    {0,0}
};
static swig_lua_attribute swig_gsRay_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsRay_bases[] = {0};
static const char *swig_gsRay_base_names[] = {0};
static swig_lua_class _wrap_class_gsRay = { "Ray", &SWIGTYPE_p_gsRay,_wrap_new_Ray, swig_delete_Ray, swig_gsRay_methods, swig_gsRay_attributes, swig_gsRay_bases, swig_gsRay_base_names };

static int _wrap_Vec3Negate(lua_State* L) {
  int SWIG_arg = 0;
  gsVector3 *arg1 = 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsVec3Negate",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gsVec3Negate",1,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vec3Negate",1,SWIGTYPE_p_gsVector3);
  }
  
  result = gsVec3Negate((gsVector3 const &)*arg1);
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3AddVec3(lua_State* L) {
  int SWIG_arg = 0;
  gsVector3 *arg1 = 0 ;
  gsVector3 *arg2 = 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsVec3AddVec3",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gsVec3AddVec3",1,"gsVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsVec3AddVec3",2,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vec3AddVec3",1,SWIGTYPE_p_gsVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vec3AddVec3",2,SWIGTYPE_p_gsVector3);
  }
  
  result = gsVec3AddVec3((gsVector3 const &)*arg1,(gsVector3 const &)*arg2);
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3SubVec3(lua_State* L) {
  int SWIG_arg = 0;
  gsVector3 *arg1 = 0 ;
  gsVector3 *arg2 = 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsVec3SubVec3",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gsVec3SubVec3",1,"gsVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsVec3SubVec3",2,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vec3SubVec3",1,SWIGTYPE_p_gsVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vec3SubVec3",2,SWIGTYPE_p_gsVector3);
  }
  
  result = gsVec3SubVec3((gsVector3 const &)*arg1,(gsVector3 const &)*arg2);
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3MulVec3(lua_State* L) {
  int SWIG_arg = 0;
  gsVector3 *arg1 = 0 ;
  gsVector3 *arg2 = 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsVec3MulVec3",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gsVec3MulVec3",1,"gsVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsVec3MulVec3",2,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vec3MulVec3",1,SWIGTYPE_p_gsVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vec3MulVec3",2,SWIGTYPE_p_gsVector3);
  }
  
  result = gsVec3MulVec3((gsVector3 const &)*arg1,(gsVector3 const &)*arg2);
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3DivVec3(lua_State* L) {
  int SWIG_arg = 0;
  gsVector3 *arg1 = 0 ;
  gsVector3 *arg2 = 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsVec3DivVec3",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gsVec3DivVec3",1,"gsVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsVec3DivVec3",2,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vec3DivVec3",1,SWIGTYPE_p_gsVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vec3DivVec3",2,SWIGTYPE_p_gsVector3);
  }
  
  result = gsVec3DivVec3((gsVector3 const &)*arg1,(gsVector3 const &)*arg2);
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3Mulf(lua_State* L) {
  int SWIG_arg = 0;
  gsVector3 *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsVec3Mulf",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gsVec3Mulf",1,"gsVector3 const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsVec3Mulf",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vec3Mulf",1,SWIGTYPE_p_gsVector3);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = gsVec3Mulf((gsVector3 const &)*arg1,(float const &)*arg2);
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3Divf(lua_State* L) {
  int SWIG_arg = 0;
  gsVector3 *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsVec3Divf",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gsVec3Divf",1,"gsVector3 const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsVec3Divf",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vec3Divf",1,SWIGTYPE_p_gsVector3);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = gsVec3Divf((gsVector3 const &)*arg1,(float const &)*arg2);
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QuatNegate(lua_State* L) {
  int SWIG_arg = 0;
  gsQuaternion *arg1 = 0 ;
  gsQuaternion result;
  
  SWIG_check_num_args("gsQuatNegate",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gsQuatNegate",1,"gsQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("QuatNegate",1,SWIGTYPE_p_gsQuaternion);
  }
  
  result = gsQuatNegate((gsQuaternion const &)*arg1);
  {
    gsQuaternion * resultptr = new gsQuaternion((const gsQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QuatAddQuat(lua_State* L) {
  int SWIG_arg = 0;
  gsQuaternion *arg1 = 0 ;
  gsQuaternion *arg2 = 0 ;
  gsQuaternion result;
  
  SWIG_check_num_args("gsQuatAddQuat",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gsQuatAddQuat",1,"gsQuaternion const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsQuatAddQuat",2,"gsQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("QuatAddQuat",1,SWIGTYPE_p_gsQuaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("QuatAddQuat",2,SWIGTYPE_p_gsQuaternion);
  }
  
  result = gsQuatAddQuat((gsQuaternion const &)*arg1,(gsQuaternion const &)*arg2);
  {
    gsQuaternion * resultptr = new gsQuaternion((const gsQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QuatSubQuat(lua_State* L) {
  int SWIG_arg = 0;
  gsQuaternion *arg1 = 0 ;
  gsQuaternion *arg2 = 0 ;
  gsQuaternion result;
  
  SWIG_check_num_args("gsQuatSubQuat",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gsQuatSubQuat",1,"gsQuaternion const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsQuatSubQuat",2,"gsQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("QuatSubQuat",1,SWIGTYPE_p_gsQuaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("QuatSubQuat",2,SWIGTYPE_p_gsQuaternion);
  }
  
  result = gsQuatSubQuat((gsQuaternion const &)*arg1,(gsQuaternion const &)*arg2);
  {
    gsQuaternion * resultptr = new gsQuaternion((const gsQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QuatMulQuat(lua_State* L) {
  int SWIG_arg = 0;
  gsQuaternion *arg1 = 0 ;
  gsQuaternion *arg2 = 0 ;
  gsQuaternion result;
  
  SWIG_check_num_args("gsQuatMulQuat",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gsQuatMulQuat",1,"gsQuaternion const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsQuatMulQuat",2,"gsQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("QuatMulQuat",1,SWIGTYPE_p_gsQuaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("QuatMulQuat",2,SWIGTYPE_p_gsQuaternion);
  }
  
  result = gsQuatMulQuat((gsQuaternion const &)*arg1,(gsQuaternion const &)*arg2);
  {
    gsQuaternion * resultptr = new gsQuaternion((const gsQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QuatMulf(lua_State* L) {
  int SWIG_arg = 0;
  gsQuaternion *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  gsQuaternion result;
  
  SWIG_check_num_args("gsQuatMulf",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gsQuatMulf",1,"gsQuaternion const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsQuatMulf",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("QuatMulf",1,SWIGTYPE_p_gsQuaternion);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = gsQuatMulf((gsQuaternion const &)*arg1,(float const &)*arg2);
  {
    gsQuaternion * resultptr = new gsQuaternion((const gsQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_QuatMulVec3(lua_State* L) {
  int SWIG_arg = 0;
  gsQuaternion *arg1 = 0 ;
  gsVector3 *arg2 = 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsQuatMulVec3",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gsQuatMulVec3",1,"gsQuaternion const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsQuatMulVec3",2,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("QuatMulVec3",1,SWIGTYPE_p_gsQuaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("QuatMulVec3",2,SWIGTYPE_p_gsVector3);
  }
  
  result = gsQuatMulVec3((gsQuaternion const &)*arg1,(gsVector3 const &)*arg2);
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3RotationTo(lua_State* L) {
  int SWIG_arg = 0;
  gsVector3 *arg1 = 0 ;
  gsVector3 *arg2 = 0 ;
  gsQuaternion result;
  
  SWIG_check_num_args("gsVec3RotationTo",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gsVec3RotationTo",1,"gsVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsVec3RotationTo",2,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vec3RotationTo",1,SWIGTYPE_p_gsVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Vec3RotationTo",2,SWIGTYPE_p_gsVector3);
  }
  
  result = gsVec3RotationTo((gsVector3 const &)*arg1,(gsVector3 const &)*arg2);
  {
    gsQuaternion * resultptr = new gsQuaternion((const gsQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ObjectList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsGameObject,gkGameObject > *result = 0 ;
  
  SWIG_check_num_args("gsArray< gsGameObject,gkGameObject >::gsArray",0,0)
  result = (gsArray< gsGameObject,gkGameObject > *)new gsArray< gsGameObject,gkGameObject >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsArrayT_gsGameObject_gkGameObject_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ObjectList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsGameObject,gkGameObject >::Array *arg1 = 0 ;
  gsArray< gsGameObject,gkGameObject > *result = 0 ;
  
  SWIG_check_num_args("gsArray< gsGameObject,gkGameObject >::gsArray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gsArray< gsGameObject,gkGameObject >::gsArray",1,"gsArray< gsGameObject,gkGameObject >::Array const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_utArrayT_gkGameObject_p_t,0))){
    SWIG_fail_ptr("new_ObjectList",1,SWIGTYPE_p_utArrayT_gkGameObject_p_t);
  }
  
  result = (gsArray< gsGameObject,gkGameObject > *)new gsArray< gsGameObject,gkGameObject >((gsArray< gsGameObject,gkGameObject >::Array const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsArrayT_gsGameObject_gkGameObject_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ObjectList(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ObjectList__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_utArrayT_gkGameObject_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ObjectList__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_ObjectList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsArray< gsGameObject,gkGameObject >::gsArray()\n"
    "    gsArray< gsGameObject,gkGameObject >::gsArray(gsArray< gsGameObject,gkGameObject >::Array const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ObjectList_clear(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsGameObject,gkGameObject > *arg1 = (gsArray< gsGameObject,gkGameObject > *) 0 ;
  
  SWIG_check_num_args("gsArray< gsGameObject,gkGameObject >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsGameObject,gkGameObject >::clear",1,"gsArray< gsGameObject,gkGameObject > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsGameObject_gkGameObject_t,0))){
    SWIG_fail_ptr("ObjectList_clear",1,SWIGTYPE_p_gsArrayT_gsGameObject_gkGameObject_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectList_size(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsGameObject,gkGameObject > *arg1 = (gsArray< gsGameObject,gkGameObject > *) 0 ;
  int result;
  
  SWIG_check_num_args("gsArray< gsGameObject,gkGameObject >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsGameObject,gkGameObject >::size",1,"gsArray< gsGameObject,gkGameObject > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsGameObject_gkGameObject_t,0))){
    SWIG_fail_ptr("ObjectList_size",1,SWIGTYPE_p_gsArrayT_gsGameObject_gkGameObject_t);
  }
  
  result = (int)((gsArray< gsGameObject,gkGameObject > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectList_empty(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsGameObject,gkGameObject > *arg1 = (gsArray< gsGameObject,gkGameObject > *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsArray< gsGameObject,gkGameObject >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsGameObject,gkGameObject >::empty",1,"gsArray< gsGameObject,gkGameObject > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsGameObject_gkGameObject_t,0))){
    SWIG_fail_ptr("ObjectList_empty",1,SWIGTYPE_p_gsArrayT_gsGameObject_gkGameObject_t);
  }
  
  result = (bool)((gsArray< gsGameObject,gkGameObject > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectList___getitem(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsGameObject,gkGameObject > *arg1 = (gsArray< gsGameObject,gkGameObject > *) 0 ;
  int arg2 ;
  gkGameObject *result = 0 ;
  
  SWIG_check_num_args("gsArray< gsGameObject,gkGameObject >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsGameObject,gkGameObject >::__getitem__",1,"gsArray< gsGameObject,gkGameObject > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsArray< gsGameObject,gkGameObject >::__getitem__",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsGameObject_gkGameObject_t,0))){
    SWIG_fail_ptr("ObjectList___getitem",1,SWIGTYPE_p_gsArrayT_gsGameObject_gkGameObject_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (gkGameObject *)(arg1)->__getitem__(arg2);
  if (result) {
    SWIG_arg += gsWrapGameObject(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectList_at(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsGameObject,gkGameObject > *arg1 = (gsArray< gsGameObject,gkGameObject > *) 0 ;
  int arg2 ;
  gkGameObject *result = 0 ;
  
  SWIG_check_num_args("gsArray< gsGameObject,gkGameObject >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsGameObject,gkGameObject >::at",1,"gsArray< gsGameObject,gkGameObject > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsArray< gsGameObject,gkGameObject >::at",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsGameObject_gkGameObject_t,0))){
    SWIG_fail_ptr("ObjectList_at",1,SWIGTYPE_p_gsArrayT_gsGameObject_gkGameObject_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (gkGameObject *)(arg1)->at(arg2);
  if (result) {
    SWIG_arg += gsWrapGameObject(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectList_push(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsGameObject,gkGameObject > *arg1 = (gsArray< gsGameObject,gkGameObject > *) 0 ;
  gsGameObject *arg2 = (gsGameObject *) 0 ;
  
  SWIG_check_num_args("gsArray< gsGameObject,gkGameObject >::push",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsGameObject,gkGameObject >::push",1,"gsArray< gsGameObject,gkGameObject > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gsArray< gsGameObject,gkGameObject >::push",2,"gsGameObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsGameObject_gkGameObject_t,0))){
    SWIG_fail_ptr("ObjectList_push",1,SWIGTYPE_p_gsArrayT_gsGameObject_gkGameObject_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("ObjectList_push",2,SWIGTYPE_p_gsGameObject);
  }
  
  (arg1)->push(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectList_erase(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsGameObject,gkGameObject > *arg1 = (gsArray< gsGameObject,gkGameObject > *) 0 ;
  gsGameObject *arg2 = (gsGameObject *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsArray< gsGameObject,gkGameObject >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsGameObject,gkGameObject >::erase",1,"gsArray< gsGameObject,gkGameObject > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gsArray< gsGameObject,gkGameObject >::erase",2,"gsGameObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsGameObject_gkGameObject_t,0))){
    SWIG_fail_ptr("ObjectList_erase",1,SWIGTYPE_p_gsArrayT_gsGameObject_gkGameObject_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("ObjectList_erase",2,SWIGTYPE_p_gsGameObject);
  }
  
  result = (bool)(arg1)->erase(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectList_iterator(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsGameObject,gkGameObject > *arg1 = (gsArray< gsGameObject,gkGameObject > *) 0 ;
  gsArrayIterator< gkGameObject > result;
  
  SWIG_check_num_args("gsArray< gsGameObject,gkGameObject >::iterator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsGameObject,gkGameObject >::iterator",1,"gsArray< gsGameObject,gkGameObject > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsGameObject_gkGameObject_t,0))){
    SWIG_fail_ptr("ObjectList_iterator",1,SWIGTYPE_p_gsArrayT_gsGameObject_gkGameObject_t);
  }
  
  result = (arg1)->iterator();
  {
    gsArrayIterator< gkGameObject > * resultptr = new gsArrayIterator< gkGameObject >((const gsArrayIterator< gkGameObject > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsArrayIteratorT_gkGameObject_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ObjectList(void *obj) {
gsArray< gsGameObject,gkGameObject > *arg1 = (gsArray< gsGameObject,gkGameObject > *) obj;
delete arg1;
}
static swig_lua_method swig_gsArray_Sl_gsGameObject_Sc_gkGameObject_Sg__methods[] = {
    {"clear", _wrap_ObjectList_clear}, 
    {"size", _wrap_ObjectList_size}, 
    {"empty", _wrap_ObjectList_empty}, 
    {"__getitem", _wrap_ObjectList___getitem}, 
    {"at", _wrap_ObjectList_at}, 
    {"push", _wrap_ObjectList_push}, 
    {"erase", _wrap_ObjectList_erase}, 
    {"iterator", _wrap_ObjectList_iterator}, 
    {0,0}
};
static swig_lua_attribute swig_gsArray_Sl_gsGameObject_Sc_gkGameObject_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsArray_Sl_gsGameObject_Sc_gkGameObject_Sg__bases[] = {0};
static const char *swig_gsArray_Sl_gsGameObject_Sc_gkGameObject_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_gsArray_Sl_gsGameObject_Sc_gkGameObject_Sg_ = { "ObjectList", &SWIGTYPE_p_gsArrayT_gsGameObject_gkGameObject_t,_wrap_new_ObjectList, swig_delete_ObjectList, swig_gsArray_Sl_gsGameObject_Sc_gkGameObject_Sg__methods, swig_gsArray_Sl_gsGameObject_Sc_gkGameObject_Sg__attributes, swig_gsArray_Sl_gsGameObject_Sc_gkGameObject_Sg__bases, swig_gsArray_Sl_gsGameObject_Sc_gkGameObject_Sg__base_names };

static int _wrap_new_ObjectIterator(lua_State* L) {
  int SWIG_arg = 0;
  gsArrayIterator< gkGameObject > *result = 0 ;
  
  SWIG_check_num_args("gsArrayIterator< gkGameObject >::gsArrayIterator",0,0)
  result = (gsArrayIterator< gkGameObject > *)new gsArrayIterator< gkGameObject >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsArrayIteratorT_gkGameObject_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectIterator_hasMoreElements(lua_State* L) {
  int SWIG_arg = 0;
  gsArrayIterator< gkGameObject > *arg1 = (gsArrayIterator< gkGameObject > *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsArrayIterator< gkGameObject >::hasMoreElements",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArrayIterator< gkGameObject >::hasMoreElements",1,"gsArrayIterator< gkGameObject > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayIteratorT_gkGameObject_t,0))){
    SWIG_fail_ptr("ObjectIterator_hasMoreElements",1,SWIGTYPE_p_gsArrayIteratorT_gkGameObject_t);
  }
  
  result = (bool)(arg1)->hasMoreElements();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectIterator_moveNext(lua_State* L) {
  int SWIG_arg = 0;
  gsArrayIterator< gkGameObject > *arg1 = (gsArrayIterator< gkGameObject > *) 0 ;
  
  SWIG_check_num_args("gsArrayIterator< gkGameObject >::moveNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArrayIterator< gkGameObject >::moveNext",1,"gsArrayIterator< gkGameObject > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayIteratorT_gkGameObject_t,0))){
    SWIG_fail_ptr("ObjectIterator_moveNext",1,SWIGTYPE_p_gsArrayIteratorT_gkGameObject_t);
  }
  
  (arg1)->moveNext();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectIterator_peekNext(lua_State* L) {
  int SWIG_arg = 0;
  gsArrayIterator< gkGameObject > *arg1 = (gsArrayIterator< gkGameObject > *) 0 ;
  gkGameObject *result = 0 ;
  
  SWIG_check_num_args("gsArrayIterator< gkGameObject >::peekNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArrayIterator< gkGameObject >::peekNext",1,"gsArrayIterator< gkGameObject > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayIteratorT_gkGameObject_t,0))){
    SWIG_fail_ptr("ObjectIterator_peekNext",1,SWIGTYPE_p_gsArrayIteratorT_gkGameObject_t);
  }
  
  result = (gkGameObject *)(arg1)->peekNext();
  if (result) {
    SWIG_arg += gsWrapGameObject(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ObjectIterator_getNext(lua_State* L) {
  int SWIG_arg = 0;
  gsArrayIterator< gkGameObject > *arg1 = (gsArrayIterator< gkGameObject > *) 0 ;
  gkGameObject *result = 0 ;
  
  SWIG_check_num_args("gsArrayIterator< gkGameObject >::getNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArrayIterator< gkGameObject >::getNext",1,"gsArrayIterator< gkGameObject > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayIteratorT_gkGameObject_t,0))){
    SWIG_fail_ptr("ObjectIterator_getNext",1,SWIGTYPE_p_gsArrayIteratorT_gkGameObject_t);
  }
  
  result = (gkGameObject *)(arg1)->getNext();
  if (result) {
    SWIG_arg += gsWrapGameObject(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ObjectIterator(void *obj) {
gsArrayIterator< gkGameObject > *arg1 = (gsArrayIterator< gkGameObject > *) obj;
delete arg1;
}
static swig_lua_method swig_gsArrayIterator_Sl_gkGameObject_Sg__methods[] = {
    {"hasMoreElements", _wrap_ObjectIterator_hasMoreElements}, 
    {"moveNext", _wrap_ObjectIterator_moveNext}, 
    {"peekNext", _wrap_ObjectIterator_peekNext}, 
    {"getNext", _wrap_ObjectIterator_getNext}, 
    {0,0}
};
static swig_lua_attribute swig_gsArrayIterator_Sl_gkGameObject_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsArrayIterator_Sl_gkGameObject_Sg__bases[] = {0};
static const char *swig_gsArrayIterator_Sl_gkGameObject_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_gsArrayIterator_Sl_gkGameObject_Sg_ = { "ObjectIterator", &SWIGTYPE_p_gsArrayIteratorT_gkGameObject_t,_wrap_new_ObjectIterator, swig_delete_ObjectIterator, swig_gsArrayIterator_Sl_gkGameObject_Sg__methods, swig_gsArrayIterator_Sl_gkGameObject_Sg__attributes, swig_gsArrayIterator_Sl_gkGameObject_Sg__bases, swig_gsArrayIterator_Sl_gkGameObject_Sg__base_names };

static int _wrap_new_Property__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsProperty *result = 0 ;
  
  SWIG_check_num_args("gsProperty::gsProperty",0,0)
  result = (gsProperty *)new gsProperty();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsProperty,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Property__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gkString *arg1 = 0 ;
  bool arg2 ;
  gkString temp1 ;
  gsProperty *result = 0 ;
  
  SWIG_check_num_args("gsProperty::gsProperty",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("gsProperty::gsProperty",1,"gkString const &");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gsProperty::gsProperty",2,"bool");
  
  temp1 = gkString((const char*)lua_tostring(L, 1));
  arg1 = &temp1;
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (gsProperty *)new gsProperty((gkString const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsProperty,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Property__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gkString *arg1 = 0 ;
  double arg2 ;
  gkString temp1 ;
  gsProperty *result = 0 ;
  
  SWIG_check_num_args("gsProperty::gsProperty",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("gsProperty::gsProperty",1,"gkString const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsProperty::gsProperty",2,"double");
  
  temp1 = gkString((const char*)lua_tostring(L, 1));
  arg1 = &temp1;
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (gsProperty *)new gsProperty((gkString const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsProperty,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Property__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  gkString *arg1 = 0 ;
  gkString *arg2 = 0 ;
  gkString temp1 ;
  gkString temp2 ;
  gsProperty *result = 0 ;
  
  SWIG_check_num_args("gsProperty::gsProperty",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("gsProperty::gsProperty",1,"gkString const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsProperty::gsProperty",2,"gkString const &");
  
  temp1 = gkString((const char*)lua_tostring(L, 1));
  arg1 = &temp1;
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gsProperty *)new gsProperty((gkString const &)*arg1,(gkString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsProperty,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Property__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  gsProperty *arg1 = 0 ;
  gsProperty *result = 0 ;
  
  SWIG_check_num_args("gsProperty::gsProperty",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gsProperty::gsProperty",1,"gsProperty const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsProperty,0))){
    SWIG_fail_ptr("new_Property",1,SWIGTYPE_p_gsProperty);
  }
  
  result = (gsProperty *)new gsProperty((gsProperty const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsProperty,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Property(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Property__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsProperty, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Property__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Property__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Property__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Property__SWIG_3(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Property'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsProperty::gsProperty()\n"
    "    gsProperty::gsProperty(gkString const &,bool)\n"
    "    gsProperty::gsProperty(gkString const &,double)\n"
    "    gsProperty::gsProperty(gkString const &,gkString const &)\n"
    "    gsProperty::gsProperty(gsProperty const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Property_getName(lua_State* L) {
  int SWIG_arg = 0;
  gsProperty *arg1 = (gsProperty *) 0 ;
  gkString *result = 0 ;
  
  SWIG_check_num_args("gsProperty::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsProperty::getName",1,"gsProperty const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsProperty,0))){
    SWIG_fail_ptr("Property_getName",1,SWIGTYPE_p_gsProperty);
  }
  
  result = (gkString *) &((gsProperty const *)arg1)->getName();
  
  lua_pushstring(L, result->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_getValue(lua_State* L) {
  int SWIG_arg = 0;
  gsProperty *arg1 = (gsProperty *) 0 ;
  gkString *result = 0 ;
  
  SWIG_check_num_args("gsProperty::getValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsProperty::getValue",1,"gsProperty const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsProperty,0))){
    SWIG_fail_ptr("Property_getValue",1,SWIGTYPE_p_gsProperty);
  }
  
  result = (gkString *) &((gsProperty const *)arg1)->getValue();
  
  lua_pushstring(L, result->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_makeDebug(lua_State* L) {
  int SWIG_arg = 0;
  gsProperty *arg1 = (gsProperty *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gsProperty::makeDebug",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsProperty::makeDebug",1,"gsProperty *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gsProperty::makeDebug",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsProperty,0))){
    SWIG_fail_ptr("Property_makeDebug",1,SWIGTYPE_p_gsProperty);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->makeDebug(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_getType(lua_State* L) {
  int SWIG_arg = 0;
  gsProperty *arg1 = (gsProperty *) 0 ;
  gsPropertyType result;
  
  SWIG_check_num_args("gsProperty::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsProperty::getType",1,"gsProperty const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsProperty,0))){
    SWIG_fail_ptr("Property_getType",1,SWIGTYPE_p_gsProperty);
  }
  
  result = (gsPropertyType)((gsProperty const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_toBool(lua_State* L) {
  int SWIG_arg = 0;
  gsProperty *arg1 = (gsProperty *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsProperty::toBool",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsProperty::toBool",1,"gsProperty const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsProperty,0))){
    SWIG_fail_ptr("Property_toBool",1,SWIGTYPE_p_gsProperty);
  }
  
  result = (bool)((gsProperty const *)arg1)->toBool();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_toNumber(lua_State* L) {
  int SWIG_arg = 0;
  gsProperty *arg1 = (gsProperty *) 0 ;
  double result;
  
  SWIG_check_num_args("gsProperty::toNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsProperty::toNumber",1,"gsProperty const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsProperty,0))){
    SWIG_fail_ptr("Property_toNumber",1,SWIGTYPE_p_gsProperty);
  }
  
  result = (double)((gsProperty const *)arg1)->toNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_toString(lua_State* L) {
  int SWIG_arg = 0;
  gsProperty *arg1 = (gsProperty *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsProperty::toString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsProperty::toString",1,"gsProperty const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsProperty,0))){
    SWIG_fail_ptr("Property_toString",1,SWIGTYPE_p_gsProperty);
  }
  
  result = ((gsProperty const *)arg1)->toString();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_fromBool(lua_State* L) {
  int SWIG_arg = 0;
  gsProperty *arg1 = (gsProperty *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gsProperty::fromBool",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsProperty::fromBool",1,"gsProperty *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gsProperty::fromBool",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsProperty,0))){
    SWIG_fail_ptr("Property_fromBool",1,SWIGTYPE_p_gsProperty);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->fromBool(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_fromNumber(lua_State* L) {
  int SWIG_arg = 0;
  gsProperty *arg1 = (gsProperty *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gsProperty::fromNumber",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsProperty::fromNumber",1,"gsProperty *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsProperty::fromNumber",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsProperty,0))){
    SWIG_fail_ptr("Property_fromNumber",1,SWIGTYPE_p_gsProperty);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->fromNumber(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Property_fromString(lua_State* L) {
  int SWIG_arg = 0;
  gsProperty *arg1 = (gsProperty *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsProperty::fromString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsProperty::fromString",1,"gsProperty *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsProperty::fromString",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsProperty,0))){
    SWIG_fail_ptr("Property_fromString",1,SWIGTYPE_p_gsProperty);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->fromString((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Property(void *obj) {
gsProperty *arg1 = (gsProperty *) obj;
delete arg1;
}
static swig_lua_method swig_gsProperty_methods[] = {
    {"getName", _wrap_Property_getName}, 
    {"getValue", _wrap_Property_getValue}, 
    {"makeDebug", _wrap_Property_makeDebug}, 
    {"getType", _wrap_Property_getType}, 
    {"toBool", _wrap_Property_toBool}, 
    {"toNumber", _wrap_Property_toNumber}, 
    {"toString", _wrap_Property_toString}, 
    {"fromBool", _wrap_Property_fromBool}, 
    {"fromNumber", _wrap_Property_fromNumber}, 
    {"fromString", _wrap_Property_fromString}, 
    {0,0}
};
static swig_lua_attribute swig_gsProperty_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsProperty_bases[] = {0};
static const char *swig_gsProperty_base_names[] = {0};
static swig_lua_class _wrap_class_gsProperty = { "Property", &SWIGTYPE_p_gsProperty,_wrap_new_Property, swig_delete_Property, swig_gsProperty_methods, swig_gsProperty_attributes, swig_gsProperty_bases, swig_gsProperty_base_names };

static int _wrap_UserDefs_getProperty(lua_State* L) {
  int SWIG_arg = 0;
  gsUserDefs *arg1 = (gsUserDefs *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gsProperty *result = 0 ;
  
  SWIG_check_num_args("gsUserDefs::getProperty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsUserDefs::getProperty",1,"gsUserDefs *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsUserDefs::getProperty",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsUserDefs,0))){
    SWIG_fail_ptr("UserDefs_getProperty",1,SWIGTYPE_p_gsUserDefs);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gsProperty *) &(arg1)->getProperty((gkString const &)*arg2);
  SWIG_arg += gsGetProperty(L, (*result)); 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UserDefs_addProperty(lua_State* L) {
  int SWIG_arg = 0;
  gsUserDefs *arg1 = (gsUserDefs *) 0 ;
  gsProperty *arg2 = 0 ;
  
  SWIG_check_num_args("gsUserDefs::addProperty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsUserDefs::addProperty",1,"gsUserDefs *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsUserDefs::addProperty",2,"gsProperty const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsUserDefs,0))){
    SWIG_fail_ptr("UserDefs_addProperty",1,SWIGTYPE_p_gsUserDefs);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsProperty,0))){
    SWIG_fail_ptr("UserDefs_addProperty",2,SWIGTYPE_p_gsProperty);
  }
  
  (arg1)->addProperty((gsProperty const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UserDefs_hasProperty(lua_State* L) {
  int SWIG_arg = 0;
  gsUserDefs *arg1 = (gsUserDefs *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  bool result;
  
  SWIG_check_num_args("gsUserDefs::hasProperty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsUserDefs::hasProperty",1,"gsUserDefs *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsUserDefs::hasProperty",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsUserDefs,0))){
    SWIG_fail_ptr("UserDefs_hasProperty",1,SWIGTYPE_p_gsUserDefs);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (bool)(arg1)->hasProperty((gkString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UserDefs___getitem(lua_State* L) {
  int SWIG_arg = 0;
  gsUserDefs *arg1 = (gsUserDefs *) 0 ;
  char *arg2 = (char *) 0 ;
  gsProperty *result = 0 ;
  
  SWIG_check_num_args("gsUserDefs::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsUserDefs::__getitem__",1,"gsUserDefs *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("gsUserDefs::__getitem__",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsUserDefs,0))){
    SWIG_fail_ptr("UserDefs___getitem",1,SWIGTYPE_p_gsUserDefs);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (gsProperty *) &(arg1)->__getitem__((char const *)arg2);
  SWIG_arg += gsGetProperty(L, (*result)); 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UserDefs___setitem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsUserDefs *arg1 = (gsUserDefs *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("gsUserDefs::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsUserDefs::__setitem__",1,"gsUserDefs *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("gsUserDefs::__setitem__",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("gsUserDefs::__setitem__",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsUserDefs,0))){
    SWIG_fail_ptr("UserDefs___setitem",1,SWIGTYPE_p_gsUserDefs);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->__setitem__((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UserDefs___setitem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsUserDefs *arg1 = (gsUserDefs *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  
  SWIG_check_num_args("gsUserDefs::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsUserDefs::__setitem__",1,"gsUserDefs *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("gsUserDefs::__setitem__",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsUserDefs::__setitem__",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsUserDefs,0))){
    SWIG_fail_ptr("UserDefs___setitem",1,SWIGTYPE_p_gsUserDefs);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->__setitem__((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UserDefs___setitem__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsUserDefs *arg1 = (gsUserDefs *) 0 ;
  char *arg2 = (char *) 0 ;
  gkString *arg3 = 0 ;
  gkString temp3 ;
  
  SWIG_check_num_args("gsUserDefs::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsUserDefs::__setitem__",1,"gsUserDefs *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("gsUserDefs::__setitem__",2,"char const *");
  if(!lua_isstring(L,3)) SWIG_fail_arg("gsUserDefs::__setitem__",3,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsUserDefs,0))){
    SWIG_fail_ptr("UserDefs___setitem",1,SWIGTYPE_p_gsUserDefs);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  temp3 = gkString((const char*)lua_tostring(L, 3));
  arg3 = &temp3;
  
  (arg1)->__setitem__((char const *)arg2,(gkString const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UserDefs___setitem(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsUserDefs, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_UserDefs___setitem__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsUserDefs, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_UserDefs___setitem__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsUserDefs, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_UserDefs___setitem__SWIG_2(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'UserDefs___setitem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsUserDefs::__setitem__(char const *,bool)\n"
    "    gsUserDefs::__setitem__(char const *,double)\n"
    "    gsUserDefs::__setitem__(char const *,gkString const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_UserDefs(void *obj) {
gsUserDefs *arg1 = (gsUserDefs *) obj;
delete arg1;
}
static swig_lua_method swig_gsUserDefs_methods[] = {
    {"getProperty", _wrap_UserDefs_getProperty}, 
    {"addProperty", _wrap_UserDefs_addProperty}, 
    {"hasProperty", _wrap_UserDefs_hasProperty}, 
    {"__getitem", _wrap_UserDefs___getitem}, 
    {"__setitem", _wrap_UserDefs___setitem}, 
    {0,0}
};
static swig_lua_attribute swig_gsUserDefs_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsUserDefs_bases[] = {0};
static const char *swig_gsUserDefs_base_names[] = {0};
static swig_lua_class _wrap_class_gsUserDefs = { "UserDefs", &SWIGTYPE_p_gsUserDefs,0, swig_delete_UserDefs, swig_gsUserDefs_methods, swig_gsUserDefs_attributes, swig_gsUserDefs_bases, swig_gsUserDefs_base_names };

static int _wrap_new_Mouse(lua_State* L) {
  int SWIG_arg = 0;
  gsMouse *result = 0 ;
  
  SWIG_check_num_args("gsMouse::gsMouse",0,0)
  result = (gsMouse *)new gsMouse();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsMouse,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mouse_xpos_set(lua_State* L) {
  int SWIG_arg = 0;
  gsMouse *arg1 = (gsMouse *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsMouse::xpos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMouse::xpos",1,"gsMouse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsMouse::xpos",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMouse,0))){
    SWIG_fail_ptr("Mouse_xpos_set",1,SWIGTYPE_p_gsMouse);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->xpos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mouse_xpos_get(lua_State* L) {
  int SWIG_arg = 0;
  gsMouse *arg1 = (gsMouse *) 0 ;
  float result;
  
  SWIG_check_num_args("gsMouse::xpos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMouse::xpos",1,"gsMouse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMouse,0))){
    SWIG_fail_ptr("Mouse_xpos_get",1,SWIGTYPE_p_gsMouse);
  }
  
  result = (float) ((arg1)->xpos);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mouse_ypos_set(lua_State* L) {
  int SWIG_arg = 0;
  gsMouse *arg1 = (gsMouse *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsMouse::ypos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMouse::ypos",1,"gsMouse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsMouse::ypos",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMouse,0))){
    SWIG_fail_ptr("Mouse_ypos_set",1,SWIGTYPE_p_gsMouse);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ypos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mouse_ypos_get(lua_State* L) {
  int SWIG_arg = 0;
  gsMouse *arg1 = (gsMouse *) 0 ;
  float result;
  
  SWIG_check_num_args("gsMouse::ypos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMouse::ypos",1,"gsMouse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMouse,0))){
    SWIG_fail_ptr("Mouse_ypos_get",1,SWIGTYPE_p_gsMouse);
  }
  
  result = (float) ((arg1)->ypos);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mouse_xrel_set(lua_State* L) {
  int SWIG_arg = 0;
  gsMouse *arg1 = (gsMouse *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsMouse::xrel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMouse::xrel",1,"gsMouse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsMouse::xrel",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMouse,0))){
    SWIG_fail_ptr("Mouse_xrel_set",1,SWIGTYPE_p_gsMouse);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->xrel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mouse_xrel_get(lua_State* L) {
  int SWIG_arg = 0;
  gsMouse *arg1 = (gsMouse *) 0 ;
  float result;
  
  SWIG_check_num_args("gsMouse::xrel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMouse::xrel",1,"gsMouse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMouse,0))){
    SWIG_fail_ptr("Mouse_xrel_get",1,SWIGTYPE_p_gsMouse);
  }
  
  result = (float) ((arg1)->xrel);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mouse_yrel_set(lua_State* L) {
  int SWIG_arg = 0;
  gsMouse *arg1 = (gsMouse *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsMouse::yrel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMouse::yrel",1,"gsMouse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsMouse::yrel",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMouse,0))){
    SWIG_fail_ptr("Mouse_yrel_set",1,SWIGTYPE_p_gsMouse);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->yrel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mouse_yrel_get(lua_State* L) {
  int SWIG_arg = 0;
  gsMouse *arg1 = (gsMouse *) 0 ;
  float result;
  
  SWIG_check_num_args("gsMouse::yrel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMouse::yrel",1,"gsMouse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMouse,0))){
    SWIG_fail_ptr("Mouse_yrel_get",1,SWIGTYPE_p_gsMouse);
  }
  
  result = (float) ((arg1)->yrel);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mouse_winx_set(lua_State* L) {
  int SWIG_arg = 0;
  gsMouse *arg1 = (gsMouse *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsMouse::winx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMouse::winx",1,"gsMouse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsMouse::winx",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMouse,0))){
    SWIG_fail_ptr("Mouse_winx_set",1,SWIGTYPE_p_gsMouse);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->winx = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mouse_winx_get(lua_State* L) {
  int SWIG_arg = 0;
  gsMouse *arg1 = (gsMouse *) 0 ;
  float result;
  
  SWIG_check_num_args("gsMouse::winx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMouse::winx",1,"gsMouse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMouse,0))){
    SWIG_fail_ptr("Mouse_winx_get",1,SWIGTYPE_p_gsMouse);
  }
  
  result = (float) ((arg1)->winx);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mouse_winy_set(lua_State* L) {
  int SWIG_arg = 0;
  gsMouse *arg1 = (gsMouse *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsMouse::winy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMouse::winy",1,"gsMouse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsMouse::winy",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMouse,0))){
    SWIG_fail_ptr("Mouse_winy_set",1,SWIGTYPE_p_gsMouse);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->winy = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mouse_winy_get(lua_State* L) {
  int SWIG_arg = 0;
  gsMouse *arg1 = (gsMouse *) 0 ;
  float result;
  
  SWIG_check_num_args("gsMouse::winy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMouse::winy",1,"gsMouse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMouse,0))){
    SWIG_fail_ptr("Mouse_winy_get",1,SWIGTYPE_p_gsMouse);
  }
  
  result = (float) ((arg1)->winy);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mouse_wheel_set(lua_State* L) {
  int SWIG_arg = 0;
  gsMouse *arg1 = (gsMouse *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsMouse::wheel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMouse::wheel",1,"gsMouse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsMouse::wheel",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMouse,0))){
    SWIG_fail_ptr("Mouse_wheel_set",1,SWIGTYPE_p_gsMouse);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->wheel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mouse_wheel_get(lua_State* L) {
  int SWIG_arg = 0;
  gsMouse *arg1 = (gsMouse *) 0 ;
  float result;
  
  SWIG_check_num_args("gsMouse::wheel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMouse::wheel",1,"gsMouse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMouse,0))){
    SWIG_fail_ptr("Mouse_wheel_get",1,SWIGTYPE_p_gsMouse);
  }
  
  result = (float) ((arg1)->wheel);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mouse_moved_set(lua_State* L) {
  int SWIG_arg = 0;
  gsMouse *arg1 = (gsMouse *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gsMouse::moved",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMouse::moved",1,"gsMouse *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gsMouse::moved",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMouse,0))){
    SWIG_fail_ptr("Mouse_moved_set",1,SWIGTYPE_p_gsMouse);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->moved = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mouse_moved_get(lua_State* L) {
  int SWIG_arg = 0;
  gsMouse *arg1 = (gsMouse *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsMouse::moved",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMouse::moved",1,"gsMouse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMouse,0))){
    SWIG_fail_ptr("Mouse_moved_get",1,SWIGTYPE_p_gsMouse);
  }
  
  result = (bool) ((arg1)->moved);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mouse_capture(lua_State* L) {
  int SWIG_arg = 0;
  gsMouse *arg1 = (gsMouse *) 0 ;
  
  SWIG_check_num_args("gsMouse::capture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMouse::capture",1,"gsMouse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMouse,0))){
    SWIG_fail_ptr("Mouse_capture",1,SWIGTYPE_p_gsMouse);
  }
  
  (arg1)->capture();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mouse_isButtonDown(lua_State* L) {
  int SWIG_arg = 0;
  gsMouse *arg1 = (gsMouse *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("gsMouse::isButtonDown",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMouse::isButtonDown",1,"gsMouse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsMouse::isButtonDown",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMouse,0))){
    SWIG_fail_ptr("Mouse_isButtonDown",1,SWIGTYPE_p_gsMouse);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->isButtonDown(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Mouse(void *obj) {
gsMouse *arg1 = (gsMouse *) obj;
delete arg1;
}
static swig_lua_method swig_gsMouse_methods[] = {
    {"capture", _wrap_Mouse_capture}, 
    {"isButtonDown", _wrap_Mouse_isButtonDown}, 
    {0,0}
};
static swig_lua_attribute swig_gsMouse_attributes[] = {
    { "xpos", _wrap_Mouse_xpos_get, _wrap_Mouse_xpos_set},
    { "ypos", _wrap_Mouse_ypos_get, _wrap_Mouse_ypos_set},
    { "xrel", _wrap_Mouse_xrel_get, _wrap_Mouse_xrel_set},
    { "yrel", _wrap_Mouse_yrel_get, _wrap_Mouse_yrel_set},
    { "winx", _wrap_Mouse_winx_get, _wrap_Mouse_winx_set},
    { "winy", _wrap_Mouse_winy_get, _wrap_Mouse_winy_set},
    { "wheel", _wrap_Mouse_wheel_get, _wrap_Mouse_wheel_set},
    { "moved", _wrap_Mouse_moved_get, _wrap_Mouse_moved_set},
    {0,0,0}
};
static swig_lua_class *swig_gsMouse_bases[] = {0};
static const char *swig_gsMouse_base_names[] = {0};
static swig_lua_class _wrap_class_gsMouse = { "Mouse", &SWIGTYPE_p_gsMouse,_wrap_new_Mouse, swig_delete_Mouse, swig_gsMouse_methods, swig_gsMouse_attributes, swig_gsMouse_bases, swig_gsMouse_base_names };

static int _wrap_getNumJoysticks(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("getNumJoysticks",0,0)
  result = (int)getNumJoysticks();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Joystick(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  gsJoystick *result = 0 ;
  
  SWIG_check_num_args("gsJoystick::gsJoystick",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gsJoystick::gsJoystick",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (gsJoystick *)new gsJoystick(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsJoystick,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_capture(lua_State* L) {
  int SWIG_arg = 0;
  gsJoystick *arg1 = (gsJoystick *) 0 ;
  
  SWIG_check_num_args("gsJoystick::capture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsJoystick::capture",1,"gsJoystick *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsJoystick,0))){
    SWIG_fail_ptr("Joystick_capture",1,SWIGTYPE_p_gsJoystick);
  }
  
  (arg1)->capture();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_getNumAxes(lua_State* L) {
  int SWIG_arg = 0;
  gsJoystick *arg1 = (gsJoystick *) 0 ;
  int result;
  
  SWIG_check_num_args("gsJoystick::getNumAxes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsJoystick::getNumAxes",1,"gsJoystick *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsJoystick,0))){
    SWIG_fail_ptr("Joystick_getNumAxes",1,SWIGTYPE_p_gsJoystick);
  }
  
  result = (int)(arg1)->getNumAxes();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_getAxis(lua_State* L) {
  int SWIG_arg = 0;
  gsJoystick *arg1 = (gsJoystick *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("gsJoystick::getAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsJoystick::getAxis",1,"gsJoystick *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsJoystick::getAxis",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsJoystick,0))){
    SWIG_fail_ptr("Joystick_getAxis",1,SWIGTYPE_p_gsJoystick);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->getAxis(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_getRelAxis(lua_State* L) {
  int SWIG_arg = 0;
  gsJoystick *arg1 = (gsJoystick *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("gsJoystick::getRelAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsJoystick::getRelAxis",1,"gsJoystick *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsJoystick::getRelAxis",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsJoystick,0))){
    SWIG_fail_ptr("Joystick_getRelAxis",1,SWIGTYPE_p_gsJoystick);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->getRelAxis(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_getAccel(lua_State* L) {
  int SWIG_arg = 0;
  gsJoystick *arg1 = (gsJoystick *) 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsJoystick::getAccel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsJoystick::getAccel",1,"gsJoystick *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsJoystick,0))){
    SWIG_fail_ptr("Joystick_getAccel",1,SWIGTYPE_p_gsJoystick);
  }
  
  result = (arg1)->getAccel();
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_getNumButtons(lua_State* L) {
  int SWIG_arg = 0;
  gsJoystick *arg1 = (gsJoystick *) 0 ;
  int result;
  
  SWIG_check_num_args("gsJoystick::getNumButtons",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsJoystick::getNumButtons",1,"gsJoystick *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsJoystick,0))){
    SWIG_fail_ptr("Joystick_getNumButtons",1,SWIGTYPE_p_gsJoystick);
  }
  
  result = (int)(arg1)->getNumButtons();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_getButtonCount(lua_State* L) {
  int SWIG_arg = 0;
  gsJoystick *arg1 = (gsJoystick *) 0 ;
  int result;
  
  SWIG_check_num_args("gsJoystick::getButtonCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsJoystick::getButtonCount",1,"gsJoystick *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsJoystick,0))){
    SWIG_fail_ptr("Joystick_getButtonCount",1,SWIGTYPE_p_gsJoystick);
  }
  
  result = (int)(arg1)->getButtonCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_isButtonDown(lua_State* L) {
  int SWIG_arg = 0;
  gsJoystick *arg1 = (gsJoystick *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("gsJoystick::isButtonDown",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsJoystick::isButtonDown",1,"gsJoystick *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsJoystick::isButtonDown",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsJoystick,0))){
    SWIG_fail_ptr("Joystick_isButtonDown",1,SWIGTYPE_p_gsJoystick);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->isButtonDown(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_wasButtonPressed(lua_State* L) {
  int SWIG_arg = 0;
  gsJoystick *arg1 = (gsJoystick *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("gsJoystick::wasButtonPressed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsJoystick::wasButtonPressed",1,"gsJoystick *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsJoystick::wasButtonPressed",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsJoystick,0))){
    SWIG_fail_ptr("Joystick_wasButtonPressed",1,SWIGTYPE_p_gsJoystick);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->wasButtonPressed(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_getWinWidth(lua_State* L) {
  int SWIG_arg = 0;
  gsJoystick *arg1 = (gsJoystick *) 0 ;
  int result;
  
  SWIG_check_num_args("gsJoystick::getWinWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsJoystick::getWinWidth",1,"gsJoystick *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsJoystick,0))){
    SWIG_fail_ptr("Joystick_getWinWidth",1,SWIGTYPE_p_gsJoystick);
  }
  
  result = (int)(arg1)->getWinWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_getWinHeight(lua_State* L) {
  int SWIG_arg = 0;
  gsJoystick *arg1 = (gsJoystick *) 0 ;
  int result;
  
  SWIG_check_num_args("gsJoystick::getWinHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsJoystick::getWinHeight",1,"gsJoystick *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsJoystick,0))){
    SWIG_fail_ptr("Joystick_getWinHeight",1,SWIGTYPE_p_gsJoystick);
  }
  
  result = (int)(arg1)->getWinHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Joystick(void *obj) {
gsJoystick *arg1 = (gsJoystick *) obj;
delete arg1;
}
static swig_lua_method swig_gsJoystick_methods[] = {
    {"capture", _wrap_Joystick_capture}, 
    {"getNumAxes", _wrap_Joystick_getNumAxes}, 
    {"getAxis", _wrap_Joystick_getAxis}, 
    {"getRelAxis", _wrap_Joystick_getRelAxis}, 
    {"getAccel", _wrap_Joystick_getAccel}, 
    {"getNumButtons", _wrap_Joystick_getNumButtons}, 
    {"getButtonCount", _wrap_Joystick_getButtonCount}, 
    {"isButtonDown", _wrap_Joystick_isButtonDown}, 
    {"wasButtonPressed", _wrap_Joystick_wasButtonPressed}, 
    {"getWinWidth", _wrap_Joystick_getWinWidth}, 
    {"getWinHeight", _wrap_Joystick_getWinHeight}, 
    {0,0}
};
static swig_lua_attribute swig_gsJoystick_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsJoystick_bases[] = {0};
static const char *swig_gsJoystick_base_names[] = {0};
static swig_lua_class _wrap_class_gsJoystick = { "Joystick", &SWIGTYPE_p_gsJoystick,_wrap_new_Joystick, swig_delete_Joystick, swig_gsJoystick_methods, swig_gsJoystick_attributes, swig_gsJoystick_bases, swig_gsJoystick_base_names };

static int _wrap_new_Keyboard(lua_State* L) {
  int SWIG_arg = 0;
  gsKeyboard *result = 0 ;
  
  SWIG_check_num_args("gsKeyboard::gsKeyboard",0,0)
  result = (gsKeyboard *)new gsKeyboard();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsKeyboard,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Keyboard_capture(lua_State* L) {
  int SWIG_arg = 0;
  gsKeyboard *arg1 = (gsKeyboard *) 0 ;
  
  SWIG_check_num_args("gsKeyboard::capture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsKeyboard::capture",1,"gsKeyboard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsKeyboard,0))){
    SWIG_fail_ptr("Keyboard_capture",1,SWIGTYPE_p_gsKeyboard);
  }
  
  (arg1)->capture();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Keyboard_isKeyDown(lua_State* L) {
  int SWIG_arg = 0;
  gsKeyboard *arg1 = (gsKeyboard *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("gsKeyboard::isKeyDown",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsKeyboard::isKeyDown",1,"gsKeyboard *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsKeyboard::isKeyDown",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsKeyboard,0))){
    SWIG_fail_ptr("Keyboard_isKeyDown",1,SWIGTYPE_p_gsKeyboard);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->isKeyDown(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Keyboard(void *obj) {
gsKeyboard *arg1 = (gsKeyboard *) obj;
delete arg1;
}
static swig_lua_method swig_gsKeyboard_methods[] = {
    {"capture", _wrap_Keyboard_capture}, 
    {"isKeyDown", _wrap_Keyboard_isKeyDown}, 
    {0,0}
};
static swig_lua_attribute swig_gsKeyboard_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsKeyboard_bases[] = {0};
static const char *swig_gsKeyboard_base_names[] = {0};
static swig_lua_class _wrap_class_gsKeyboard = { "Keyboard", &SWIGTYPE_p_gsKeyboard,_wrap_new_Keyboard, swig_delete_Keyboard, swig_gsKeyboard_methods, swig_gsKeyboard_attributes, swig_gsKeyboard_bases, swig_gsKeyboard_base_names };

static int _wrap_new_Engine(lua_State* L) {
  int SWIG_arg = 0;
  gsEngine *result = 0 ;
  
  SWIG_check_num_args("gsEngine::gsEngine",0,0)
  result = (gsEngine *)new gsEngine();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsEngine,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_initialize(lua_State* L) {
  int SWIG_arg = 0;
  gsEngine *arg1 = (gsEngine *) 0 ;
  
  SWIG_check_num_args("gsEngine::initialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsEngine::initialize",1,"gsEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsEngine,0))){
    SWIG_fail_ptr("Engine_initialize",1,SWIGTYPE_p_gsEngine);
  }
  
  (arg1)->initialize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_run(lua_State* L) {
  int SWIG_arg = 0;
  gsEngine *arg1 = (gsEngine *) 0 ;
  
  SWIG_check_num_args("gsEngine::run",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsEngine::run",1,"gsEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsEngine,0))){
    SWIG_fail_ptr("Engine_run",1,SWIGTYPE_p_gsEngine);
  }
  
  (arg1)->run();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_requestExit(lua_State* L) {
  int SWIG_arg = 0;
  gsEngine *arg1 = (gsEngine *) 0 ;
  
  SWIG_check_num_args("gsEngine::requestExit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsEngine::requestExit",1,"gsEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsEngine,0))){
    SWIG_fail_ptr("Engine_requestExit",1,SWIGTYPE_p_gsEngine);
  }
  
  (arg1)->requestExit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_saveTimestampedScreenShot(lua_State* L) {
  int SWIG_arg = 0;
  gsEngine *arg1 = (gsEngine *) 0 ;
  gkString *arg2 = 0 ;
  gkString *arg3 = 0 ;
  gkString temp2 ;
  gkString temp3 ;
  
  SWIG_check_num_args("gsEngine::saveTimestampedScreenShot",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsEngine::saveTimestampedScreenShot",1,"gsEngine *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsEngine::saveTimestampedScreenShot",2,"gkString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("gsEngine::saveTimestampedScreenShot",3,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsEngine,0))){
    SWIG_fail_ptr("Engine_saveTimestampedScreenShot",1,SWIGTYPE_p_gsEngine);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  
  temp3 = gkString((const char*)lua_tostring(L, 3));
  arg3 = &temp3;
  
  (arg1)->saveTimestampedScreenShot((gkString const &)*arg2,(gkString const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_connect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsEngine *arg1 = (gsEngine *) 0 ;
  int arg2 ;
  gsFunction arg3 ;
  
  SWIG_check_num_args("gsEngine::connect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsEngine::connect",1,"gsEngine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsEngine::connect",2,"int");
  if(!lua_isfunction(L,3)) SWIG_fail_arg("gsEngine::connect",3,"gsFunction");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsEngine,0))){
    SWIG_fail_ptr("Engine_connect",1,SWIGTYPE_p_gsEngine);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (&arg3)->m_id = 3; (&arg3)->L = L; 
  (arg1)->connect(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_connect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsEngine *arg1 = (gsEngine *) 0 ;
  int arg2 ;
  gsSelf arg3 ;
  gsFunction arg4 ;
  
  SWIG_check_num_args("gsEngine::connect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsEngine::connect",1,"gsEngine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsEngine::connect",2,"int");
  if(!lua_istable(L,3)) SWIG_fail_arg("gsEngine::connect",3,"gsSelf");
  if(!lua_isfunction(L,4)) SWIG_fail_arg("gsEngine::connect",4,"gsFunction");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsEngine,0))){
    SWIG_fail_ptr("Engine_connect",1,SWIGTYPE_p_gsEngine);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (&arg3)->m_id = 3; (&arg3)->L = L; 
  (&arg4)->m_id = 4; (&arg4)->L = L; 
  (arg1)->connect(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_connect(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsEngine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        _v = lua_isfunction(L, argv[2]); 
        if (_v) {
          return _wrap_Engine_connect__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsEngine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        _v = lua_istable(L, argv[2]); 
        if (_v) {
          _v = lua_isfunction(L, argv[3]); 
          if (_v) {
            return _wrap_Engine_connect__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Engine_connect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsEngine::connect(int,gsFunction)\n"
    "    gsEngine::connect(int,gsSelf,gsFunction)\n");
  lua_error(L);return 0;
}


static int _wrap_Engine_loadBlendFile(lua_State* L) {
  int SWIG_arg = 0;
  gsEngine *arg1 = (gsEngine *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gkScene *result = 0 ;
  
  SWIG_check_num_args("gsEngine::loadBlendFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsEngine::loadBlendFile",1,"gsEngine *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsEngine::loadBlendFile",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsEngine,0))){
    SWIG_fail_ptr("Engine_loadBlendFile",1,SWIGTYPE_p_gsEngine);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gkScene *)(arg1)->loadBlendFile((gkString const &)*arg2);
  if (result) {
    SWIG_arg += GS_LUA_OBJECT_STORE(result, Scene); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getActiveScene(lua_State* L) {
  int SWIG_arg = 0;
  gsEngine *arg1 = (gsEngine *) 0 ;
  gkScene *result = 0 ;
  
  SWIG_check_num_args("gsEngine::getActiveScene",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsEngine::getActiveScene",1,"gsEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsEngine,0))){
    SWIG_fail_ptr("Engine_getActiveScene",1,SWIGTYPE_p_gsEngine);
  }
  
  result = (gkScene *)(arg1)->getActiveScene();
  if (result) {
    SWIG_arg += GS_LUA_OBJECT_STORE(result, Scene); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_unloadBlendFile(lua_State* L) {
  int SWIG_arg = 0;
  gsEngine *arg1 = (gsEngine *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsEngine::unloadBlendFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsEngine::unloadBlendFile",1,"gsEngine *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsEngine::unloadBlendFile",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsEngine,0))){
    SWIG_fail_ptr("Engine_unloadBlendFile",1,SWIGTYPE_p_gsEngine);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->unloadBlendFile((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_unloadAllBlendFiles(lua_State* L) {
  int SWIG_arg = 0;
  gsEngine *arg1 = (gsEngine *) 0 ;
  
  SWIG_check_num_args("gsEngine::unloadAllBlendFiles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsEngine::unloadAllBlendFiles",1,"gsEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsEngine,0))){
    SWIG_fail_ptr("Engine_unloadAllBlendFiles",1,SWIGTYPE_p_gsEngine);
  }
  
  (arg1)->unloadAllBlendFiles();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Engine_getUserDefs(lua_State* L) {
  int SWIG_arg = 0;
  gsEngine *arg1 = (gsEngine *) 0 ;
  gsUserDefs *result = 0 ;
  
  SWIG_check_num_args("gsEngine::getUserDefs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsEngine::getUserDefs",1,"gsEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsEngine,0))){
    SWIG_fail_ptr("Engine_getUserDefs",1,SWIGTYPE_p_gsEngine);
  }
  
  result = (gsUserDefs *) &(arg1)->getUserDefs();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsUserDefs,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Engine(void *obj) {
gsEngine *arg1 = (gsEngine *) obj;
delete arg1;
}
static swig_lua_method swig_gsEngine_methods[] = {
    {"initialize", _wrap_Engine_initialize}, 
    {"run", _wrap_Engine_run}, 
    {"requestExit", _wrap_Engine_requestExit}, 
    {"saveTimestampedScreenShot", _wrap_Engine_saveTimestampedScreenShot}, 
    {"connect", _wrap_Engine_connect}, 
    {"loadBlendFile", _wrap_Engine_loadBlendFile}, 
    {"getActiveScene", _wrap_Engine_getActiveScene}, 
    {"unloadBlendFile", _wrap_Engine_unloadBlendFile}, 
    {"unloadAllBlendFiles", _wrap_Engine_unloadAllBlendFiles}, 
    {"getUserDefs", _wrap_Engine_getUserDefs}, 
    {0,0}
};
static swig_lua_attribute swig_gsEngine_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsEngine_bases[] = {0};
static const char *swig_gsEngine_base_names[] = {0};
static swig_lua_class _wrap_class_gsEngine = { "Engine", &SWIGTYPE_p_gsEngine,_wrap_new_Engine, swig_delete_Engine, swig_gsEngine_methods, swig_gsEngine_attributes, swig_gsEngine_bases, swig_gsEngine_base_names };

static int _wrap_new_Object(lua_State* L) {
  int SWIG_arg = 0;
  gsObject *result = 0 ;
  
  SWIG_check_num_args("gsObject::gsObject",0,0)
  result = (gsObject *)new gsObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsObject,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object_createInstance(lua_State* L) {
  int SWIG_arg = 0;
  gsObject *arg1 = (gsObject *) 0 ;
  
  SWIG_check_num_args("gsObject::createInstance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsObject::createInstance",1,"gsObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsObject,0))){
    SWIG_fail_ptr("Object_createInstance",1,SWIGTYPE_p_gsObject);
  }
  
  (arg1)->createInstance();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object_destroyInstance(lua_State* L) {
  int SWIG_arg = 0;
  gsObject *arg1 = (gsObject *) 0 ;
  
  SWIG_check_num_args("gsObject::destroyInstance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsObject::destroyInstance",1,"gsObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsObject,0))){
    SWIG_fail_ptr("Object_destroyInstance",1,SWIGTYPE_p_gsObject);
  }
  
  (arg1)->destroyInstance();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object_reinstance(lua_State* L) {
  int SWIG_arg = 0;
  gsObject *arg1 = (gsObject *) 0 ;
  
  SWIG_check_num_args("gsObject::reinstance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsObject::reinstance",1,"gsObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsObject,0))){
    SWIG_fail_ptr("Object_reinstance",1,SWIGTYPE_p_gsObject);
  }
  
  (arg1)->reinstance();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object_getName(lua_State* L) {
  int SWIG_arg = 0;
  gsObject *arg1 = (gsObject *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsObject::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsObject::getName",1,"gsObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsObject,0))){
    SWIG_fail_ptr("Object_getName",1,SWIGTYPE_p_gsObject);
  }
  
  result = (arg1)->getName();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Object(void *obj) {
gsObject *arg1 = (gsObject *) obj;
delete arg1;
}
static swig_lua_method swig_gsObject_methods[] = {
    {"createInstance", _wrap_Object_createInstance}, 
    {"destroyInstance", _wrap_Object_destroyInstance}, 
    {"reinstance", _wrap_Object_reinstance}, 
    {"getName", _wrap_Object_getName}, 
    {0,0}
};
static swig_lua_attribute swig_gsObject_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsObject_bases[] = {0};
static const char *swig_gsObject_base_names[] = {0};
static swig_lua_class _wrap_class_gsObject = { "Object", &SWIGTYPE_p_gsObject,_wrap_new_Object, swig_delete_Object, swig_gsObject_methods, swig_gsObject_attributes, swig_gsObject_bases, swig_gsObject_base_names };

static int _wrap_new_HUD(lua_State* L) {
  int SWIG_arg = 0;
  gsHUD *result = 0 ;
  
  SWIG_check_num_args("gsHUD::gsHUD",0,0)
  result = (gsHUD *)new gsHUD();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsHUD,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HUD_show(lua_State* L) {
  int SWIG_arg = 0;
  gsHUD *arg1 = (gsHUD *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gsHUD::show",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsHUD::show",1,"gsHUD *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gsHUD::show",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsHUD,0))){
    SWIG_fail_ptr("HUD_show",1,SWIGTYPE_p_gsHUD);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->show(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HUD_getChild(lua_State* L) {
  int SWIG_arg = 0;
  gsHUD *arg1 = (gsHUD *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gkHUDElement *result = 0 ;
  
  SWIG_check_num_args("gsHUD::getChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsHUD::getChild",1,"gsHUD *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsHUD::getChild",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsHUD,0))){
    SWIG_fail_ptr("HUD_getChild",1,SWIGTYPE_p_gsHUD);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gkHUDElement *)(arg1)->getChild((gkString const &)*arg2);
  if (result) {
    SWIG_arg += GS_LUA_OBJECT_STORE(result, HUDElement); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_HUD(void *obj) {
gsHUD *arg1 = (gsHUD *) obj;
delete arg1;
}
static swig_lua_method swig_gsHUD_methods[] = {
    {"show", _wrap_HUD_show}, 
    {"getChild", _wrap_HUD_getChild}, 
    {0,0}
};
static swig_lua_attribute swig_gsHUD_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsHUD_bases[] = {0};
static const char *swig_gsHUD_base_names[] = {0};
static swig_lua_class _wrap_class_gsHUD = { "HUD", &SWIGTYPE_p_gsHUD,_wrap_new_HUD, swig_delete_HUD, swig_gsHUD_methods, swig_gsHUD_attributes, swig_gsHUD_bases, swig_gsHUD_base_names };

static int _wrap_new_HUDElement(lua_State* L) {
  int SWIG_arg = 0;
  gsHUDElement *result = 0 ;
  
  SWIG_check_num_args("gsHUDElement::gsHUDElement",0,0)
  result = (gsHUDElement *)new gsHUDElement();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsHUDElement,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HUDElement_show(lua_State* L) {
  int SWIG_arg = 0;
  gsHUDElement *arg1 = (gsHUDElement *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gsHUDElement::show",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsHUDElement::show",1,"gsHUDElement *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gsHUDElement::show",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsHUDElement,0))){
    SWIG_fail_ptr("HUDElement_show",1,SWIGTYPE_p_gsHUDElement);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->show(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HUDElement_getValue(lua_State* L) {
  int SWIG_arg = 0;
  gsHUDElement *arg1 = (gsHUDElement *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsHUDElement::getValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsHUDElement::getValue",1,"gsHUDElement *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsHUDElement,0))){
    SWIG_fail_ptr("HUDElement_getValue",1,SWIGTYPE_p_gsHUDElement);
  }
  
  result = (arg1)->getValue();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HUDElement_setValue(lua_State* L) {
  int SWIG_arg = 0;
  gsHUDElement *arg1 = (gsHUDElement *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsHUDElement::setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsHUDElement::setValue",1,"gsHUDElement *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsHUDElement::setValue",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsHUDElement,0))){
    SWIG_fail_ptr("HUDElement_setValue",1,SWIGTYPE_p_gsHUDElement);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setValue((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HUDElement_setUvCoords(lua_State* L) {
  int SWIG_arg = 0;
  gsHUDElement *arg1 = (gsHUDElement *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("gsHUDElement::setUvCoords",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsHUDElement::setUvCoords",1,"gsHUDElement *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsHUDElement::setUvCoords",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsHUDElement::setUvCoords",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gsHUDElement::setUvCoords",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("gsHUDElement::setUvCoords",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsHUDElement,0))){
    SWIG_fail_ptr("HUDElement_setUvCoords",1,SWIGTYPE_p_gsHUDElement);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  (arg1)->setUvCoords(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HUDElement_getParameter(lua_State* L) {
  int SWIG_arg = 0;
  gsHUDElement *arg1 = (gsHUDElement *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gkString result;
  
  SWIG_check_num_args("gsHUDElement::getParameter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsHUDElement::getParameter",1,"gsHUDElement *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsHUDElement::getParameter",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsHUDElement,0))){
    SWIG_fail_ptr("HUDElement_getParameter",1,SWIGTYPE_p_gsHUDElement);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (arg1)->getParameter((gkString const &)*arg2);
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HUDElement_setParameter(lua_State* L) {
  int SWIG_arg = 0;
  gsHUDElement *arg1 = (gsHUDElement *) 0 ;
  gkString *arg2 = 0 ;
  gkString *arg3 = 0 ;
  gkString temp2 ;
  gkString temp3 ;
  
  SWIG_check_num_args("gsHUDElement::setParameter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsHUDElement::setParameter",1,"gsHUDElement *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsHUDElement::setParameter",2,"gkString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("gsHUDElement::setParameter",3,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsHUDElement,0))){
    SWIG_fail_ptr("HUDElement_setParameter",1,SWIGTYPE_p_gsHUDElement);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  
  temp3 = gkString((const char*)lua_tostring(L, 3));
  arg3 = &temp3;
  
  (arg1)->setParameter((gkString const &)*arg2,(gkString const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HUDElement_getMaterialName(lua_State* L) {
  int SWIG_arg = 0;
  gsHUDElement *arg1 = (gsHUDElement *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsHUDElement::getMaterialName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsHUDElement::getMaterialName",1,"gsHUDElement *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsHUDElement,0))){
    SWIG_fail_ptr("HUDElement_getMaterialName",1,SWIGTYPE_p_gsHUDElement);
  }
  
  result = (arg1)->getMaterialName();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HUDElement_setMaterialName(lua_State* L) {
  int SWIG_arg = 0;
  gsHUDElement *arg1 = (gsHUDElement *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsHUDElement::setMaterialName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsHUDElement::setMaterialName",1,"gsHUDElement *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsHUDElement::setMaterialName",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsHUDElement,0))){
    SWIG_fail_ptr("HUDElement_setMaterialName",1,SWIGTYPE_p_gsHUDElement);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setMaterialName((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HUDElement_getMaterialAlpha(lua_State* L) {
  int SWIG_arg = 0;
  gsHUDElement *arg1 = (gsHUDElement *) 0 ;
  float result;
  
  SWIG_check_num_args("gsHUDElement::getMaterialAlpha",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsHUDElement::getMaterialAlpha",1,"gsHUDElement *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsHUDElement,0))){
    SWIG_fail_ptr("HUDElement_getMaterialAlpha",1,SWIGTYPE_p_gsHUDElement);
  }
  
  result = (float)(arg1)->getMaterialAlpha();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HUDElement_setMaterialAlpha(lua_State* L) {
  int SWIG_arg = 0;
  gsHUDElement *arg1 = (gsHUDElement *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsHUDElement::setMaterialAlpha",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsHUDElement::setMaterialAlpha",1,"gsHUDElement *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsHUDElement::setMaterialAlpha",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsHUDElement,0))){
    SWIG_fail_ptr("HUDElement_setMaterialAlpha",1,SWIGTYPE_p_gsHUDElement);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setMaterialAlpha(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HUDElement_getMaterialAlphaRejectValue(lua_State* L) {
  int SWIG_arg = 0;
  gsHUDElement *arg1 = (gsHUDElement *) 0 ;
  int result;
  
  SWIG_check_num_args("gsHUDElement::getMaterialAlphaRejectValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsHUDElement::getMaterialAlphaRejectValue",1,"gsHUDElement *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsHUDElement,0))){
    SWIG_fail_ptr("HUDElement_getMaterialAlphaRejectValue",1,SWIGTYPE_p_gsHUDElement);
  }
  
  result = (int)(arg1)->getMaterialAlphaRejectValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HUDElement_setMaterialAlphaRejectValue(lua_State* L) {
  int SWIG_arg = 0;
  gsHUDElement *arg1 = (gsHUDElement *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("gsHUDElement::setMaterialAlphaRejectValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsHUDElement::setMaterialAlphaRejectValue",1,"gsHUDElement *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsHUDElement::setMaterialAlphaRejectValue",2,"int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("gsHUDElement::setMaterialAlphaRejectValue",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsHUDElement,0))){
    SWIG_fail_ptr("HUDElement_setMaterialAlphaRejectValue",1,SWIGTYPE_p_gsHUDElement);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->setMaterialAlphaRejectValue(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_HUDElement(void *obj) {
gsHUDElement *arg1 = (gsHUDElement *) obj;
delete arg1;
}
static swig_lua_method swig_gsHUDElement_methods[] = {
    {"show", _wrap_HUDElement_show}, 
    {"getValue", _wrap_HUDElement_getValue}, 
    {"setValue", _wrap_HUDElement_setValue}, 
    {"setUvCoords", _wrap_HUDElement_setUvCoords}, 
    {"getParameter", _wrap_HUDElement_getParameter}, 
    {"setParameter", _wrap_HUDElement_setParameter}, 
    {"getMaterialName", _wrap_HUDElement_getMaterialName}, 
    {"setMaterialName", _wrap_HUDElement_setMaterialName}, 
    {"getMaterialAlpha", _wrap_HUDElement_getMaterialAlpha}, 
    {"setMaterialAlpha", _wrap_HUDElement_setMaterialAlpha}, 
    {"getMaterialAlphaRejectValue", _wrap_HUDElement_getMaterialAlphaRejectValue}, 
    {"setMaterialAlphaRejectValue", _wrap_HUDElement_setMaterialAlphaRejectValue}, 
    {0,0}
};
static swig_lua_attribute swig_gsHUDElement_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsHUDElement_bases[] = {0};
static const char *swig_gsHUDElement_base_names[] = {0};
static swig_lua_class _wrap_class_gsHUDElement = { "HUDElement", &SWIGTYPE_p_gsHUDElement,_wrap_new_HUDElement, swig_delete_HUDElement, swig_gsHUDElement_methods, swig_gsHUDElement_attributes, swig_gsHUDElement_bases, swig_gsHUDElement_base_names };

static int _wrap_getHUD(lua_State* L) {
  int SWIG_arg = 0;
  gkString *arg1 = 0 ;
  gkString temp1 ;
  gkHUD *result = 0 ;
  
  SWIG_check_num_args("getHUD",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("getHUD",1,"gkString const &");
  
  temp1 = gkString((const char*)lua_tostring(L, 1));
  arg1 = &temp1;
  
  result = (gkHUD *)getHUD((gkString const &)*arg1);
  if (result) {
    SWIG_arg += GS_LUA_OBJECT_STORE(result, HUD); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Scene(lua_State* L) {
  int SWIG_arg = 0;
  gsScene *result = 0 ;
  
  SWIG_check_num_args("gsScene::gsScene",0,0)
  result = (gsScene *)new gsScene();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsScene,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_hasObject(lua_State* L) {
  int SWIG_arg = 0;
  gsScene *arg1 = (gsScene *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  bool result;
  
  SWIG_check_num_args("gsScene::hasObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsScene::hasObject",1,"gsScene *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsScene::hasObject",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsScene,0))){
    SWIG_fail_ptr("Scene_hasObject",1,SWIGTYPE_p_gsScene);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (bool)(arg1)->hasObject((gkString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getObject(lua_State* L) {
  int SWIG_arg = 0;
  gsScene *arg1 = (gsScene *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gkGameObject *result = 0 ;
  
  SWIG_check_num_args("gsScene::getObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsScene::getObject",1,"gsScene *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsScene::getObject",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsScene,0))){
    SWIG_fail_ptr("Scene_getObject",1,SWIGTYPE_p_gsScene);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gkGameObject *)(arg1)->getObject((gkString const &)*arg2);
  if (result) {
    SWIG_arg += gsWrapGameObject(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_createEmpty(lua_State* L) {
  int SWIG_arg = 0;
  gsScene *arg1 = (gsScene *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gkGameObject *result = 0 ;
  
  SWIG_check_num_args("gsScene::createEmpty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsScene::createEmpty",1,"gsScene *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsScene::createEmpty",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsScene,0))){
    SWIG_fail_ptr("Scene_createEmpty",1,SWIGTYPE_p_gsScene);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gkGameObject *)(arg1)->createEmpty((gkString const &)*arg2);
  if (result) {
    SWIG_arg += gsWrapGameObject(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_cloneObject(lua_State* L) {
  int SWIG_arg = 0;
  gsScene *arg1 = (gsScene *) 0 ;
  gsGameObject *arg2 = (gsGameObject *) 0 ;
  int arg3 ;
  bool arg4 ;
  gkGameObject *result = 0 ;
  
  SWIG_check_num_args("gsScene::cloneObject",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsScene::cloneObject",1,"gsScene *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gsScene::cloneObject",2,"gsGameObject *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsScene::cloneObject",3,"int");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("gsScene::cloneObject",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsScene,0))){
    SWIG_fail_ptr("Scene_cloneObject",1,SWIGTYPE_p_gsScene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("Scene_cloneObject",2,SWIGTYPE_p_gsGameObject);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (gkGameObject *)(arg1)->cloneObject(arg2,arg3,arg4);
  if (result) {
    SWIG_arg += gsWrapGameObject(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getObjectList(lua_State* L) {
  int SWIG_arg = 0;
  gsScene *arg1 = (gsScene *) 0 ;
  gsArray< gsGameObject,gkGameObject > *result = 0 ;
  
  SWIG_check_num_args("gsScene::getObjectList",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsScene::getObjectList",1,"gsScene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsScene,0))){
    SWIG_fail_ptr("Scene_getObjectList",1,SWIGTYPE_p_gsScene);
  }
  
  result = (gsArray< gsGameObject,gkGameObject > *) &(arg1)->getObjectList();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsArrayT_gsGameObject_gkGameObject_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getDynamicsWorld(lua_State* L) {
  int SWIG_arg = 0;
  gsScene *arg1 = (gsScene *) 0 ;
  gsDynamicsWorld *result = 0 ;
  
  SWIG_check_num_args("gsScene::getDynamicsWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsScene::getDynamicsWorld",1,"gsScene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsScene,0))){
    SWIG_fail_ptr("Scene_getDynamicsWorld",1,SWIGTYPE_p_gsScene);
  }
  
  result = (gsDynamicsWorld *)(arg1)->getDynamicsWorld();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsDynamicsWorld,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Scene(void *obj) {
gsScene *arg1 = (gsScene *) obj;
delete arg1;
}
static swig_lua_method swig_gsScene_methods[] = {
    {"hasObject", _wrap_Scene_hasObject}, 
    {"getObject", _wrap_Scene_getObject}, 
    {"createEmpty", _wrap_Scene_createEmpty}, 
    {"cloneObject", _wrap_Scene_cloneObject}, 
    {"getObjectList", _wrap_Scene_getObjectList}, 
    {"getDynamicsWorld", _wrap_Scene_getDynamicsWorld}, 
    {0,0}
};
static swig_lua_attribute swig_gsScene_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsScene_bases[] = {0,0};
static const char *swig_gsScene_base_names[] = {"gsObject *",0};
static swig_lua_class _wrap_class_gsScene = { "Scene", &SWIGTYPE_p_gsScene,_wrap_new_Scene, swig_delete_Scene, swig_gsScene_methods, swig_gsScene_attributes, swig_gsScene_bases, swig_gsScene_base_names };

static int _wrap_getActiveScene(lua_State* L) {
  int SWIG_arg = 0;
  gkScene *result = 0 ;
  
  SWIG_check_num_args("getActiveScene",0,0)
  result = (gkScene *)getActiveScene();
  if (result) {
    SWIG_arg += GS_LUA_OBJECT_STORE(result, Scene); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GameObject(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *result = 0 ;
  
  SWIG_check_num_args("gsGameObject::gsGameObject",0,0)
  result = (gsGameObject *)new gsGameObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsGameObject,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_getPosition(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsGameObject::getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::getPosition",1,"gsGameObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_getPosition",1,SWIGTYPE_p_gsGameObject);
  }
  
  result = (arg1)->getPosition();
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_getRotation(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsGameObject::getRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::getRotation",1,"gsGameObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_getRotation",1,SWIGTYPE_p_gsGameObject);
  }
  
  result = (arg1)->getRotation();
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_getOrientation(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gsQuaternion result;
  
  SWIG_check_num_args("gsGameObject::getOrientation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::getOrientation",1,"gsGameObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_getOrientation",1,SWIGTYPE_p_gsGameObject);
  }
  
  result = (arg1)->getOrientation();
  {
    gsQuaternion * resultptr = new gsQuaternion((const gsQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_getScale(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsGameObject::getScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::getScale",1,"gsGameObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_getScale",1,SWIGTYPE_p_gsGameObject);
  }
  
  result = (arg1)->getScale();
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_getWorldPosition(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsGameObject::getWorldPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::getWorldPosition",1,"gsGameObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_getWorldPosition",1,SWIGTYPE_p_gsGameObject);
  }
  
  result = (arg1)->getWorldPosition();
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_getWorldRotation(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsGameObject::getWorldRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::getWorldRotation",1,"gsGameObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_getWorldRotation",1,SWIGTYPE_p_gsGameObject);
  }
  
  result = (arg1)->getWorldRotation();
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_getWorldOrientation(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gsQuaternion result;
  
  SWIG_check_num_args("gsGameObject::getWorldOrientation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::getWorldOrientation",1,"gsGameObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_getWorldOrientation",1,SWIGTYPE_p_gsGameObject);
  }
  
  result = (arg1)->getWorldOrientation();
  {
    gsQuaternion * resultptr = new gsQuaternion((const gsQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_getLinearVelocity(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsGameObject::getLinearVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::getLinearVelocity",1,"gsGameObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_getLinearVelocity",1,SWIGTYPE_p_gsGameObject);
  }
  
  result = (arg1)->getLinearVelocity();
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_getAngularVelocity(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsGameObject::getAngularVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::getAngularVelocity",1,"gsGameObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_getAngularVelocity",1,SWIGTYPE_p_gsGameObject);
  }
  
  result = (arg1)->getAngularVelocity();
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_setLinearVelocity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gsVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("gsGameObject::setLinearVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::setLinearVelocity",1,"gsGameObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsGameObject::setLinearVelocity",2,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_setLinearVelocity",1,SWIGTYPE_p_gsGameObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("GameObject_setLinearVelocity",2,SWIGTYPE_p_gsVector3);
  }
  
  (arg1)->setLinearVelocity((gsVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_setLinearVelocity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("gsGameObject::setLinearVelocity",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::setLinearVelocity",1,"gsGameObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsGameObject::setLinearVelocity",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsGameObject::setLinearVelocity",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gsGameObject::setLinearVelocity",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_setLinearVelocity",1,SWIGTYPE_p_gsGameObject);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setLinearVelocity(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_setLinearVelocity(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gsVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_GameObject_setLinearVelocity__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_GameObject_setLinearVelocity__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'GameObject_setLinearVelocity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsGameObject::setLinearVelocity(gsVector3 const &)\n"
    "    gsGameObject::setLinearVelocity(float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_GameObject_setAngularVelocity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gsVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("gsGameObject::setAngularVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::setAngularVelocity",1,"gsGameObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsGameObject::setAngularVelocity",2,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_setAngularVelocity",1,SWIGTYPE_p_gsGameObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("GameObject_setAngularVelocity",2,SWIGTYPE_p_gsVector3);
  }
  
  (arg1)->setAngularVelocity((gsVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_setAngularVelocity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("gsGameObject::setAngularVelocity",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::setAngularVelocity",1,"gsGameObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsGameObject::setAngularVelocity",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsGameObject::setAngularVelocity",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gsGameObject::setAngularVelocity",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_setAngularVelocity",1,SWIGTYPE_p_gsGameObject);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setAngularVelocity(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_setAngularVelocity(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gsVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_GameObject_setAngularVelocity__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_GameObject_setAngularVelocity__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'GameObject_setAngularVelocity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsGameObject::setAngularVelocity(gsVector3 const &)\n"
    "    gsGameObject::setAngularVelocity(float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_GameObject_setPosition__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gsVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("gsGameObject::setPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::setPosition",1,"gsGameObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsGameObject::setPosition",2,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_setPosition",1,SWIGTYPE_p_gsGameObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("GameObject_setPosition",2,SWIGTYPE_p_gsVector3);
  }
  
  (arg1)->setPosition((gsVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_setPosition__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("gsGameObject::setPosition",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::setPosition",1,"gsGameObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsGameObject::setPosition",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsGameObject::setPosition",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gsGameObject::setPosition",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_setPosition",1,SWIGTYPE_p_gsGameObject);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setPosition(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_setPosition(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gsVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_GameObject_setPosition__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_GameObject_setPosition__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'GameObject_setPosition'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsGameObject::setPosition(gsVector3 const &)\n"
    "    gsGameObject::setPosition(float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_GameObject_setRotation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gsVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("gsGameObject::setRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::setRotation",1,"gsGameObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsGameObject::setRotation",2,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_setRotation",1,SWIGTYPE_p_gsGameObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("GameObject_setRotation",2,SWIGTYPE_p_gsVector3);
  }
  
  (arg1)->setRotation((gsVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_setRotation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("gsGameObject::setRotation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::setRotation",1,"gsGameObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsGameObject::setRotation",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsGameObject::setRotation",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gsGameObject::setRotation",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_setRotation",1,SWIGTYPE_p_gsGameObject);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setRotation(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_setRotation(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gsVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_GameObject_setRotation__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_GameObject_setRotation__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'GameObject_setRotation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsGameObject::setRotation(gsVector3 const &)\n"
    "    gsGameObject::setRotation(float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_GameObject_setOrientation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gsQuaternion *arg2 = 0 ;
  
  SWIG_check_num_args("gsGameObject::setOrientation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::setOrientation",1,"gsGameObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsGameObject::setOrientation",2,"gsQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_setOrientation",1,SWIGTYPE_p_gsGameObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("GameObject_setOrientation",2,SWIGTYPE_p_gsQuaternion);
  }
  
  (arg1)->setOrientation((gsQuaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_setOrientation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("gsGameObject::setOrientation",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::setOrientation",1,"gsGameObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsGameObject::setOrientation",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsGameObject::setOrientation",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gsGameObject::setOrientation",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("gsGameObject::setOrientation",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_setOrientation",1,SWIGTYPE_p_gsGameObject);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  (arg1)->setOrientation(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_setOrientation(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gsQuaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_GameObject_setOrientation__SWIG_0(L);
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_GameObject_setOrientation__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'GameObject_setOrientation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsGameObject::setOrientation(gsQuaternion const &)\n"
    "    gsGameObject::setOrientation(float,float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_GameObject_getType(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gsGameObjectTypes result;
  
  SWIG_check_num_args("gsGameObject::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::getType",1,"gsGameObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_getType",1,SWIGTYPE_p_gsGameObject);
  }
  
  result = (gsGameObjectTypes)(arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_rotate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("gsGameObject::rotate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::rotate",1,"gsGameObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsGameObject::rotate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsGameObject::rotate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gsGameObject::rotate",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_rotate",1,SWIGTYPE_p_gsGameObject);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->rotate(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_rotate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gsVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("gsGameObject::rotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::rotate",1,"gsGameObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsGameObject::rotate",2,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_rotate",1,SWIGTYPE_p_gsGameObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("GameObject_rotate",2,SWIGTYPE_p_gsVector3);
  }
  
  (arg1)->rotate((gsVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_rotate__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gsQuaternion *arg2 = 0 ;
  
  SWIG_check_num_args("gsGameObject::rotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::rotate",1,"gsGameObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsGameObject::rotate",2,"gsQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_rotate",1,SWIGTYPE_p_gsGameObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("GameObject_rotate",2,SWIGTYPE_p_gsQuaternion);
  }
  
  (arg1)->rotate((gsQuaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_rotate__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  gsTransformSpace arg5 ;
  
  SWIG_check_num_args("gsGameObject::rotate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::rotate",1,"gsGameObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsGameObject::rotate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsGameObject::rotate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gsGameObject::rotate",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("gsGameObject::rotate",5,"gsTransformSpace");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_rotate",1,SWIGTYPE_p_gsGameObject);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (gsTransformSpace)(int)lua_tonumber(L, 5);
  (arg1)->rotate(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_rotate__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gsVector3 *arg2 = 0 ;
  gsTransformSpace arg3 ;
  
  SWIG_check_num_args("gsGameObject::rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::rotate",1,"gsGameObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsGameObject::rotate",2,"gsVector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsGameObject::rotate",3,"gsTransformSpace");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_rotate",1,SWIGTYPE_p_gsGameObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("GameObject_rotate",2,SWIGTYPE_p_gsVector3);
  }
  
  arg3 = (gsTransformSpace)(int)lua_tonumber(L, 3);
  (arg1)->rotate((gsVector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_rotate__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gsQuaternion *arg2 = 0 ;
  gsTransformSpace arg3 ;
  
  SWIG_check_num_args("gsGameObject::rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::rotate",1,"gsGameObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsGameObject::rotate",2,"gsQuaternion const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsGameObject::rotate",3,"gsTransformSpace");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_rotate",1,SWIGTYPE_p_gsGameObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsQuaternion,0))){
    SWIG_fail_ptr("GameObject_rotate",2,SWIGTYPE_p_gsQuaternion);
  }
  
  arg3 = (gsTransformSpace)(int)lua_tonumber(L, 3);
  (arg1)->rotate((gsQuaternion const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_rotate(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gsVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_GameObject_rotate__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gsQuaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_GameObject_rotate__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gsVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_GameObject_rotate__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gsQuaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_GameObject_rotate__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_GameObject_rotate__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_GameObject_rotate__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'GameObject_rotate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsGameObject::rotate(float,float,float)\n"
    "    gsGameObject::rotate(gsVector3 const &)\n"
    "    gsGameObject::rotate(gsQuaternion const &)\n"
    "    gsGameObject::rotate(float,float,float,gsTransformSpace)\n"
    "    gsGameObject::rotate(gsVector3 const &,gsTransformSpace)\n"
    "    gsGameObject::rotate(gsQuaternion const &,gsTransformSpace)\n");
  lua_error(L);return 0;
}


static int _wrap_GameObject_translate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("gsGameObject::translate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::translate",1,"gsGameObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsGameObject::translate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsGameObject::translate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gsGameObject::translate",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_translate",1,SWIGTYPE_p_gsGameObject);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->translate(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_translate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gsVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("gsGameObject::translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::translate",1,"gsGameObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsGameObject::translate",2,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_translate",1,SWIGTYPE_p_gsGameObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("GameObject_translate",2,SWIGTYPE_p_gsVector3);
  }
  
  (arg1)->translate((gsVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_translate__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  gsTransformSpace arg5 ;
  
  SWIG_check_num_args("gsGameObject::translate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::translate",1,"gsGameObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsGameObject::translate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsGameObject::translate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gsGameObject::translate",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("gsGameObject::translate",5,"gsTransformSpace");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_translate",1,SWIGTYPE_p_gsGameObject);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (gsTransformSpace)(int)lua_tonumber(L, 5);
  (arg1)->translate(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_translate__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gsVector3 *arg2 = 0 ;
  gsTransformSpace arg3 ;
  
  SWIG_check_num_args("gsGameObject::translate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::translate",1,"gsGameObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsGameObject::translate",2,"gsVector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsGameObject::translate",3,"gsTransformSpace");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_translate",1,SWIGTYPE_p_gsGameObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("GameObject_translate",2,SWIGTYPE_p_gsVector3);
  }
  
  arg3 = (gsTransformSpace)(int)lua_tonumber(L, 3);
  (arg1)->translate((gsVector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_translate(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gsVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_GameObject_translate__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gsVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_GameObject_translate__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_GameObject_translate__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_GameObject_translate__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'GameObject_translate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsGameObject::translate(float,float,float)\n"
    "    gsGameObject::translate(gsVector3 const &)\n"
    "    gsGameObject::translate(float,float,float,gsTransformSpace)\n"
    "    gsGameObject::translate(gsVector3 const &,gsTransformSpace)\n");
  lua_error(L);return 0;
}


static int _wrap_GameObject_scale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gsVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("gsGameObject::scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::scale",1,"gsGameObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsGameObject::scale",2,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_scale",1,SWIGTYPE_p_gsGameObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("GameObject_scale",2,SWIGTYPE_p_gsVector3);
  }
  
  (arg1)->scale((gsVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_scale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("gsGameObject::scale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::scale",1,"gsGameObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsGameObject::scale",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsGameObject::scale",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gsGameObject::scale",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_scale",1,SWIGTYPE_p_gsGameObject);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->scale(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_scale(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gsVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_GameObject_scale__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_GameObject_scale__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'GameObject_scale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsGameObject::scale(gsVector3 const &)\n"
    "    gsGameObject::scale(float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_GameObject_yaw__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsGameObject::yaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::yaw",1,"gsGameObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsGameObject::yaw",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_yaw",1,SWIGTYPE_p_gsGameObject);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->yaw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_yaw__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  float arg2 ;
  gsTransformSpace arg3 ;
  
  SWIG_check_num_args("gsGameObject::yaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::yaw",1,"gsGameObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsGameObject::yaw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsGameObject::yaw",3,"gsTransformSpace");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_yaw",1,SWIGTYPE_p_gsGameObject);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (gsTransformSpace)(int)lua_tonumber(L, 3);
  (arg1)->yaw(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_yaw(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_GameObject_yaw__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_GameObject_yaw__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'GameObject_yaw'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsGameObject::yaw(float)\n"
    "    gsGameObject::yaw(float,gsTransformSpace)\n");
  lua_error(L);return 0;
}


static int _wrap_GameObject_pitch__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsGameObject::pitch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::pitch",1,"gsGameObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsGameObject::pitch",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_pitch",1,SWIGTYPE_p_gsGameObject);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->pitch(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_pitch__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  float arg2 ;
  gsTransformSpace arg3 ;
  
  SWIG_check_num_args("gsGameObject::pitch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::pitch",1,"gsGameObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsGameObject::pitch",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsGameObject::pitch",3,"gsTransformSpace");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_pitch",1,SWIGTYPE_p_gsGameObject);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (gsTransformSpace)(int)lua_tonumber(L, 3);
  (arg1)->pitch(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_pitch(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_GameObject_pitch__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_GameObject_pitch__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'GameObject_pitch'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsGameObject::pitch(float)\n"
    "    gsGameObject::pitch(float,gsTransformSpace)\n");
  lua_error(L);return 0;
}


static int _wrap_GameObject_roll__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsGameObject::roll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::roll",1,"gsGameObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsGameObject::roll",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_roll",1,SWIGTYPE_p_gsGameObject);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->roll(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_roll__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  float arg2 ;
  gsTransformSpace arg3 ;
  
  SWIG_check_num_args("gsGameObject::roll",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::roll",1,"gsGameObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsGameObject::roll",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsGameObject::roll",3,"gsTransformSpace");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_roll",1,SWIGTYPE_p_gsGameObject);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (gsTransformSpace)(int)lua_tonumber(L, 3);
  (arg1)->roll(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_roll(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_GameObject_roll__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_GameObject_roll__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'GameObject_roll'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsGameObject::roll(float)\n"
    "    gsGameObject::roll(float,gsTransformSpace)\n");
  lua_error(L);return 0;
}


static int _wrap_GameObject_getState(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  int result;
  
  SWIG_check_num_args("gsGameObject::getState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::getState",1,"gsGameObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_getState",1,SWIGTYPE_p_gsGameObject);
  }
  
  result = (int)(arg1)->getState();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_changeState(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gsGameObject::changeState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::changeState",1,"gsGameObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsGameObject::changeState",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_changeState",1,SWIGTYPE_p_gsGameObject);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->changeState(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_hasParent(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsGameObject::hasParent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::hasParent",1,"gsGameObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_hasParent",1,SWIGTYPE_p_gsGameObject);
  }
  
  result = (bool)(arg1)->hasParent();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_setParent(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gsGameObject *arg2 = (gsGameObject *) 0 ;
  
  SWIG_check_num_args("gsGameObject::setParent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::setParent",1,"gsGameObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gsGameObject::setParent",2,"gsGameObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_setParent",1,SWIGTYPE_p_gsGameObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_setParent",2,SWIGTYPE_p_gsGameObject);
  }
  
  (arg1)->setParent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_setParentInPlace(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gsGameObject *arg2 = (gsGameObject *) 0 ;
  
  SWIG_check_num_args("gsGameObject::setParentInPlace",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::setParentInPlace",1,"gsGameObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gsGameObject::setParentInPlace",2,"gsGameObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_setParentInPlace",1,SWIGTYPE_p_gsGameObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_setParentInPlace",2,SWIGTYPE_p_gsGameObject);
  }
  
  (arg1)->setParentInPlace(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_clearParent(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  
  SWIG_check_num_args("gsGameObject::clearParent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::clearParent",1,"gsGameObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_clearParent",1,SWIGTYPE_p_gsGameObject);
  }
  
  (arg1)->clearParent();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_clearParentInPlace(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  
  SWIG_check_num_args("gsGameObject::clearParentInPlace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::clearParentInPlace",1,"gsGameObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_clearParentInPlace",1,SWIGTYPE_p_gsGameObject);
  }
  
  (arg1)->clearParentInPlace();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_addChild(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gsGameObject *arg2 = (gsGameObject *) 0 ;
  
  SWIG_check_num_args("gsGameObject::addChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::addChild",1,"gsGameObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gsGameObject::addChild",2,"gsGameObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_addChild",1,SWIGTYPE_p_gsGameObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_addChild",2,SWIGTYPE_p_gsGameObject);
  }
  
  (arg1)->addChild(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_removeChild(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gsGameObject *arg2 = (gsGameObject *) 0 ;
  
  SWIG_check_num_args("gsGameObject::removeChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::removeChild",1,"gsGameObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gsGameObject::removeChild",2,"gsGameObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_removeChild",1,SWIGTYPE_p_gsGameObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_removeChild",2,SWIGTYPE_p_gsGameObject);
  }
  
  (arg1)->removeChild(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_getParent(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gkGameObject *result = 0 ;
  
  SWIG_check_num_args("gsGameObject::getParent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::getParent",1,"gsGameObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_getParent",1,SWIGTYPE_p_gsGameObject);
  }
  
  result = (gkGameObject *)(arg1)->getParent();
  if (result) {
    SWIG_arg += gsWrapGameObject(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_enableContacts(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gsGameObject::enableContacts",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::enableContacts",1,"gsGameObject *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gsGameObject::enableContacts",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_enableContacts",1,SWIGTYPE_p_gsGameObject);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->enableContacts(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_hasContacts(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsGameObject::hasContacts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::hasContacts",1,"gsGameObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_hasContacts",1,SWIGTYPE_p_gsGameObject);
  }
  
  result = (bool)(arg1)->hasContacts();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_hasContact(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  bool result;
  
  SWIG_check_num_args("gsGameObject::hasContact",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::hasContact",1,"gsGameObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsGameObject::hasContact",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_hasContact",1,SWIGTYPE_p_gsGameObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (bool)(arg1)->hasContact((gkString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_getScene(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gkScene *result = 0 ;
  
  SWIG_check_num_args("gsGameObject::getScene",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::getScene",1,"gsGameObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_getScene",1,SWIGTYPE_p_gsGameObject);
  }
  
  result = (gkScene *)(arg1)->getScene();
  if (result) {
    SWIG_arg += GS_LUA_OBJECT_STORE(result, Scene); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_playAnimation(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gkString *arg2 = 0 ;
  float arg3 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsGameObject::playAnimation",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::playAnimation",1,"gsGameObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsGameObject::playAnimation",2,"gkString const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsGameObject::playAnimation",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_playAnimation",1,SWIGTYPE_p_gsGameObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->playAnimation((gkString const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_getProperty(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gsProperty result;
  
  SWIG_check_num_args("gsGameObject::getProperty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::getProperty",1,"gsGameObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsGameObject::getProperty",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_getProperty",1,SWIGTYPE_p_gsGameObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (arg1)->getProperty((gkString const &)*arg2);
  SWIG_arg += gsGetProperty(L, result); 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_setProperty__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gkString *arg2 = 0 ;
  bool arg3 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsGameObject::setProperty",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::setProperty",1,"gsGameObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsGameObject::setProperty",2,"gkString const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("gsGameObject::setProperty",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_setProperty",1,SWIGTYPE_p_gsGameObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->setProperty((gkString const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_setProperty__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gkString *arg2 = 0 ;
  float arg3 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsGameObject::setProperty",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::setProperty",1,"gsGameObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsGameObject::setProperty",2,"gkString const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsGameObject::setProperty",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_setProperty",1,SWIGTYPE_p_gsGameObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setProperty((gkString const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_setProperty__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString arg3 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsGameObject::setProperty",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::setProperty",1,"gsGameObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsGameObject::setProperty",2,"gkString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("gsGameObject::setProperty",3,"gkString");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject_setProperty",1,SWIGTYPE_p_gsGameObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  
  arg3 = gkString((const char*)lua_tostring(L, 3));
  
  (arg1)->setProperty((gkString const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject_setProperty(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_GameObject_setProperty__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_GameObject_setProperty__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_GameObject_setProperty__SWIG_2(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'GameObject_setProperty'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsGameObject::setProperty(gkString const &,bool)\n"
    "    gsGameObject::setProperty(gkString const &,float)\n"
    "    gsGameObject::setProperty(gkString const &,gkString)\n");
  lua_error(L);return 0;
}


static int _wrap_GameObject___getitem(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gsProperty result;
  
  SWIG_check_num_args("gsGameObject::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::__getitem__",1,"gsGameObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsGameObject::__getitem__",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject___getitem",1,SWIGTYPE_p_gsGameObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (arg1)->__getitem__((gkString const &)*arg2);
  SWIG_arg += gsGetProperty(L, result); 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject___setitem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gkString *arg2 = 0 ;
  bool arg3 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsGameObject::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::__setitem__",1,"gsGameObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsGameObject::__setitem__",2,"gkString const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("gsGameObject::__setitem__",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject___setitem",1,SWIGTYPE_p_gsGameObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->__setitem__((gkString const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject___setitem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gkString *arg2 = 0 ;
  float arg3 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsGameObject::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::__setitem__",1,"gsGameObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsGameObject::__setitem__",2,"gkString const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsGameObject::__setitem__",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject___setitem",1,SWIGTYPE_p_gsGameObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->__setitem__((gkString const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject___setitem__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsGameObject *arg1 = (gsGameObject *) 0 ;
  gkString *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsGameObject::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameObject::__setitem__",1,"gsGameObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsGameObject::__setitem__",2,"gkString const &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("gsGameObject::__setitem__",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("GameObject___setitem",1,SWIGTYPE_p_gsGameObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->__setitem__((gkString const &)*arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameObject___setitem(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_GameObject___setitem__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_GameObject___setitem__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsGameObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_GameObject___setitem__SWIG_2(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'GameObject___setitem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsGameObject::__setitem__(gkString const &,bool)\n"
    "    gsGameObject::__setitem__(gkString const &,float)\n"
    "    gsGameObject::__setitem__(gkString const &,char const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_GameObject(void *obj) {
gsGameObject *arg1 = (gsGameObject *) obj;
delete arg1;
}
static swig_lua_method swig_gsGameObject_methods[] = {
    {"getPosition", _wrap_GameObject_getPosition}, 
    {"getRotation", _wrap_GameObject_getRotation}, 
    {"getOrientation", _wrap_GameObject_getOrientation}, 
    {"getScale", _wrap_GameObject_getScale}, 
    {"getWorldPosition", _wrap_GameObject_getWorldPosition}, 
    {"getWorldRotation", _wrap_GameObject_getWorldRotation}, 
    {"getWorldOrientation", _wrap_GameObject_getWorldOrientation}, 
    {"getLinearVelocity", _wrap_GameObject_getLinearVelocity}, 
    {"getAngularVelocity", _wrap_GameObject_getAngularVelocity}, 
    {"setLinearVelocity", _wrap_GameObject_setLinearVelocity}, 
    {"setAngularVelocity", _wrap_GameObject_setAngularVelocity}, 
    {"setPosition", _wrap_GameObject_setPosition}, 
    {"setRotation", _wrap_GameObject_setRotation}, 
    {"setOrientation", _wrap_GameObject_setOrientation}, 
    {"getType", _wrap_GameObject_getType}, 
    {"rotate", _wrap_GameObject_rotate}, 
    {"translate", _wrap_GameObject_translate}, 
    {"scale", _wrap_GameObject_scale}, 
    {"yaw", _wrap_GameObject_yaw}, 
    {"pitch", _wrap_GameObject_pitch}, 
    {"roll", _wrap_GameObject_roll}, 
    {"getState", _wrap_GameObject_getState}, 
    {"changeState", _wrap_GameObject_changeState}, 
    {"hasParent", _wrap_GameObject_hasParent}, 
    {"setParent", _wrap_GameObject_setParent}, 
    {"setParentInPlace", _wrap_GameObject_setParentInPlace}, 
    {"clearParent", _wrap_GameObject_clearParent}, 
    {"clearParentInPlace", _wrap_GameObject_clearParentInPlace}, 
    {"addChild", _wrap_GameObject_addChild}, 
    {"removeChild", _wrap_GameObject_removeChild}, 
    {"getParent", _wrap_GameObject_getParent}, 
    {"enableContacts", _wrap_GameObject_enableContacts}, 
    {"hasContacts", _wrap_GameObject_hasContacts}, 
    {"hasContact", _wrap_GameObject_hasContact}, 
    {"getScene", _wrap_GameObject_getScene}, 
    {"playAnimation", _wrap_GameObject_playAnimation}, 
    {"getProperty", _wrap_GameObject_getProperty}, 
    {"setProperty", _wrap_GameObject_setProperty}, 
    {"__getitem", _wrap_GameObject___getitem}, 
    {"__setitem", _wrap_GameObject___setitem}, 
    {0,0}
};
static swig_lua_attribute swig_gsGameObject_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsGameObject_bases[] = {0,0};
static const char *swig_gsGameObject_base_names[] = {"gsObject *",0};
static swig_lua_class _wrap_class_gsGameObject = { "GameObject", &SWIGTYPE_p_gsGameObject,_wrap_new_GameObject, swig_delete_GameObject, swig_gsGameObject_methods, swig_gsGameObject_attributes, swig_gsGameObject_bases, swig_gsGameObject_base_names };

static int _wrap_new_Light(lua_State* L) {
  int SWIG_arg = 0;
  gsLight *result = 0 ;
  
  SWIG_check_num_args("gsLight::gsLight",0,0)
  result = (gsLight *)new gsLight();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsLight,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Light(void *obj) {
gsLight *arg1 = (gsLight *) obj;
delete arg1;
}
static swig_lua_method swig_gsLight_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_gsLight_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsLight_bases[] = {0,0};
static const char *swig_gsLight_base_names[] = {"gsGameObject *",0};
static swig_lua_class _wrap_class_gsLight = { "Light", &SWIGTYPE_p_gsLight,_wrap_new_Light, swig_delete_Light, swig_gsLight_methods, swig_gsLight_attributes, swig_gsLight_bases, swig_gsLight_base_names };

static int _wrap_new_Camera(lua_State* L) {
  int SWIG_arg = 0;
  gsCamera *result = 0 ;
  
  SWIG_check_num_args("gsCamera::gsCamera",0,0)
  result = (gsCamera *)new gsCamera();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsCamera,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_setClipping(lua_State* L) {
  int SWIG_arg = 0;
  gsCamera *arg1 = (gsCamera *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("gsCamera::setClipping",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsCamera::setClipping",1,"gsCamera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsCamera::setClipping",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsCamera::setClipping",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsCamera,0))){
    SWIG_fail_ptr("Camera_setClipping",1,SWIGTYPE_p_gsCamera);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setClipping(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getClipStart(lua_State* L) {
  int SWIG_arg = 0;
  gsCamera *arg1 = (gsCamera *) 0 ;
  float result;
  
  SWIG_check_num_args("gsCamera::getClipStart",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsCamera::getClipStart",1,"gsCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsCamera,0))){
    SWIG_fail_ptr("Camera_getClipStart",1,SWIGTYPE_p_gsCamera);
  }
  
  result = (float)(arg1)->getClipStart();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getClipEnd(lua_State* L) {
  int SWIG_arg = 0;
  gsCamera *arg1 = (gsCamera *) 0 ;
  float result;
  
  SWIG_check_num_args("gsCamera::getClipEnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsCamera::getClipEnd",1,"gsCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsCamera,0))){
    SWIG_fail_ptr("Camera_getClipEnd",1,SWIGTYPE_p_gsCamera);
  }
  
  result = (float)(arg1)->getClipEnd();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_setFov(lua_State* L) {
  int SWIG_arg = 0;
  gsCamera *arg1 = (gsCamera *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsCamera::setFov",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsCamera::setFov",1,"gsCamera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsCamera::setFov",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsCamera,0))){
    SWIG_fail_ptr("Camera_setFov",1,SWIGTYPE_p_gsCamera);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setFov(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getFov(lua_State* L) {
  int SWIG_arg = 0;
  gsCamera *arg1 = (gsCamera *) 0 ;
  float result;
  
  SWIG_check_num_args("gsCamera::getFov",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsCamera::getFov",1,"gsCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsCamera,0))){
    SWIG_fail_ptr("Camera_getFov",1,SWIGTYPE_p_gsCamera);
  }
  
  result = (float)(arg1)->getFov();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_makeCurrent(lua_State* L) {
  int SWIG_arg = 0;
  gsCamera *arg1 = (gsCamera *) 0 ;
  
  SWIG_check_num_args("gsCamera::makeCurrent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsCamera::makeCurrent",1,"gsCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsCamera,0))){
    SWIG_fail_ptr("Camera_makeCurrent",1,SWIGTYPE_p_gsCamera);
  }
  
  (arg1)->makeCurrent();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Camera(void *obj) {
gsCamera *arg1 = (gsCamera *) obj;
delete arg1;
}
static swig_lua_method swig_gsCamera_methods[] = {
    {"setClipping", _wrap_Camera_setClipping}, 
    {"getClipStart", _wrap_Camera_getClipStart}, 
    {"getClipEnd", _wrap_Camera_getClipEnd}, 
    {"setFov", _wrap_Camera_setFov}, 
    {"getFov", _wrap_Camera_getFov}, 
    {"makeCurrent", _wrap_Camera_makeCurrent}, 
    {0,0}
};
static swig_lua_attribute swig_gsCamera_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsCamera_bases[] = {0,0};
static const char *swig_gsCamera_base_names[] = {"gsGameObject *",0};
static swig_lua_class _wrap_class_gsCamera = { "Camera", &SWIGTYPE_p_gsCamera,_wrap_new_Camera, swig_delete_Camera, swig_gsCamera_methods, swig_gsCamera_attributes, swig_gsCamera_bases, swig_gsCamera_base_names };

static int _wrap_new_Entity(lua_State* L) {
  int SWIG_arg = 0;
  gsEntity *result = 0 ;
  
  SWIG_check_num_args("gsEntity::gsEntity",0,0)
  result = (gsEntity *)new gsEntity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsEntity,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_hasCharacter(lua_State* L) {
  int SWIG_arg = 0;
  gsEntity *arg1 = (gsEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsEntity::hasCharacter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsEntity::hasCharacter",1,"gsEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsEntity,0))){
    SWIG_fail_ptr("Entity_hasCharacter",1,SWIGTYPE_p_gsEntity);
  }
  
  result = (bool)(arg1)->hasCharacter();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_getCharacter(lua_State* L) {
  int SWIG_arg = 0;
  gsEntity *arg1 = (gsEntity *) 0 ;
  gkCharacter *result = 0 ;
  
  SWIG_check_num_args("gsEntity::getCharacter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsEntity::getCharacter",1,"gsEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsEntity,0))){
    SWIG_fail_ptr("Entity_getCharacter",1,SWIGTYPE_p_gsEntity);
  }
  
  result = (gkCharacter *)(arg1)->getCharacter();
  if (result) {
    SWIG_arg += GS_LUA_OBJECT_STORE(result, Character); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Entity(void *obj) {
gsEntity *arg1 = (gsEntity *) obj;
delete arg1;
}
static swig_lua_method swig_gsEntity_methods[] = {
    {"hasCharacter", _wrap_Entity_hasCharacter}, 
    {"getCharacter", _wrap_Entity_getCharacter}, 
    {0,0}
};
static swig_lua_attribute swig_gsEntity_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsEntity_bases[] = {0,0};
static const char *swig_gsEntity_base_names[] = {"gsGameObject *",0};
static swig_lua_class _wrap_class_gsEntity = { "Entity", &SWIGTYPE_p_gsEntity,_wrap_new_Entity, swig_delete_Entity, swig_gsEntity_methods, swig_gsEntity_attributes, swig_gsEntity_bases, swig_gsEntity_base_names };

static int _wrap_new_Skeleton(lua_State* L) {
  int SWIG_arg = 0;
  gsSkeleton *result = 0 ;
  
  SWIG_check_num_args("gsSkeleton::gsSkeleton",0,0)
  result = (gsSkeleton *)new gsSkeleton();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsSkeleton,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Skeleton(void *obj) {
gsSkeleton *arg1 = (gsSkeleton *) obj;
delete arg1;
}
static swig_lua_method swig_gsSkeleton_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_gsSkeleton_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsSkeleton_bases[] = {0,0};
static const char *swig_gsSkeleton_base_names[] = {"gsGameObject *",0};
static swig_lua_class _wrap_class_gsSkeleton = { "Skeleton", &SWIGTYPE_p_gsSkeleton,_wrap_new_Skeleton, swig_delete_Skeleton, swig_gsSkeleton_methods, swig_gsSkeleton_attributes, swig_gsSkeleton_bases, swig_gsSkeleton_base_names };

static int _wrap_new_Particles(lua_State* L) {
  int SWIG_arg = 0;
  gsParticles *result = 0 ;
  
  SWIG_check_num_args("gsParticles::gsParticles",0,0)
  result = (gsParticles *)new gsParticles();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsParticles,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Particles(void *obj) {
gsParticles *arg1 = (gsParticles *) obj;
delete arg1;
}
static swig_lua_method swig_gsParticles_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_gsParticles_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsParticles_bases[] = {0,0};
static const char *swig_gsParticles_base_names[] = {"gsGameObject *",0};
static swig_lua_class _wrap_class_gsParticles = { "Particles", &SWIGTYPE_p_gsParticles,_wrap_new_Particles, swig_delete_Particles, swig_gsParticles_methods, swig_gsParticles_attributes, swig_gsParticles_bases, swig_gsParticles_base_names };

static int _wrap_new_Debugger(lua_State* L) {
  int SWIG_arg = 0;
  gsScene *arg1 = (gsScene *) 0 ;
  gsDebugger *result = 0 ;
  
  SWIG_check_num_args("gsDebugger::gsDebugger",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsDebugger::gsDebugger",1,"gsScene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsScene,0))){
    SWIG_fail_ptr("new_Debugger",1,SWIGTYPE_p_gsScene);
  }
  
  result = (gsDebugger *)new gsDebugger(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsDebugger,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Debugger_drawLine(lua_State* L) {
  int SWIG_arg = 0;
  gsDebugger *arg1 = (gsDebugger *) 0 ;
  gsVector3 *arg2 = 0 ;
  gsVector3 *arg3 = 0 ;
  gsVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("gsDebugger::drawLine",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsDebugger::drawLine",1,"gsDebugger *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsDebugger::drawLine",2,"gsVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("gsDebugger::drawLine",3,"gsVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("gsDebugger::drawLine",4,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsDebugger,0))){
    SWIG_fail_ptr("Debugger_drawLine",1,SWIGTYPE_p_gsDebugger);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Debugger_drawLine",2,SWIGTYPE_p_gsVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Debugger_drawLine",3,SWIGTYPE_p_gsVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Debugger_drawLine",4,SWIGTYPE_p_gsVector3);
  }
  
  (arg1)->drawLine((gsVector3 const &)*arg2,(gsVector3 const &)*arg3,(gsVector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Debugger_drawObjectAxis(lua_State* L) {
  int SWIG_arg = 0;
  gsDebugger *arg1 = (gsDebugger *) 0 ;
  gsGameObject *arg2 = (gsGameObject *) 0 ;
  float arg3 ;
  
  SWIG_check_num_args("gsDebugger::drawObjectAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsDebugger::drawObjectAxis",1,"gsDebugger *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gsDebugger::drawObjectAxis",2,"gsGameObject *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsDebugger::drawObjectAxis",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsDebugger,0))){
    SWIG_fail_ptr("Debugger_drawObjectAxis",1,SWIGTYPE_p_gsDebugger);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("Debugger_drawObjectAxis",2,SWIGTYPE_p_gsGameObject);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->drawObjectAxis(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Debugger_clear(lua_State* L) {
  int SWIG_arg = 0;
  gsDebugger *arg1 = (gsDebugger *) 0 ;
  
  SWIG_check_num_args("gsDebugger::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsDebugger::clear",1,"gsDebugger *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsDebugger,0))){
    SWIG_fail_ptr("Debugger_clear",1,SWIGTYPE_p_gsDebugger);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Debugger(void *obj) {
gsDebugger *arg1 = (gsDebugger *) obj;
delete arg1;
}
static swig_lua_method swig_gsDebugger_methods[] = {
    {"drawLine", _wrap_Debugger_drawLine}, 
    {"drawObjectAxis", _wrap_Debugger_drawObjectAxis}, 
    {"clear", _wrap_Debugger_clear}, 
    {0,0}
};
static swig_lua_attribute swig_gsDebugger_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsDebugger_bases[] = {0};
static const char *swig_gsDebugger_base_names[] = {0};
static swig_lua_class _wrap_class_gsDebugger = { "Debugger", &SWIGTYPE_p_gsDebugger,_wrap_new_Debugger, swig_delete_Debugger, swig_gsDebugger_methods, swig_gsDebugger_attributes, swig_gsDebugger_bases, swig_gsDebugger_base_names };

static int _wrap_sendMessage(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  SWIG_check_num_args("sendMessage",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("sendMessage",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("sendMessage",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("sendMessage",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("sendMessage",4,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  sendMessage((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebugPrint(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("gsDebugPrint",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("gsDebugPrint",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  gsDebugPrint((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SetCompositorChain(lua_State* L) {
  int SWIG_arg = 0;
  gsCompositorOp arg1 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  bool result;
  
  SWIG_check_num_args("gsSetCompositorChain",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gsSetCompositorChain",1,"gsCompositorOp");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsSetCompositorChain",2,"gkString const &");
  arg1 = (gsCompositorOp)(int)lua_tonumber(L, 1);
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (bool)gsSetCompositorChain(arg1,(gkString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WhenEvent_when(lua_State* L) {
  int SWIG_arg = 0;
  gsWhenEvent *arg1 = (gsWhenEvent *) 0 ;
  gsSelf arg2 ;
  gsFunction arg3 ;
  
  SWIG_check_num_args("gsWhenEvent::when",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsWhenEvent::when",1,"gsWhenEvent *");
  if(!lua_istable(L,2)) SWIG_fail_arg("gsWhenEvent::when",2,"gsSelf");
  if(!lua_isfunction(L,3)) SWIG_fail_arg("gsWhenEvent::when",3,"gsFunction");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsWhenEvent,0))){
    SWIG_fail_ptr("WhenEvent_when",1,SWIGTYPE_p_gsWhenEvent);
  }
  
  (&arg2)->m_id = 2; (&arg2)->L = L; 
  (&arg3)->m_id = 3; (&arg3)->L = L; 
  (arg1)->when(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WhenEvent(void *obj) {
gsWhenEvent *arg1 = (gsWhenEvent *) obj;
delete arg1;
}
static swig_lua_method swig_gsWhenEvent_methods[] = {
    {"when", _wrap_WhenEvent_when}, 
    {0,0}
};
static swig_lua_attribute swig_gsWhenEvent_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsWhenEvent_bases[] = {0};
static const char *swig_gsWhenEvent_base_names[] = {0};
static swig_lua_class _wrap_class_gsWhenEvent = { "WhenEvent", &SWIGTYPE_p_gsWhenEvent,0, swig_delete_WhenEvent, swig_gsWhenEvent_methods, swig_gsWhenEvent_attributes, swig_gsWhenEvent_bases, swig_gsWhenEvent_base_names };

static int _wrap_new_FSM(lua_State* L) {
  int SWIG_arg = 0;
  gsFSM *result = 0 ;
  
  SWIG_check_num_args("gsFSM::gsFSM",0,0)
  result = (gsFSM *)new gsFSM();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsFSM,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FSM_update(lua_State* L) {
  int SWIG_arg = 0;
  gsFSM *arg1 = (gsFSM *) 0 ;
  
  SWIG_check_num_args("gsFSM::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsFSM::update",1,"gsFSM *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsFSM,0))){
    SWIG_fail_ptr("FSM_update",1,SWIGTYPE_p_gsFSM);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FSM_setState(lua_State* L) {
  int SWIG_arg = 0;
  gsFSM *arg1 = (gsFSM *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gsFSM::setState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsFSM::setState",1,"gsFSM *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsFSM::setState",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsFSM,0))){
    SWIG_fail_ptr("FSM_setState",1,SWIGTYPE_p_gsFSM);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setState(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FSM_getState(lua_State* L) {
  int SWIG_arg = 0;
  gsFSM *arg1 = (gsFSM *) 0 ;
  int result;
  
  SWIG_check_num_args("gsFSM::getState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsFSM::getState",1,"gsFSM *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsFSM,0))){
    SWIG_fail_ptr("FSM_getState",1,SWIGTYPE_p_gsFSM);
  }
  
  result = (int)(arg1)->getState();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FSM_addStartTrigger(lua_State* L) {
  int SWIG_arg = 0;
  gsFSM *arg1 = (gsFSM *) 0 ;
  int arg2 ;
  gsSelf arg3 ;
  gsFunction arg4 ;
  
  SWIG_check_num_args("gsFSM::addStartTrigger",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsFSM::addStartTrigger",1,"gsFSM *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsFSM::addStartTrigger",2,"int");
  if(!lua_istable(L,3)) SWIG_fail_arg("gsFSM::addStartTrigger",3,"gsSelf");
  if(!lua_isfunction(L,4)) SWIG_fail_arg("gsFSM::addStartTrigger",4,"gsFunction");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsFSM,0))){
    SWIG_fail_ptr("FSM_addStartTrigger",1,SWIGTYPE_p_gsFSM);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (&arg3)->m_id = 3; (&arg3)->L = L; 
  (&arg4)->m_id = 4; (&arg4)->L = L; 
  (arg1)->addStartTrigger(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FSM_addEndTrigger(lua_State* L) {
  int SWIG_arg = 0;
  gsFSM *arg1 = (gsFSM *) 0 ;
  int arg2 ;
  gsSelf arg3 ;
  gsFunction arg4 ;
  
  SWIG_check_num_args("gsFSM::addEndTrigger",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsFSM::addEndTrigger",1,"gsFSM *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsFSM::addEndTrigger",2,"int");
  if(!lua_istable(L,3)) SWIG_fail_arg("gsFSM::addEndTrigger",3,"gsSelf");
  if(!lua_isfunction(L,4)) SWIG_fail_arg("gsFSM::addEndTrigger",4,"gsFunction");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsFSM,0))){
    SWIG_fail_ptr("FSM_addEndTrigger",1,SWIGTYPE_p_gsFSM);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (&arg3)->m_id = 3; (&arg3)->L = L; 
  (&arg4)->m_id = 4; (&arg4)->L = L; 
  (arg1)->addEndTrigger(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FSM_addEvent(lua_State* L) {
  int SWIG_arg = 0;
  gsFSM *arg1 = (gsFSM *) 0 ;
  int arg2 ;
  gsSelf arg3 ;
  gsFunction arg4 ;
  
  SWIG_check_num_args("gsFSM::addEvent",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsFSM::addEvent",1,"gsFSM *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsFSM::addEvent",2,"int");
  if(!lua_istable(L,3)) SWIG_fail_arg("gsFSM::addEvent",3,"gsSelf");
  if(!lua_isfunction(L,4)) SWIG_fail_arg("gsFSM::addEvent",4,"gsFunction");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsFSM,0))){
    SWIG_fail_ptr("FSM_addEvent",1,SWIGTYPE_p_gsFSM);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (&arg3)->m_id = 3; (&arg3)->L = L; 
  (&arg4)->m_id = 4; (&arg4)->L = L; 
  (arg1)->addEvent(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FSM_addTransition__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsFSM *arg1 = (gsFSM *) 0 ;
  int arg2 ;
  int arg3 ;
  gsWhenEvent *result = 0 ;
  
  SWIG_check_num_args("gsFSM::addTransition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsFSM::addTransition",1,"gsFSM *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsFSM::addTransition",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsFSM::addTransition",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsFSM,0))){
    SWIG_fail_ptr("FSM_addTransition",1,SWIGTYPE_p_gsFSM);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (gsWhenEvent *)(arg1)->addTransition(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsWhenEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FSM_addTransition__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsFSM *arg1 = (gsFSM *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned long arg4 ;
  gsWhenEvent *result = 0 ;
  
  SWIG_check_num_args("gsFSM::addTransition",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsFSM::addTransition",1,"gsFSM *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsFSM::addTransition",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsFSM::addTransition",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gsFSM::addTransition",4,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsFSM,0))){
    SWIG_fail_ptr("FSM_addTransition",1,SWIGTYPE_p_gsFSM);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned long)lua_tonumber(L, 4);
  result = (gsWhenEvent *)(arg1)->addTransition(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsWhenEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FSM_addTransition__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsFSM *arg1 = (gsFSM *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned long arg4 ;
  gsSelf arg5 ;
  gsFunction arg6 ;
  gsWhenEvent *result = 0 ;
  
  SWIG_check_num_args("gsFSM::addTransition",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsFSM::addTransition",1,"gsFSM *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsFSM::addTransition",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsFSM::addTransition",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gsFSM::addTransition",4,"unsigned long");
  if(!lua_istable(L,5)) SWIG_fail_arg("gsFSM::addTransition",5,"gsSelf");
  if(!lua_isfunction(L,6)) SWIG_fail_arg("gsFSM::addTransition",6,"gsFunction");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsFSM,0))){
    SWIG_fail_ptr("FSM_addTransition",1,SWIGTYPE_p_gsFSM);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned long)lua_tonumber(L, 4);
  (&arg5)->m_id = 5; (&arg5)->L = L; 
  (&arg6)->m_id = 6; (&arg6)->L = L; 
  result = (gsWhenEvent *)(arg1)->addTransition(arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsWhenEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FSM_addTransition(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsFSM, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FSM_addTransition__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsFSM, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FSM_addTransition__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsFSM, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            _v = lua_istable(L, argv[4]); 
            if (_v) {
              _v = lua_isfunction(L, argv[5]); 
              if (_v) {
                return _wrap_FSM_addTransition__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'FSM_addTransition'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsFSM::addTransition(int,int)\n"
    "    gsFSM::addTransition(int,int,unsigned long)\n"
    "    gsFSM::addTransition(int,int,unsigned long,gsSelf,gsFunction)\n");
  lua_error(L);return 0;
}


static void swig_delete_FSM(void *obj) {
gsFSM *arg1 = (gsFSM *) obj;
delete arg1;
}
static swig_lua_method swig_gsFSM_methods[] = {
    {"update", _wrap_FSM_update}, 
    {"setState", _wrap_FSM_setState}, 
    {"getState", _wrap_FSM_getState}, 
    {"addStartTrigger", _wrap_FSM_addStartTrigger}, 
    {"addEndTrigger", _wrap_FSM_addEndTrigger}, 
    {"addEvent", _wrap_FSM_addEvent}, 
    {"addTransition", _wrap_FSM_addTransition}, 
    {0,0}
};
static swig_lua_attribute swig_gsFSM_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsFSM_bases[] = {0};
static const char *swig_gsFSM_base_names[] = {0};
static swig_lua_class _wrap_class_gsFSM = { "FSM", &SWIGTYPE_p_gsFSM,_wrap_new_FSM, swig_delete_FSM, swig_gsFSM_methods, swig_gsFSM_attributes, swig_gsFSM_bases, swig_gsFSM_base_names };

static int _wrap_new_LogicList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsLogicObject,gkLogicLink > *result = 0 ;
  
  SWIG_check_num_args("gsArray< gsLogicObject,gkLogicLink >::gsArray",0,0)
  result = (gsArray< gsLogicObject,gkLogicLink > *)new gsArray< gsLogicObject,gkLogicLink >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsArrayT_gsLogicObject_gkLogicLink_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LogicList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsLogicObject,gkLogicLink >::Array *arg1 = 0 ;
  gsArray< gsLogicObject,gkLogicLink > *result = 0 ;
  
  SWIG_check_num_args("gsArray< gsLogicObject,gkLogicLink >::gsArray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gsArray< gsLogicObject,gkLogicLink >::gsArray",1,"gsArray< gsLogicObject,gkLogicLink >::Array const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_utArrayT_gkLogicLink_p_t,0))){
    SWIG_fail_ptr("new_LogicList",1,SWIGTYPE_p_utArrayT_gkLogicLink_p_t);
  }
  
  result = (gsArray< gsLogicObject,gkLogicLink > *)new gsArray< gsLogicObject,gkLogicLink >((gsArray< gsLogicObject,gkLogicLink >::Array const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsArrayT_gsLogicObject_gkLogicLink_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LogicList(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_LogicList__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_utArrayT_gkLogicLink_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_LogicList__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_LogicList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsArray< gsLogicObject,gkLogicLink >::gsArray()\n"
    "    gsArray< gsLogicObject,gkLogicLink >::gsArray(gsArray< gsLogicObject,gkLogicLink >::Array const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LogicList_clear(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsLogicObject,gkLogicLink > *arg1 = (gsArray< gsLogicObject,gkLogicLink > *) 0 ;
  
  SWIG_check_num_args("gsArray< gsLogicObject,gkLogicLink >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsLogicObject,gkLogicLink >::clear",1,"gsArray< gsLogicObject,gkLogicLink > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsLogicObject_gkLogicLink_t,0))){
    SWIG_fail_ptr("LogicList_clear",1,SWIGTYPE_p_gsArrayT_gsLogicObject_gkLogicLink_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogicList_size(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsLogicObject,gkLogicLink > *arg1 = (gsArray< gsLogicObject,gkLogicLink > *) 0 ;
  int result;
  
  SWIG_check_num_args("gsArray< gsLogicObject,gkLogicLink >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsLogicObject,gkLogicLink >::size",1,"gsArray< gsLogicObject,gkLogicLink > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsLogicObject_gkLogicLink_t,0))){
    SWIG_fail_ptr("LogicList_size",1,SWIGTYPE_p_gsArrayT_gsLogicObject_gkLogicLink_t);
  }
  
  result = (int)((gsArray< gsLogicObject,gkLogicLink > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogicList_empty(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsLogicObject,gkLogicLink > *arg1 = (gsArray< gsLogicObject,gkLogicLink > *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsArray< gsLogicObject,gkLogicLink >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsLogicObject,gkLogicLink >::empty",1,"gsArray< gsLogicObject,gkLogicLink > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsLogicObject_gkLogicLink_t,0))){
    SWIG_fail_ptr("LogicList_empty",1,SWIGTYPE_p_gsArrayT_gsLogicObject_gkLogicLink_t);
  }
  
  result = (bool)((gsArray< gsLogicObject,gkLogicLink > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogicList___getitem(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsLogicObject,gkLogicLink > *arg1 = (gsArray< gsLogicObject,gkLogicLink > *) 0 ;
  int arg2 ;
  gkLogicLink *result = 0 ;
  
  SWIG_check_num_args("gsArray< gsLogicObject,gkLogicLink >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsLogicObject,gkLogicLink >::__getitem__",1,"gsArray< gsLogicObject,gkLogicLink > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsArray< gsLogicObject,gkLogicLink >::__getitem__",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsLogicObject_gkLogicLink_t,0))){
    SWIG_fail_ptr("LogicList___getitem",1,SWIGTYPE_p_gsArrayT_gsLogicObject_gkLogicLink_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (gkLogicLink *)(arg1)->__getitem__(arg2);
  if (result) {
    SWIG_arg += GS_LUA_OBJECT_WRAP_STORE(result, LogicLink, LogicObject); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogicList_at(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsLogicObject,gkLogicLink > *arg1 = (gsArray< gsLogicObject,gkLogicLink > *) 0 ;
  int arg2 ;
  gkLogicLink *result = 0 ;
  
  SWIG_check_num_args("gsArray< gsLogicObject,gkLogicLink >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsLogicObject,gkLogicLink >::at",1,"gsArray< gsLogicObject,gkLogicLink > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsArray< gsLogicObject,gkLogicLink >::at",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsLogicObject_gkLogicLink_t,0))){
    SWIG_fail_ptr("LogicList_at",1,SWIGTYPE_p_gsArrayT_gsLogicObject_gkLogicLink_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (gkLogicLink *)(arg1)->at(arg2);
  if (result) {
    SWIG_arg += GS_LUA_OBJECT_WRAP_STORE(result, LogicLink, LogicObject); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogicList_push(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsLogicObject,gkLogicLink > *arg1 = (gsArray< gsLogicObject,gkLogicLink > *) 0 ;
  gsLogicObject *arg2 = (gsLogicObject *) 0 ;
  
  SWIG_check_num_args("gsArray< gsLogicObject,gkLogicLink >::push",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsLogicObject,gkLogicLink >::push",1,"gsArray< gsLogicObject,gkLogicLink > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gsArray< gsLogicObject,gkLogicLink >::push",2,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsLogicObject_gkLogicLink_t,0))){
    SWIG_fail_ptr("LogicList_push",1,SWIGTYPE_p_gsArrayT_gsLogicObject_gkLogicLink_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("LogicList_push",2,SWIGTYPE_p_gsLogicObject);
  }
  
  (arg1)->push(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogicList_erase(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsLogicObject,gkLogicLink > *arg1 = (gsArray< gsLogicObject,gkLogicLink > *) 0 ;
  gsLogicObject *arg2 = (gsLogicObject *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsArray< gsLogicObject,gkLogicLink >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsLogicObject,gkLogicLink >::erase",1,"gsArray< gsLogicObject,gkLogicLink > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gsArray< gsLogicObject,gkLogicLink >::erase",2,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsLogicObject_gkLogicLink_t,0))){
    SWIG_fail_ptr("LogicList_erase",1,SWIGTYPE_p_gsArrayT_gsLogicObject_gkLogicLink_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("LogicList_erase",2,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (bool)(arg1)->erase(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogicList_iterator(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsLogicObject,gkLogicLink > *arg1 = (gsArray< gsLogicObject,gkLogicLink > *) 0 ;
  gsArrayIterator< gkLogicLink > result;
  
  SWIG_check_num_args("gsArray< gsLogicObject,gkLogicLink >::iterator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsLogicObject,gkLogicLink >::iterator",1,"gsArray< gsLogicObject,gkLogicLink > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsLogicObject_gkLogicLink_t,0))){
    SWIG_fail_ptr("LogicList_iterator",1,SWIGTYPE_p_gsArrayT_gsLogicObject_gkLogicLink_t);
  }
  
  result = (arg1)->iterator();
  {
    gsArrayIterator< gkLogicLink > * resultptr = new gsArrayIterator< gkLogicLink >((const gsArrayIterator< gkLogicLink > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsArrayIteratorT_gkLogicLink_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LogicList(void *obj) {
gsArray< gsLogicObject,gkLogicLink > *arg1 = (gsArray< gsLogicObject,gkLogicLink > *) obj;
delete arg1;
}
static swig_lua_method swig_gsArray_Sl_gsLogicObject_Sc_gkLogicLink_Sg__methods[] = {
    {"clear", _wrap_LogicList_clear}, 
    {"size", _wrap_LogicList_size}, 
    {"empty", _wrap_LogicList_empty}, 
    {"__getitem", _wrap_LogicList___getitem}, 
    {"at", _wrap_LogicList_at}, 
    {"push", _wrap_LogicList_push}, 
    {"erase", _wrap_LogicList_erase}, 
    {"iterator", _wrap_LogicList_iterator}, 
    {0,0}
};
static swig_lua_attribute swig_gsArray_Sl_gsLogicObject_Sc_gkLogicLink_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsArray_Sl_gsLogicObject_Sc_gkLogicLink_Sg__bases[] = {0};
static const char *swig_gsArray_Sl_gsLogicObject_Sc_gkLogicLink_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_gsArray_Sl_gsLogicObject_Sc_gkLogicLink_Sg_ = { "LogicList", &SWIGTYPE_p_gsArrayT_gsLogicObject_gkLogicLink_t,_wrap_new_LogicList, swig_delete_LogicList, swig_gsArray_Sl_gsLogicObject_Sc_gkLogicLink_Sg__methods, swig_gsArray_Sl_gsLogicObject_Sc_gkLogicLink_Sg__attributes, swig_gsArray_Sl_gsLogicObject_Sc_gkLogicLink_Sg__bases, swig_gsArray_Sl_gsLogicObject_Sc_gkLogicLink_Sg__base_names };

static int _wrap_new_LogicIterator(lua_State* L) {
  int SWIG_arg = 0;
  gsArrayIterator< gkLogicLink > *result = 0 ;
  
  SWIG_check_num_args("gsArrayIterator< gkLogicLink >::gsArrayIterator",0,0)
  result = (gsArrayIterator< gkLogicLink > *)new gsArrayIterator< gkLogicLink >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsArrayIteratorT_gkLogicLink_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogicIterator_hasMoreElements(lua_State* L) {
  int SWIG_arg = 0;
  gsArrayIterator< gkLogicLink > *arg1 = (gsArrayIterator< gkLogicLink > *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsArrayIterator< gkLogicLink >::hasMoreElements",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArrayIterator< gkLogicLink >::hasMoreElements",1,"gsArrayIterator< gkLogicLink > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayIteratorT_gkLogicLink_t,0))){
    SWIG_fail_ptr("LogicIterator_hasMoreElements",1,SWIGTYPE_p_gsArrayIteratorT_gkLogicLink_t);
  }
  
  result = (bool)(arg1)->hasMoreElements();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogicIterator_moveNext(lua_State* L) {
  int SWIG_arg = 0;
  gsArrayIterator< gkLogicLink > *arg1 = (gsArrayIterator< gkLogicLink > *) 0 ;
  
  SWIG_check_num_args("gsArrayIterator< gkLogicLink >::moveNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArrayIterator< gkLogicLink >::moveNext",1,"gsArrayIterator< gkLogicLink > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayIteratorT_gkLogicLink_t,0))){
    SWIG_fail_ptr("LogicIterator_moveNext",1,SWIGTYPE_p_gsArrayIteratorT_gkLogicLink_t);
  }
  
  (arg1)->moveNext();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogicIterator_peekNext(lua_State* L) {
  int SWIG_arg = 0;
  gsArrayIterator< gkLogicLink > *arg1 = (gsArrayIterator< gkLogicLink > *) 0 ;
  gkLogicLink *result = 0 ;
  
  SWIG_check_num_args("gsArrayIterator< gkLogicLink >::peekNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArrayIterator< gkLogicLink >::peekNext",1,"gsArrayIterator< gkLogicLink > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayIteratorT_gkLogicLink_t,0))){
    SWIG_fail_ptr("LogicIterator_peekNext",1,SWIGTYPE_p_gsArrayIteratorT_gkLogicLink_t);
  }
  
  result = (gkLogicLink *)(arg1)->peekNext();
  if (result) {
    SWIG_arg += GS_LUA_OBJECT_WRAP_STORE(result, LogicLink, LogicObject); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogicIterator_getNext(lua_State* L) {
  int SWIG_arg = 0;
  gsArrayIterator< gkLogicLink > *arg1 = (gsArrayIterator< gkLogicLink > *) 0 ;
  gkLogicLink *result = 0 ;
  
  SWIG_check_num_args("gsArrayIterator< gkLogicLink >::getNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArrayIterator< gkLogicLink >::getNext",1,"gsArrayIterator< gkLogicLink > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayIteratorT_gkLogicLink_t,0))){
    SWIG_fail_ptr("LogicIterator_getNext",1,SWIGTYPE_p_gsArrayIteratorT_gkLogicLink_t);
  }
  
  result = (gkLogicLink *)(arg1)->getNext();
  if (result) {
    SWIG_arg += GS_LUA_OBJECT_WRAP_STORE(result, LogicLink, LogicObject); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LogicIterator(void *obj) {
gsArrayIterator< gkLogicLink > *arg1 = (gsArrayIterator< gkLogicLink > *) obj;
delete arg1;
}
static swig_lua_method swig_gsArrayIterator_Sl_gkLogicLink_Sg__methods[] = {
    {"hasMoreElements", _wrap_LogicIterator_hasMoreElements}, 
    {"moveNext", _wrap_LogicIterator_moveNext}, 
    {"peekNext", _wrap_LogicIterator_peekNext}, 
    {"getNext", _wrap_LogicIterator_getNext}, 
    {0,0}
};
static swig_lua_attribute swig_gsArrayIterator_Sl_gkLogicLink_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsArrayIterator_Sl_gkLogicLink_Sg__bases[] = {0};
static const char *swig_gsArrayIterator_Sl_gkLogicLink_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_gsArrayIterator_Sl_gkLogicLink_Sg_ = { "LogicIterator", &SWIGTYPE_p_gsArrayIteratorT_gkLogicLink_t,_wrap_new_LogicIterator, swig_delete_LogicIterator, swig_gsArrayIterator_Sl_gkLogicLink_Sg__methods, swig_gsArrayIterator_Sl_gkLogicLink_Sg__attributes, swig_gsArrayIterator_Sl_gkLogicLink_Sg__bases, swig_gsArrayIterator_Sl_gkLogicLink_Sg__base_names };

static int _wrap_new_Sensors__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsSensor,gkLogicSensor > *result = 0 ;
  
  SWIG_check_num_args("gsArray< gsSensor,gkLogicSensor >::gsArray",0,0)
  result = (gsArray< gsSensor,gkLogicSensor > *)new gsArray< gsSensor,gkLogicSensor >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsArrayT_gsSensor_gkLogicSensor_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sensors__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsSensor,gkLogicSensor >::Array *arg1 = 0 ;
  gsArray< gsSensor,gkLogicSensor > *result = 0 ;
  
  SWIG_check_num_args("gsArray< gsSensor,gkLogicSensor >::gsArray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gsArray< gsSensor,gkLogicSensor >::gsArray",1,"gsArray< gsSensor,gkLogicSensor >::Array const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_utArrayT_gkLogicSensor_p_t,0))){
    SWIG_fail_ptr("new_Sensors",1,SWIGTYPE_p_utArrayT_gkLogicSensor_p_t);
  }
  
  result = (gsArray< gsSensor,gkLogicSensor > *)new gsArray< gsSensor,gkLogicSensor >((gsArray< gsSensor,gkLogicSensor >::Array const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsArrayT_gsSensor_gkLogicSensor_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sensors(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Sensors__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_utArrayT_gkLogicSensor_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Sensors__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Sensors'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsArray< gsSensor,gkLogicSensor >::gsArray()\n"
    "    gsArray< gsSensor,gkLogicSensor >::gsArray(gsArray< gsSensor,gkLogicSensor >::Array const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Sensors_clear(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsSensor,gkLogicSensor > *arg1 = (gsArray< gsSensor,gkLogicSensor > *) 0 ;
  
  SWIG_check_num_args("gsArray< gsSensor,gkLogicSensor >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsSensor,gkLogicSensor >::clear",1,"gsArray< gsSensor,gkLogicSensor > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsSensor_gkLogicSensor_t,0))){
    SWIG_fail_ptr("Sensors_clear",1,SWIGTYPE_p_gsArrayT_gsSensor_gkLogicSensor_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sensors_size(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsSensor,gkLogicSensor > *arg1 = (gsArray< gsSensor,gkLogicSensor > *) 0 ;
  int result;
  
  SWIG_check_num_args("gsArray< gsSensor,gkLogicSensor >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsSensor,gkLogicSensor >::size",1,"gsArray< gsSensor,gkLogicSensor > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsSensor_gkLogicSensor_t,0))){
    SWIG_fail_ptr("Sensors_size",1,SWIGTYPE_p_gsArrayT_gsSensor_gkLogicSensor_t);
  }
  
  result = (int)((gsArray< gsSensor,gkLogicSensor > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sensors_empty(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsSensor,gkLogicSensor > *arg1 = (gsArray< gsSensor,gkLogicSensor > *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsArray< gsSensor,gkLogicSensor >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsSensor,gkLogicSensor >::empty",1,"gsArray< gsSensor,gkLogicSensor > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsSensor_gkLogicSensor_t,0))){
    SWIG_fail_ptr("Sensors_empty",1,SWIGTYPE_p_gsArrayT_gsSensor_gkLogicSensor_t);
  }
  
  result = (bool)((gsArray< gsSensor,gkLogicSensor > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sensors___getitem(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsSensor,gkLogicSensor > *arg1 = (gsArray< gsSensor,gkLogicSensor > *) 0 ;
  int arg2 ;
  gkLogicSensor *result = 0 ;
  
  SWIG_check_num_args("gsArray< gsSensor,gkLogicSensor >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsSensor,gkLogicSensor >::__getitem__",1,"gsArray< gsSensor,gkLogicSensor > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsArray< gsSensor,gkLogicSensor >::__getitem__",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsSensor_gkLogicSensor_t,0))){
    SWIG_fail_ptr("Sensors___getitem",1,SWIGTYPE_p_gsArrayT_gsSensor_gkLogicSensor_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (gkLogicSensor *)(arg1)->__getitem__(arg2);
  if (result) {
    SWIG_arg += gsWrapSensor(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sensors_at(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsSensor,gkLogicSensor > *arg1 = (gsArray< gsSensor,gkLogicSensor > *) 0 ;
  int arg2 ;
  gkLogicSensor *result = 0 ;
  
  SWIG_check_num_args("gsArray< gsSensor,gkLogicSensor >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsSensor,gkLogicSensor >::at",1,"gsArray< gsSensor,gkLogicSensor > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsArray< gsSensor,gkLogicSensor >::at",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsSensor_gkLogicSensor_t,0))){
    SWIG_fail_ptr("Sensors_at",1,SWIGTYPE_p_gsArrayT_gsSensor_gkLogicSensor_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (gkLogicSensor *)(arg1)->at(arg2);
  if (result) {
    SWIG_arg += gsWrapSensor(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sensors_push(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsSensor,gkLogicSensor > *arg1 = (gsArray< gsSensor,gkLogicSensor > *) 0 ;
  gsSensor *arg2 = (gsSensor *) 0 ;
  
  SWIG_check_num_args("gsArray< gsSensor,gkLogicSensor >::push",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsSensor,gkLogicSensor >::push",1,"gsArray< gsSensor,gkLogicSensor > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gsArray< gsSensor,gkLogicSensor >::push",2,"gsSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsSensor_gkLogicSensor_t,0))){
    SWIG_fail_ptr("Sensors_push",1,SWIGTYPE_p_gsArrayT_gsSensor_gkLogicSensor_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsSensor,0))){
    SWIG_fail_ptr("Sensors_push",2,SWIGTYPE_p_gsSensor);
  }
  
  (arg1)->push(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sensors_erase(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsSensor,gkLogicSensor > *arg1 = (gsArray< gsSensor,gkLogicSensor > *) 0 ;
  gsSensor *arg2 = (gsSensor *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsArray< gsSensor,gkLogicSensor >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsSensor,gkLogicSensor >::erase",1,"gsArray< gsSensor,gkLogicSensor > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gsArray< gsSensor,gkLogicSensor >::erase",2,"gsSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsSensor_gkLogicSensor_t,0))){
    SWIG_fail_ptr("Sensors_erase",1,SWIGTYPE_p_gsArrayT_gsSensor_gkLogicSensor_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsSensor,0))){
    SWIG_fail_ptr("Sensors_erase",2,SWIGTYPE_p_gsSensor);
  }
  
  result = (bool)(arg1)->erase(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sensors_iterator(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsSensor,gkLogicSensor > *arg1 = (gsArray< gsSensor,gkLogicSensor > *) 0 ;
  gsArrayIterator< gkLogicSensor > result;
  
  SWIG_check_num_args("gsArray< gsSensor,gkLogicSensor >::iterator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsSensor,gkLogicSensor >::iterator",1,"gsArray< gsSensor,gkLogicSensor > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsSensor_gkLogicSensor_t,0))){
    SWIG_fail_ptr("Sensors_iterator",1,SWIGTYPE_p_gsArrayT_gsSensor_gkLogicSensor_t);
  }
  
  result = (arg1)->iterator();
  {
    gsArrayIterator< gkLogicSensor > * resultptr = new gsArrayIterator< gkLogicSensor >((const gsArrayIterator< gkLogicSensor > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsArrayIteratorT_gkLogicSensor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Sensors(void *obj) {
gsArray< gsSensor,gkLogicSensor > *arg1 = (gsArray< gsSensor,gkLogicSensor > *) obj;
delete arg1;
}
static swig_lua_method swig_gsArray_Sl_gsSensor_Sc_gkLogicSensor_Sg__methods[] = {
    {"clear", _wrap_Sensors_clear}, 
    {"size", _wrap_Sensors_size}, 
    {"empty", _wrap_Sensors_empty}, 
    {"__getitem", _wrap_Sensors___getitem}, 
    {"at", _wrap_Sensors_at}, 
    {"push", _wrap_Sensors_push}, 
    {"erase", _wrap_Sensors_erase}, 
    {"iterator", _wrap_Sensors_iterator}, 
    {0,0}
};
static swig_lua_attribute swig_gsArray_Sl_gsSensor_Sc_gkLogicSensor_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsArray_Sl_gsSensor_Sc_gkLogicSensor_Sg__bases[] = {0};
static const char *swig_gsArray_Sl_gsSensor_Sc_gkLogicSensor_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_gsArray_Sl_gsSensor_Sc_gkLogicSensor_Sg_ = { "Sensors", &SWIGTYPE_p_gsArrayT_gsSensor_gkLogicSensor_t,_wrap_new_Sensors, swig_delete_Sensors, swig_gsArray_Sl_gsSensor_Sc_gkLogicSensor_Sg__methods, swig_gsArray_Sl_gsSensor_Sc_gkLogicSensor_Sg__attributes, swig_gsArray_Sl_gsSensor_Sc_gkLogicSensor_Sg__bases, swig_gsArray_Sl_gsSensor_Sc_gkLogicSensor_Sg__base_names };

static int _wrap_new_SensorIterator(lua_State* L) {
  int SWIG_arg = 0;
  gsArrayIterator< gkLogicSensor > *result = 0 ;
  
  SWIG_check_num_args("gsArrayIterator< gkLogicSensor >::gsArrayIterator",0,0)
  result = (gsArrayIterator< gkLogicSensor > *)new gsArrayIterator< gkLogicSensor >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsArrayIteratorT_gkLogicSensor_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SensorIterator_hasMoreElements(lua_State* L) {
  int SWIG_arg = 0;
  gsArrayIterator< gkLogicSensor > *arg1 = (gsArrayIterator< gkLogicSensor > *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsArrayIterator< gkLogicSensor >::hasMoreElements",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArrayIterator< gkLogicSensor >::hasMoreElements",1,"gsArrayIterator< gkLogicSensor > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayIteratorT_gkLogicSensor_t,0))){
    SWIG_fail_ptr("SensorIterator_hasMoreElements",1,SWIGTYPE_p_gsArrayIteratorT_gkLogicSensor_t);
  }
  
  result = (bool)(arg1)->hasMoreElements();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SensorIterator_moveNext(lua_State* L) {
  int SWIG_arg = 0;
  gsArrayIterator< gkLogicSensor > *arg1 = (gsArrayIterator< gkLogicSensor > *) 0 ;
  
  SWIG_check_num_args("gsArrayIterator< gkLogicSensor >::moveNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArrayIterator< gkLogicSensor >::moveNext",1,"gsArrayIterator< gkLogicSensor > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayIteratorT_gkLogicSensor_t,0))){
    SWIG_fail_ptr("SensorIterator_moveNext",1,SWIGTYPE_p_gsArrayIteratorT_gkLogicSensor_t);
  }
  
  (arg1)->moveNext();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SensorIterator_peekNext(lua_State* L) {
  int SWIG_arg = 0;
  gsArrayIterator< gkLogicSensor > *arg1 = (gsArrayIterator< gkLogicSensor > *) 0 ;
  gkLogicSensor *result = 0 ;
  
  SWIG_check_num_args("gsArrayIterator< gkLogicSensor >::peekNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArrayIterator< gkLogicSensor >::peekNext",1,"gsArrayIterator< gkLogicSensor > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayIteratorT_gkLogicSensor_t,0))){
    SWIG_fail_ptr("SensorIterator_peekNext",1,SWIGTYPE_p_gsArrayIteratorT_gkLogicSensor_t);
  }
  
  result = (gkLogicSensor *)(arg1)->peekNext();
  if (result) {
    SWIG_arg += gsWrapSensor(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SensorIterator_getNext(lua_State* L) {
  int SWIG_arg = 0;
  gsArrayIterator< gkLogicSensor > *arg1 = (gsArrayIterator< gkLogicSensor > *) 0 ;
  gkLogicSensor *result = 0 ;
  
  SWIG_check_num_args("gsArrayIterator< gkLogicSensor >::getNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArrayIterator< gkLogicSensor >::getNext",1,"gsArrayIterator< gkLogicSensor > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayIteratorT_gkLogicSensor_t,0))){
    SWIG_fail_ptr("SensorIterator_getNext",1,SWIGTYPE_p_gsArrayIteratorT_gkLogicSensor_t);
  }
  
  result = (gkLogicSensor *)(arg1)->getNext();
  if (result) {
    SWIG_arg += gsWrapSensor(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SensorIterator(void *obj) {
gsArrayIterator< gkLogicSensor > *arg1 = (gsArrayIterator< gkLogicSensor > *) obj;
delete arg1;
}
static swig_lua_method swig_gsArrayIterator_Sl_gkLogicSensor_Sg__methods[] = {
    {"hasMoreElements", _wrap_SensorIterator_hasMoreElements}, 
    {"moveNext", _wrap_SensorIterator_moveNext}, 
    {"peekNext", _wrap_SensorIterator_peekNext}, 
    {"getNext", _wrap_SensorIterator_getNext}, 
    {0,0}
};
static swig_lua_attribute swig_gsArrayIterator_Sl_gkLogicSensor_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsArrayIterator_Sl_gkLogicSensor_Sg__bases[] = {0};
static const char *swig_gsArrayIterator_Sl_gkLogicSensor_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_gsArrayIterator_Sl_gkLogicSensor_Sg_ = { "SensorIterator", &SWIGTYPE_p_gsArrayIteratorT_gkLogicSensor_t,_wrap_new_SensorIterator, swig_delete_SensorIterator, swig_gsArrayIterator_Sl_gkLogicSensor_Sg__methods, swig_gsArrayIterator_Sl_gkLogicSensor_Sg__attributes, swig_gsArrayIterator_Sl_gkLogicSensor_Sg__bases, swig_gsArrayIterator_Sl_gkLogicSensor_Sg__base_names };

static int _wrap_new_Controllers__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsController,gkLogicController > *result = 0 ;
  
  SWIG_check_num_args("gsArray< gsController,gkLogicController >::gsArray",0,0)
  result = (gsArray< gsController,gkLogicController > *)new gsArray< gsController,gkLogicController >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsArrayT_gsController_gkLogicController_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Controllers__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsController,gkLogicController >::Array *arg1 = 0 ;
  gsArray< gsController,gkLogicController > *result = 0 ;
  
  SWIG_check_num_args("gsArray< gsController,gkLogicController >::gsArray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gsArray< gsController,gkLogicController >::gsArray",1,"gsArray< gsController,gkLogicController >::Array const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_utArrayT_gkLogicController_p_t,0))){
    SWIG_fail_ptr("new_Controllers",1,SWIGTYPE_p_utArrayT_gkLogicController_p_t);
  }
  
  result = (gsArray< gsController,gkLogicController > *)new gsArray< gsController,gkLogicController >((gsArray< gsController,gkLogicController >::Array const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsArrayT_gsController_gkLogicController_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Controllers(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Controllers__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_utArrayT_gkLogicController_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Controllers__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Controllers'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsArray< gsController,gkLogicController >::gsArray()\n"
    "    gsArray< gsController,gkLogicController >::gsArray(gsArray< gsController,gkLogicController >::Array const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Controllers_clear(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsController,gkLogicController > *arg1 = (gsArray< gsController,gkLogicController > *) 0 ;
  
  SWIG_check_num_args("gsArray< gsController,gkLogicController >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsController,gkLogicController >::clear",1,"gsArray< gsController,gkLogicController > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsController_gkLogicController_t,0))){
    SWIG_fail_ptr("Controllers_clear",1,SWIGTYPE_p_gsArrayT_gsController_gkLogicController_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Controllers_size(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsController,gkLogicController > *arg1 = (gsArray< gsController,gkLogicController > *) 0 ;
  int result;
  
  SWIG_check_num_args("gsArray< gsController,gkLogicController >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsController,gkLogicController >::size",1,"gsArray< gsController,gkLogicController > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsController_gkLogicController_t,0))){
    SWIG_fail_ptr("Controllers_size",1,SWIGTYPE_p_gsArrayT_gsController_gkLogicController_t);
  }
  
  result = (int)((gsArray< gsController,gkLogicController > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Controllers_empty(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsController,gkLogicController > *arg1 = (gsArray< gsController,gkLogicController > *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsArray< gsController,gkLogicController >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsController,gkLogicController >::empty",1,"gsArray< gsController,gkLogicController > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsController_gkLogicController_t,0))){
    SWIG_fail_ptr("Controllers_empty",1,SWIGTYPE_p_gsArrayT_gsController_gkLogicController_t);
  }
  
  result = (bool)((gsArray< gsController,gkLogicController > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Controllers___getitem(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsController,gkLogicController > *arg1 = (gsArray< gsController,gkLogicController > *) 0 ;
  int arg2 ;
  gkLogicController *result = 0 ;
  
  SWIG_check_num_args("gsArray< gsController,gkLogicController >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsController,gkLogicController >::__getitem__",1,"gsArray< gsController,gkLogicController > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsArray< gsController,gkLogicController >::__getitem__",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsController_gkLogicController_t,0))){
    SWIG_fail_ptr("Controllers___getitem",1,SWIGTYPE_p_gsArrayT_gsController_gkLogicController_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (gkLogicController *)(arg1)->__getitem__(arg2);
  if (result) {
    SWIG_arg += gsWrapController(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Controllers_at(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsController,gkLogicController > *arg1 = (gsArray< gsController,gkLogicController > *) 0 ;
  int arg2 ;
  gkLogicController *result = 0 ;
  
  SWIG_check_num_args("gsArray< gsController,gkLogicController >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsController,gkLogicController >::at",1,"gsArray< gsController,gkLogicController > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsArray< gsController,gkLogicController >::at",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsController_gkLogicController_t,0))){
    SWIG_fail_ptr("Controllers_at",1,SWIGTYPE_p_gsArrayT_gsController_gkLogicController_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (gkLogicController *)(arg1)->at(arg2);
  if (result) {
    SWIG_arg += gsWrapController(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Controllers_push(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsController,gkLogicController > *arg1 = (gsArray< gsController,gkLogicController > *) 0 ;
  gsController *arg2 = (gsController *) 0 ;
  
  SWIG_check_num_args("gsArray< gsController,gkLogicController >::push",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsController,gkLogicController >::push",1,"gsArray< gsController,gkLogicController > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gsArray< gsController,gkLogicController >::push",2,"gsController *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsController_gkLogicController_t,0))){
    SWIG_fail_ptr("Controllers_push",1,SWIGTYPE_p_gsArrayT_gsController_gkLogicController_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsController,0))){
    SWIG_fail_ptr("Controllers_push",2,SWIGTYPE_p_gsController);
  }
  
  (arg1)->push(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Controllers_erase(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsController,gkLogicController > *arg1 = (gsArray< gsController,gkLogicController > *) 0 ;
  gsController *arg2 = (gsController *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsArray< gsController,gkLogicController >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsController,gkLogicController >::erase",1,"gsArray< gsController,gkLogicController > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gsArray< gsController,gkLogicController >::erase",2,"gsController *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsController_gkLogicController_t,0))){
    SWIG_fail_ptr("Controllers_erase",1,SWIGTYPE_p_gsArrayT_gsController_gkLogicController_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsController,0))){
    SWIG_fail_ptr("Controllers_erase",2,SWIGTYPE_p_gsController);
  }
  
  result = (bool)(arg1)->erase(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Controllers_iterator(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsController,gkLogicController > *arg1 = (gsArray< gsController,gkLogicController > *) 0 ;
  gsArrayIterator< gkLogicController > result;
  
  SWIG_check_num_args("gsArray< gsController,gkLogicController >::iterator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsController,gkLogicController >::iterator",1,"gsArray< gsController,gkLogicController > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsController_gkLogicController_t,0))){
    SWIG_fail_ptr("Controllers_iterator",1,SWIGTYPE_p_gsArrayT_gsController_gkLogicController_t);
  }
  
  result = (arg1)->iterator();
  {
    gsArrayIterator< gkLogicController > * resultptr = new gsArrayIterator< gkLogicController >((const gsArrayIterator< gkLogicController > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsArrayIteratorT_gkLogicController_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Controllers(void *obj) {
gsArray< gsController,gkLogicController > *arg1 = (gsArray< gsController,gkLogicController > *) obj;
delete arg1;
}
static swig_lua_method swig_gsArray_Sl_gsController_Sc_gkLogicController_Sg__methods[] = {
    {"clear", _wrap_Controllers_clear}, 
    {"size", _wrap_Controllers_size}, 
    {"empty", _wrap_Controllers_empty}, 
    {"__getitem", _wrap_Controllers___getitem}, 
    {"at", _wrap_Controllers_at}, 
    {"push", _wrap_Controllers_push}, 
    {"erase", _wrap_Controllers_erase}, 
    {"iterator", _wrap_Controllers_iterator}, 
    {0,0}
};
static swig_lua_attribute swig_gsArray_Sl_gsController_Sc_gkLogicController_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsArray_Sl_gsController_Sc_gkLogicController_Sg__bases[] = {0};
static const char *swig_gsArray_Sl_gsController_Sc_gkLogicController_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_gsArray_Sl_gsController_Sc_gkLogicController_Sg_ = { "Controllers", &SWIGTYPE_p_gsArrayT_gsController_gkLogicController_t,_wrap_new_Controllers, swig_delete_Controllers, swig_gsArray_Sl_gsController_Sc_gkLogicController_Sg__methods, swig_gsArray_Sl_gsController_Sc_gkLogicController_Sg__attributes, swig_gsArray_Sl_gsController_Sc_gkLogicController_Sg__bases, swig_gsArray_Sl_gsController_Sc_gkLogicController_Sg__base_names };

static int _wrap_new_ControllerIterator(lua_State* L) {
  int SWIG_arg = 0;
  gsArrayIterator< gkLogicController > *result = 0 ;
  
  SWIG_check_num_args("gsArrayIterator< gkLogicController >::gsArrayIterator",0,0)
  result = (gsArrayIterator< gkLogicController > *)new gsArrayIterator< gkLogicController >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsArrayIteratorT_gkLogicController_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ControllerIterator_hasMoreElements(lua_State* L) {
  int SWIG_arg = 0;
  gsArrayIterator< gkLogicController > *arg1 = (gsArrayIterator< gkLogicController > *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsArrayIterator< gkLogicController >::hasMoreElements",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArrayIterator< gkLogicController >::hasMoreElements",1,"gsArrayIterator< gkLogicController > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayIteratorT_gkLogicController_t,0))){
    SWIG_fail_ptr("ControllerIterator_hasMoreElements",1,SWIGTYPE_p_gsArrayIteratorT_gkLogicController_t);
  }
  
  result = (bool)(arg1)->hasMoreElements();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ControllerIterator_moveNext(lua_State* L) {
  int SWIG_arg = 0;
  gsArrayIterator< gkLogicController > *arg1 = (gsArrayIterator< gkLogicController > *) 0 ;
  
  SWIG_check_num_args("gsArrayIterator< gkLogicController >::moveNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArrayIterator< gkLogicController >::moveNext",1,"gsArrayIterator< gkLogicController > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayIteratorT_gkLogicController_t,0))){
    SWIG_fail_ptr("ControllerIterator_moveNext",1,SWIGTYPE_p_gsArrayIteratorT_gkLogicController_t);
  }
  
  (arg1)->moveNext();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ControllerIterator_peekNext(lua_State* L) {
  int SWIG_arg = 0;
  gsArrayIterator< gkLogicController > *arg1 = (gsArrayIterator< gkLogicController > *) 0 ;
  gkLogicController *result = 0 ;
  
  SWIG_check_num_args("gsArrayIterator< gkLogicController >::peekNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArrayIterator< gkLogicController >::peekNext",1,"gsArrayIterator< gkLogicController > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayIteratorT_gkLogicController_t,0))){
    SWIG_fail_ptr("ControllerIterator_peekNext",1,SWIGTYPE_p_gsArrayIteratorT_gkLogicController_t);
  }
  
  result = (gkLogicController *)(arg1)->peekNext();
  if (result) {
    SWIG_arg += gsWrapController(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ControllerIterator_getNext(lua_State* L) {
  int SWIG_arg = 0;
  gsArrayIterator< gkLogicController > *arg1 = (gsArrayIterator< gkLogicController > *) 0 ;
  gkLogicController *result = 0 ;
  
  SWIG_check_num_args("gsArrayIterator< gkLogicController >::getNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArrayIterator< gkLogicController >::getNext",1,"gsArrayIterator< gkLogicController > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayIteratorT_gkLogicController_t,0))){
    SWIG_fail_ptr("ControllerIterator_getNext",1,SWIGTYPE_p_gsArrayIteratorT_gkLogicController_t);
  }
  
  result = (gkLogicController *)(arg1)->getNext();
  if (result) {
    SWIG_arg += gsWrapController(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ControllerIterator(void *obj) {
gsArrayIterator< gkLogicController > *arg1 = (gsArrayIterator< gkLogicController > *) obj;
delete arg1;
}
static swig_lua_method swig_gsArrayIterator_Sl_gkLogicController_Sg__methods[] = {
    {"hasMoreElements", _wrap_ControllerIterator_hasMoreElements}, 
    {"moveNext", _wrap_ControllerIterator_moveNext}, 
    {"peekNext", _wrap_ControllerIterator_peekNext}, 
    {"getNext", _wrap_ControllerIterator_getNext}, 
    {0,0}
};
static swig_lua_attribute swig_gsArrayIterator_Sl_gkLogicController_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsArrayIterator_Sl_gkLogicController_Sg__bases[] = {0};
static const char *swig_gsArrayIterator_Sl_gkLogicController_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_gsArrayIterator_Sl_gkLogicController_Sg_ = { "ControllerIterator", &SWIGTYPE_p_gsArrayIteratorT_gkLogicController_t,_wrap_new_ControllerIterator, swig_delete_ControllerIterator, swig_gsArrayIterator_Sl_gkLogicController_Sg__methods, swig_gsArrayIterator_Sl_gkLogicController_Sg__attributes, swig_gsArrayIterator_Sl_gkLogicController_Sg__bases, swig_gsArrayIterator_Sl_gkLogicController_Sg__base_names };

static int _wrap_new_Actuators__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsActuator,gkLogicActuator > *result = 0 ;
  
  SWIG_check_num_args("gsArray< gsActuator,gkLogicActuator >::gsArray",0,0)
  result = (gsArray< gsActuator,gkLogicActuator > *)new gsArray< gsActuator,gkLogicActuator >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsArrayT_gsActuator_gkLogicActuator_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Actuators__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsActuator,gkLogicActuator >::Array *arg1 = 0 ;
  gsArray< gsActuator,gkLogicActuator > *result = 0 ;
  
  SWIG_check_num_args("gsArray< gsActuator,gkLogicActuator >::gsArray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gsArray< gsActuator,gkLogicActuator >::gsArray",1,"gsArray< gsActuator,gkLogicActuator >::Array const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_utArrayT_gkLogicActuator_p_t,0))){
    SWIG_fail_ptr("new_Actuators",1,SWIGTYPE_p_utArrayT_gkLogicActuator_p_t);
  }
  
  result = (gsArray< gsActuator,gkLogicActuator > *)new gsArray< gsActuator,gkLogicActuator >((gsArray< gsActuator,gkLogicActuator >::Array const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsArrayT_gsActuator_gkLogicActuator_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Actuators(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Actuators__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_utArrayT_gkLogicActuator_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Actuators__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Actuators'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsArray< gsActuator,gkLogicActuator >::gsArray()\n"
    "    gsArray< gsActuator,gkLogicActuator >::gsArray(gsArray< gsActuator,gkLogicActuator >::Array const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Actuators_clear(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsActuator,gkLogicActuator > *arg1 = (gsArray< gsActuator,gkLogicActuator > *) 0 ;
  
  SWIG_check_num_args("gsArray< gsActuator,gkLogicActuator >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsActuator,gkLogicActuator >::clear",1,"gsArray< gsActuator,gkLogicActuator > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsActuator_gkLogicActuator_t,0))){
    SWIG_fail_ptr("Actuators_clear",1,SWIGTYPE_p_gsArrayT_gsActuator_gkLogicActuator_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Actuators_size(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsActuator,gkLogicActuator > *arg1 = (gsArray< gsActuator,gkLogicActuator > *) 0 ;
  int result;
  
  SWIG_check_num_args("gsArray< gsActuator,gkLogicActuator >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsActuator,gkLogicActuator >::size",1,"gsArray< gsActuator,gkLogicActuator > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsActuator_gkLogicActuator_t,0))){
    SWIG_fail_ptr("Actuators_size",1,SWIGTYPE_p_gsArrayT_gsActuator_gkLogicActuator_t);
  }
  
  result = (int)((gsArray< gsActuator,gkLogicActuator > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Actuators_empty(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsActuator,gkLogicActuator > *arg1 = (gsArray< gsActuator,gkLogicActuator > *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsArray< gsActuator,gkLogicActuator >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsActuator,gkLogicActuator >::empty",1,"gsArray< gsActuator,gkLogicActuator > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsActuator_gkLogicActuator_t,0))){
    SWIG_fail_ptr("Actuators_empty",1,SWIGTYPE_p_gsArrayT_gsActuator_gkLogicActuator_t);
  }
  
  result = (bool)((gsArray< gsActuator,gkLogicActuator > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Actuators___getitem(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsActuator,gkLogicActuator > *arg1 = (gsArray< gsActuator,gkLogicActuator > *) 0 ;
  int arg2 ;
  gkLogicActuator *result = 0 ;
  
  SWIG_check_num_args("gsArray< gsActuator,gkLogicActuator >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsActuator,gkLogicActuator >::__getitem__",1,"gsArray< gsActuator,gkLogicActuator > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsArray< gsActuator,gkLogicActuator >::__getitem__",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsActuator_gkLogicActuator_t,0))){
    SWIG_fail_ptr("Actuators___getitem",1,SWIGTYPE_p_gsArrayT_gsActuator_gkLogicActuator_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (gkLogicActuator *)(arg1)->__getitem__(arg2);
  if (result) {
    SWIG_arg += gsWrapActuator(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Actuators_at(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsActuator,gkLogicActuator > *arg1 = (gsArray< gsActuator,gkLogicActuator > *) 0 ;
  int arg2 ;
  gkLogicActuator *result = 0 ;
  
  SWIG_check_num_args("gsArray< gsActuator,gkLogicActuator >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsActuator,gkLogicActuator >::at",1,"gsArray< gsActuator,gkLogicActuator > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsArray< gsActuator,gkLogicActuator >::at",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsActuator_gkLogicActuator_t,0))){
    SWIG_fail_ptr("Actuators_at",1,SWIGTYPE_p_gsArrayT_gsActuator_gkLogicActuator_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (gkLogicActuator *)(arg1)->at(arg2);
  if (result) {
    SWIG_arg += gsWrapActuator(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Actuators_push(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsActuator,gkLogicActuator > *arg1 = (gsArray< gsActuator,gkLogicActuator > *) 0 ;
  gsActuator *arg2 = (gsActuator *) 0 ;
  
  SWIG_check_num_args("gsArray< gsActuator,gkLogicActuator >::push",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsActuator,gkLogicActuator >::push",1,"gsArray< gsActuator,gkLogicActuator > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gsArray< gsActuator,gkLogicActuator >::push",2,"gsActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsActuator_gkLogicActuator_t,0))){
    SWIG_fail_ptr("Actuators_push",1,SWIGTYPE_p_gsArrayT_gsActuator_gkLogicActuator_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsActuator,0))){
    SWIG_fail_ptr("Actuators_push",2,SWIGTYPE_p_gsActuator);
  }
  
  (arg1)->push(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Actuators_erase(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsActuator,gkLogicActuator > *arg1 = (gsArray< gsActuator,gkLogicActuator > *) 0 ;
  gsActuator *arg2 = (gsActuator *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsArray< gsActuator,gkLogicActuator >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsActuator,gkLogicActuator >::erase",1,"gsArray< gsActuator,gkLogicActuator > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gsArray< gsActuator,gkLogicActuator >::erase",2,"gsActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsActuator_gkLogicActuator_t,0))){
    SWIG_fail_ptr("Actuators_erase",1,SWIGTYPE_p_gsArrayT_gsActuator_gkLogicActuator_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsActuator,0))){
    SWIG_fail_ptr("Actuators_erase",2,SWIGTYPE_p_gsActuator);
  }
  
  result = (bool)(arg1)->erase(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Actuators_iterator(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsActuator,gkLogicActuator > *arg1 = (gsArray< gsActuator,gkLogicActuator > *) 0 ;
  gsArrayIterator< gkLogicActuator > result;
  
  SWIG_check_num_args("gsArray< gsActuator,gkLogicActuator >::iterator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArray< gsActuator,gkLogicActuator >::iterator",1,"gsArray< gsActuator,gkLogicActuator > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsActuator_gkLogicActuator_t,0))){
    SWIG_fail_ptr("Actuators_iterator",1,SWIGTYPE_p_gsArrayT_gsActuator_gkLogicActuator_t);
  }
  
  result = (arg1)->iterator();
  {
    gsArrayIterator< gkLogicActuator > * resultptr = new gsArrayIterator< gkLogicActuator >((const gsArrayIterator< gkLogicActuator > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsArrayIteratorT_gkLogicActuator_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Actuators(void *obj) {
gsArray< gsActuator,gkLogicActuator > *arg1 = (gsArray< gsActuator,gkLogicActuator > *) obj;
delete arg1;
}
static swig_lua_method swig_gsArray_Sl_gsActuator_Sc_gkLogicActuator_Sg__methods[] = {
    {"clear", _wrap_Actuators_clear}, 
    {"size", _wrap_Actuators_size}, 
    {"empty", _wrap_Actuators_empty}, 
    {"__getitem", _wrap_Actuators___getitem}, 
    {"at", _wrap_Actuators_at}, 
    {"push", _wrap_Actuators_push}, 
    {"erase", _wrap_Actuators_erase}, 
    {"iterator", _wrap_Actuators_iterator}, 
    {0,0}
};
static swig_lua_attribute swig_gsArray_Sl_gsActuator_Sc_gkLogicActuator_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsArray_Sl_gsActuator_Sc_gkLogicActuator_Sg__bases[] = {0};
static const char *swig_gsArray_Sl_gsActuator_Sc_gkLogicActuator_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_gsArray_Sl_gsActuator_Sc_gkLogicActuator_Sg_ = { "Actuators", &SWIGTYPE_p_gsArrayT_gsActuator_gkLogicActuator_t,_wrap_new_Actuators, swig_delete_Actuators, swig_gsArray_Sl_gsActuator_Sc_gkLogicActuator_Sg__methods, swig_gsArray_Sl_gsActuator_Sc_gkLogicActuator_Sg__attributes, swig_gsArray_Sl_gsActuator_Sc_gkLogicActuator_Sg__bases, swig_gsArray_Sl_gsActuator_Sc_gkLogicActuator_Sg__base_names };

static int _wrap_new_ActuatorIterator(lua_State* L) {
  int SWIG_arg = 0;
  gsArrayIterator< gkLogicActuator > *result = 0 ;
  
  SWIG_check_num_args("gsArrayIterator< gkLogicActuator >::gsArrayIterator",0,0)
  result = (gsArrayIterator< gkLogicActuator > *)new gsArrayIterator< gkLogicActuator >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsArrayIteratorT_gkLogicActuator_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActuatorIterator_hasMoreElements(lua_State* L) {
  int SWIG_arg = 0;
  gsArrayIterator< gkLogicActuator > *arg1 = (gsArrayIterator< gkLogicActuator > *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsArrayIterator< gkLogicActuator >::hasMoreElements",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArrayIterator< gkLogicActuator >::hasMoreElements",1,"gsArrayIterator< gkLogicActuator > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayIteratorT_gkLogicActuator_t,0))){
    SWIG_fail_ptr("ActuatorIterator_hasMoreElements",1,SWIGTYPE_p_gsArrayIteratorT_gkLogicActuator_t);
  }
  
  result = (bool)(arg1)->hasMoreElements();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActuatorIterator_moveNext(lua_State* L) {
  int SWIG_arg = 0;
  gsArrayIterator< gkLogicActuator > *arg1 = (gsArrayIterator< gkLogicActuator > *) 0 ;
  
  SWIG_check_num_args("gsArrayIterator< gkLogicActuator >::moveNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArrayIterator< gkLogicActuator >::moveNext",1,"gsArrayIterator< gkLogicActuator > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayIteratorT_gkLogicActuator_t,0))){
    SWIG_fail_ptr("ActuatorIterator_moveNext",1,SWIGTYPE_p_gsArrayIteratorT_gkLogicActuator_t);
  }
  
  (arg1)->moveNext();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActuatorIterator_peekNext(lua_State* L) {
  int SWIG_arg = 0;
  gsArrayIterator< gkLogicActuator > *arg1 = (gsArrayIterator< gkLogicActuator > *) 0 ;
  gkLogicActuator *result = 0 ;
  
  SWIG_check_num_args("gsArrayIterator< gkLogicActuator >::peekNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArrayIterator< gkLogicActuator >::peekNext",1,"gsArrayIterator< gkLogicActuator > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayIteratorT_gkLogicActuator_t,0))){
    SWIG_fail_ptr("ActuatorIterator_peekNext",1,SWIGTYPE_p_gsArrayIteratorT_gkLogicActuator_t);
  }
  
  result = (gkLogicActuator *)(arg1)->peekNext();
  if (result) {
    SWIG_arg += gsWrapActuator(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActuatorIterator_getNext(lua_State* L) {
  int SWIG_arg = 0;
  gsArrayIterator< gkLogicActuator > *arg1 = (gsArrayIterator< gkLogicActuator > *) 0 ;
  gkLogicActuator *result = 0 ;
  
  SWIG_check_num_args("gsArrayIterator< gkLogicActuator >::getNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsArrayIterator< gkLogicActuator >::getNext",1,"gsArrayIterator< gkLogicActuator > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayIteratorT_gkLogicActuator_t,0))){
    SWIG_fail_ptr("ActuatorIterator_getNext",1,SWIGTYPE_p_gsArrayIteratorT_gkLogicActuator_t);
  }
  
  result = (gkLogicActuator *)(arg1)->getNext();
  if (result) {
    SWIG_arg += gsWrapActuator(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ActuatorIterator(void *obj) {
gsArrayIterator< gkLogicActuator > *arg1 = (gsArrayIterator< gkLogicActuator > *) obj;
delete arg1;
}
static swig_lua_method swig_gsArrayIterator_Sl_gkLogicActuator_Sg__methods[] = {
    {"hasMoreElements", _wrap_ActuatorIterator_hasMoreElements}, 
    {"moveNext", _wrap_ActuatorIterator_moveNext}, 
    {"peekNext", _wrap_ActuatorIterator_peekNext}, 
    {"getNext", _wrap_ActuatorIterator_getNext}, 
    {0,0}
};
static swig_lua_attribute swig_gsArrayIterator_Sl_gkLogicActuator_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsArrayIterator_Sl_gkLogicActuator_Sg__bases[] = {0};
static const char *swig_gsArrayIterator_Sl_gkLogicActuator_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_gsArrayIterator_Sl_gkLogicActuator_Sg_ = { "ActuatorIterator", &SWIGTYPE_p_gsArrayIteratorT_gkLogicActuator_t,_wrap_new_ActuatorIterator, swig_delete_ActuatorIterator, swig_gsArrayIterator_Sl_gkLogicActuator_Sg__methods, swig_gsArrayIterator_Sl_gkLogicActuator_Sg__attributes, swig_gsArrayIterator_Sl_gkLogicActuator_Sg__bases, swig_gsArrayIterator_Sl_gkLogicActuator_Sg__base_names };

static int _wrap_new_LogicManager(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicManager *result = 0 ;
  
  SWIG_check_num_args("gsLogicManager::gsLogicManager",0,0)
  result = (gsLogicManager *)new gsLogicManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsLogicManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogicManager_newObject(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicManager *arg1 = (gsLogicManager *) 0 ;
  gsGameObject *arg2 = (gsGameObject *) 0 ;
  gkLogicLink *result = 0 ;
  
  SWIG_check_num_args("gsLogicManager::newObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsLogicManager::newObject",1,"gsLogicManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gsLogicManager::newObject",2,"gsGameObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicManager,0))){
    SWIG_fail_ptr("LogicManager_newObject",1,SWIGTYPE_p_gsLogicManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsGameObject,0))){
    SWIG_fail_ptr("LogicManager_newObject",2,SWIGTYPE_p_gsGameObject);
  }
  
  result = (gkLogicLink *)(arg1)->newObject(arg2);
  if (result) {
    SWIG_arg += GS_LUA_OBJECT_WRAP_STORE(result, LogicLink, LogicObject); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogicManager_getObject(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicManager *arg1 = (gsLogicManager *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gkLogicLink *result = 0 ;
  
  SWIG_check_num_args("gsLogicManager::getObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsLogicManager::getObject",1,"gsLogicManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsLogicManager::getObject",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicManager,0))){
    SWIG_fail_ptr("LogicManager_getObject",1,SWIGTYPE_p_gsLogicManager);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gkLogicLink *)(arg1)->getObject((gkString const &)*arg2);
  if (result) {
    SWIG_arg += GS_LUA_OBJECT_WRAP_STORE(result, LogicLink, LogicObject); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogicManager_getObjectList(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicManager *arg1 = (gsLogicManager *) 0 ;
  gsArray< gsLogicObject,gkLogicLink > result;
  
  SWIG_check_num_args("gsLogicManager::getObjectList",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsLogicManager::getObjectList",1,"gsLogicManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicManager,0))){
    SWIG_fail_ptr("LogicManager_getObjectList",1,SWIGTYPE_p_gsLogicManager);
  }
  
  result = (arg1)->getObjectList();
  {
    gsArray< gsLogicObject,gkLogicLink > * resultptr = new gsArray< gsLogicObject,gkLogicLink >((const gsArray< gsLogicObject,gkLogicLink > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsArrayT_gsLogicObject_gkLogicLink_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LogicManager(void *obj) {
gsLogicManager *arg1 = (gsLogicManager *) obj;
delete arg1;
}
static swig_lua_method swig_gsLogicManager_methods[] = {
    {"newObject", _wrap_LogicManager_newObject}, 
    {"getObject", _wrap_LogicManager_getObject}, 
    {"getObjectList", _wrap_LogicManager_getObjectList}, 
    {0,0}
};
static swig_lua_attribute swig_gsLogicManager_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsLogicManager_bases[] = {0};
static const char *swig_gsLogicManager_base_names[] = {0};
static swig_lua_class _wrap_class_gsLogicManager = { "LogicManager", &SWIGTYPE_p_gsLogicManager,_wrap_new_LogicManager, swig_delete_LogicManager, swig_gsLogicManager_methods, swig_gsLogicManager_attributes, swig_gsLogicManager_bases, swig_gsLogicManager_base_names };

static int _wrap_new_LogicObject(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *result = 0 ;
  
  SWIG_check_num_args("gsLogicObject::gsLogicObject",0,0)
  result = (gsLogicObject *)new gsLogicObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsLogicObject,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogicObject_getName(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsLogicObject::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsLogicObject::getName",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("LogicObject_getName",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (arg1)->getName();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogicObject_setDebug(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gsLogicObject::setDebug",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsLogicObject::setDebug",1,"gsLogicObject *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gsLogicObject::setDebug",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("LogicObject_setDebug",1,SWIGTYPE_p_gsLogicObject);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setDebug(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogicObject_isDebug(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsLogicObject::isDebug",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsLogicObject::isDebug",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("LogicObject_isDebug",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (bool)(arg1)->isDebug();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogicObject_getSensor(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gkLogicSensor *result = 0 ;
  
  SWIG_check_num_args("gsLogicObject::getSensor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsLogicObject::getSensor",1,"gsLogicObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsLogicObject::getSensor",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("LogicObject_getSensor",1,SWIGTYPE_p_gsLogicObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gkLogicSensor *)(arg1)->getSensor((gkString const &)*arg2);
  if (result) {
    SWIG_arg += gsWrapSensor(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogicObject_getController(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gkLogicController *result = 0 ;
  
  SWIG_check_num_args("gsLogicObject::getController",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsLogicObject::getController",1,"gsLogicObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsLogicObject::getController",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("LogicObject_getController",1,SWIGTYPE_p_gsLogicObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gkLogicController *)(arg1)->getController((gkString const &)*arg2);
  if (result) {
    SWIG_arg += gsWrapController(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogicObject_getActuator(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gkLogicActuator *result = 0 ;
  
  SWIG_check_num_args("gsLogicObject::getActuator",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsLogicObject::getActuator",1,"gsLogicObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsLogicObject::getActuator",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("LogicObject_getActuator",1,SWIGTYPE_p_gsLogicObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gkLogicActuator *)(arg1)->getActuator((gkString const &)*arg2);
  if (result) {
    SWIG_arg += gsWrapActuator(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogicObject_getSensors(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gsArray< gsSensor,gkLogicSensor > result;
  
  SWIG_check_num_args("gsLogicObject::getSensors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsLogicObject::getSensors",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("LogicObject_getSensors",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (arg1)->getSensors();
  {
    gsArray< gsSensor,gkLogicSensor > * resultptr = new gsArray< gsSensor,gkLogicSensor >((const gsArray< gsSensor,gkLogicSensor > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsArrayT_gsSensor_gkLogicSensor_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogicObject_getControllers(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gsArray< gsController,gkLogicController > result;
  
  SWIG_check_num_args("gsLogicObject::getControllers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsLogicObject::getControllers",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("LogicObject_getControllers",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (arg1)->getControllers();
  {
    gsArray< gsController,gkLogicController > * resultptr = new gsArray< gsController,gkLogicController >((const gsArray< gsController,gkLogicController > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsArrayT_gsController_gkLogicController_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogicObject_getActuators(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gsArray< gsActuator,gkLogicActuator > result;
  
  SWIG_check_num_args("gsLogicObject::getActuators",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsLogicObject::getActuators",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("LogicObject_getActuators",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (arg1)->getActuators();
  {
    gsArray< gsActuator,gkLogicActuator > * resultptr = new gsArray< gsActuator,gkLogicActuator >((const gsArray< gsActuator,gkLogicActuator > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsArrayT_gsActuator_gkLogicActuator_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LogicObject(void *obj) {
gsLogicObject *arg1 = (gsLogicObject *) obj;
delete arg1;
}
static swig_lua_method swig_gsLogicObject_methods[] = {
    {"getName", _wrap_LogicObject_getName}, 
    {"setDebug", _wrap_LogicObject_setDebug}, 
    {"isDebug", _wrap_LogicObject_isDebug}, 
    {"getSensor", _wrap_LogicObject_getSensor}, 
    {"getController", _wrap_LogicObject_getController}, 
    {"getActuator", _wrap_LogicObject_getActuator}, 
    {"getSensors", _wrap_LogicObject_getSensors}, 
    {"getControllers", _wrap_LogicObject_getControllers}, 
    {"getActuators", _wrap_LogicObject_getActuators}, 
    {0,0}
};
static swig_lua_attribute swig_gsLogicObject_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsLogicObject_bases[] = {0};
static const char *swig_gsLogicObject_base_names[] = {0};
static swig_lua_class _wrap_class_gsLogicObject = { "LogicObject", &SWIGTYPE_p_gsLogicObject,_wrap_new_LogicObject, swig_delete_LogicObject, swig_gsLogicObject_methods, swig_gsLogicObject_attributes, swig_gsLogicObject_bases, swig_gsLogicObject_base_names };

static int _wrap_new_Brick(lua_State* L) {
  int SWIG_arg = 0;
  gsBrick *result = 0 ;
  
  SWIG_check_num_args("gsBrick::gsBrick",0,0)
  result = (gsBrick *)new gsBrick();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsBrick,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Brick_getName(lua_State* L) {
  int SWIG_arg = 0;
  gsBrick *arg1 = (gsBrick *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsBrick::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsBrick::getName",1,"gsBrick *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsBrick,0))){
    SWIG_fail_ptr("Brick_getName",1,SWIGTYPE_p_gsBrick);
  }
  
  result = (arg1)->getName();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Brick_isOn(lua_State* L) {
  int SWIG_arg = 0;
  gsBrick *arg1 = (gsBrick *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsBrick::isOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsBrick::isOn",1,"gsBrick *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsBrick,0))){
    SWIG_fail_ptr("Brick_isOn",1,SWIGTYPE_p_gsBrick);
  }
  
  result = (bool)(arg1)->isOn();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Brick_isOff(lua_State* L) {
  int SWIG_arg = 0;
  gsBrick *arg1 = (gsBrick *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsBrick::isOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsBrick::isOff",1,"gsBrick *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsBrick,0))){
    SWIG_fail_ptr("Brick_isOff",1,SWIGTYPE_p_gsBrick);
  }
  
  result = (bool)(arg1)->isOff();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Brick_isActive(lua_State* L) {
  int SWIG_arg = 0;
  gsBrick *arg1 = (gsBrick *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsBrick::isActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsBrick::isActive",1,"gsBrick *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsBrick,0))){
    SWIG_fail_ptr("Brick_isActive",1,SWIGTYPE_p_gsBrick);
  }
  
  result = (bool)(arg1)->isActive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Brick_getOwner(lua_State* L) {
  int SWIG_arg = 0;
  gsBrick *arg1 = (gsBrick *) 0 ;
  gkGameObject *result = 0 ;
  
  SWIG_check_num_args("gsBrick::getOwner",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsBrick::getOwner",1,"gsBrick *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsBrick,0))){
    SWIG_fail_ptr("Brick_getOwner",1,SWIGTYPE_p_gsBrick);
  }
  
  result = (gkGameObject *)(arg1)->getOwner();
  if (result) {
    SWIG_arg += gsWrapGameObject(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Brick_getLogicObject(lua_State* L) {
  int SWIG_arg = 0;
  gsBrick *arg1 = (gsBrick *) 0 ;
  gkLogicLink *result = 0 ;
  
  SWIG_check_num_args("gsBrick::getLogicObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsBrick::getLogicObject",1,"gsBrick *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsBrick,0))){
    SWIG_fail_ptr("Brick_getLogicObject",1,SWIGTYPE_p_gsBrick);
  }
  
  result = (gkLogicLink *)(arg1)->getLogicObject();
  if (result) {
    SWIG_arg += GS_LUA_OBJECT_WRAP_STORE(result, LogicLink, LogicObject); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Brick_connect(lua_State* L) {
  int SWIG_arg = 0;
  gsBrick *arg1 = (gsBrick *) 0 ;
  gsListenerMode arg2 ;
  gsSelf arg3 ;
  gsFunction arg4 ;
  
  SWIG_check_num_args("gsBrick::connect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsBrick::connect",1,"gsBrick *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsBrick::connect",2,"gsListenerMode");
  if(!lua_istable(L,3)) SWIG_fail_arg("gsBrick::connect",3,"gsSelf");
  if(!lua_isfunction(L,4)) SWIG_fail_arg("gsBrick::connect",4,"gsFunction");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsBrick,0))){
    SWIG_fail_ptr("Brick_connect",1,SWIGTYPE_p_gsBrick);
  }
  
  arg2 = (gsListenerMode)(int)lua_tonumber(L, 2);
  (&arg3)->m_id = 3; (&arg3)->L = L; 
  (&arg4)->m_id = 4; (&arg4)->L = L; 
  (arg1)->connect(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Brick(void *obj) {
gsBrick *arg1 = (gsBrick *) obj;
delete arg1;
}
static swig_lua_method swig_gsBrick_methods[] = {
    {"getName", _wrap_Brick_getName}, 
    {"isOn", _wrap_Brick_isOn}, 
    {"isOff", _wrap_Brick_isOff}, 
    {"isActive", _wrap_Brick_isActive}, 
    {"getOwner", _wrap_Brick_getOwner}, 
    {"getLogicObject", _wrap_Brick_getLogicObject}, 
    {"connect", _wrap_Brick_connect}, 
    {0,0}
};
static swig_lua_attribute swig_gsBrick_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsBrick_bases[] = {0};
static const char *swig_gsBrick_base_names[] = {0};
static swig_lua_class _wrap_class_gsBrick = { "Brick", &SWIGTYPE_p_gsBrick,_wrap_new_Brick, swig_delete_Brick, swig_gsBrick_methods, swig_gsBrick_attributes, swig_gsBrick_bases, swig_gsBrick_base_names };

static int _wrap_new_Sensor(lua_State* L) {
  int SWIG_arg = 0;
  gsSensor *result = 0 ;
  
  SWIG_check_num_args("gsSensor::gsSensor",0,0)
  result = (gsSensor *)new gsSensor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sensor_setPulse(lua_State* L) {
  int SWIG_arg = 0;
  gsSensor *arg1 = (gsSensor *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gsSensor::setPulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsSensor::setPulse",1,"gsSensor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsSensor::setPulse",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsSensor,0))){
    SWIG_fail_ptr("Sensor_setPulse",1,SWIGTYPE_p_gsSensor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setPulse(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sensor_getPulse(lua_State* L) {
  int SWIG_arg = 0;
  gsSensor *arg1 = (gsSensor *) 0 ;
  int result;
  
  SWIG_check_num_args("gsSensor::getPulse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsSensor::getPulse",1,"gsSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsSensor,0))){
    SWIG_fail_ptr("Sensor_getPulse",1,SWIGTYPE_p_gsSensor);
  }
  
  result = (int)(arg1)->getPulse();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sensor_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  gsSensor *arg1 = (gsSensor *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsSensor::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsSensor::setFrequency",1,"gsSensor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsSensor::setFrequency",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsSensor,0))){
    SWIG_fail_ptr("Sensor_setFrequency",1,SWIGTYPE_p_gsSensor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sensor_getFrequency(lua_State* L) {
  int SWIG_arg = 0;
  gsSensor *arg1 = (gsSensor *) 0 ;
  float result;
  
  SWIG_check_num_args("gsSensor::getFrequency",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsSensor::getFrequency",1,"gsSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsSensor,0))){
    SWIG_fail_ptr("Sensor_getFrequency",1,SWIGTYPE_p_gsSensor);
  }
  
  result = (float)(arg1)->getFrequency();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sensor_setLevel(lua_State* L) {
  int SWIG_arg = 0;
  gsSensor *arg1 = (gsSensor *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gsSensor::setLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsSensor::setLevel",1,"gsSensor *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gsSensor::setLevel",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsSensor,0))){
    SWIG_fail_ptr("Sensor_setLevel",1,SWIGTYPE_p_gsSensor);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setLevel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sensor_isLevel(lua_State* L) {
  int SWIG_arg = 0;
  gsSensor *arg1 = (gsSensor *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsSensor::isLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsSensor::isLevel",1,"gsSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsSensor,0))){
    SWIG_fail_ptr("Sensor_isLevel",1,SWIGTYPE_p_gsSensor);
  }
  
  result = (bool)(arg1)->isLevel();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sensor_setTap(lua_State* L) {
  int SWIG_arg = 0;
  gsSensor *arg1 = (gsSensor *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gsSensor::setTap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsSensor::setTap",1,"gsSensor *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gsSensor::setTap",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsSensor,0))){
    SWIG_fail_ptr("Sensor_setTap",1,SWIGTYPE_p_gsSensor);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setTap(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sensor_isTap(lua_State* L) {
  int SWIG_arg = 0;
  gsSensor *arg1 = (gsSensor *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsSensor::isTap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsSensor::isTap",1,"gsSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsSensor,0))){
    SWIG_fail_ptr("Sensor_isTap",1,SWIGTYPE_p_gsSensor);
  }
  
  result = (bool)(arg1)->isTap();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sensor_setInvert(lua_State* L) {
  int SWIG_arg = 0;
  gsSensor *arg1 = (gsSensor *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gsSensor::setInvert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsSensor::setInvert",1,"gsSensor *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gsSensor::setInvert",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsSensor,0))){
    SWIG_fail_ptr("Sensor_setInvert",1,SWIGTYPE_p_gsSensor);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setInvert(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sensor_isInverse(lua_State* L) {
  int SWIG_arg = 0;
  gsSensor *arg1 = (gsSensor *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsSensor::isInverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsSensor::isInverse",1,"gsSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsSensor,0))){
    SWIG_fail_ptr("Sensor_isInverse",1,SWIGTYPE_p_gsSensor);
  }
  
  result = (bool)(arg1)->isInverse();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sensor_isPositive(lua_State* L) {
  int SWIG_arg = 0;
  gsSensor *arg1 = (gsSensor *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsSensor::isPositive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsSensor::isPositive",1,"gsSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsSensor,0))){
    SWIG_fail_ptr("Sensor_isPositive",1,SWIGTYPE_p_gsSensor);
  }
  
  result = (bool)(arg1)->isPositive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Sensor(void *obj) {
gsSensor *arg1 = (gsSensor *) obj;
delete arg1;
}
static swig_lua_method swig_gsSensor_methods[] = {
    {"setPulse", _wrap_Sensor_setPulse}, 
    {"getPulse", _wrap_Sensor_getPulse}, 
    {"setFrequency", _wrap_Sensor_setFrequency}, 
    {"getFrequency", _wrap_Sensor_getFrequency}, 
    {"setLevel", _wrap_Sensor_setLevel}, 
    {"isLevel", _wrap_Sensor_isLevel}, 
    {"setTap", _wrap_Sensor_setTap}, 
    {"isTap", _wrap_Sensor_isTap}, 
    {"setInvert", _wrap_Sensor_setInvert}, 
    {"isInverse", _wrap_Sensor_isInverse}, 
    {"isPositive", _wrap_Sensor_isPositive}, 
    {0,0}
};
static swig_lua_attribute swig_gsSensor_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsSensor_bases[] = {0,0};
static const char *swig_gsSensor_base_names[] = {"gsBrick *",0};
static swig_lua_class _wrap_class_gsSensor = { "Sensor", &SWIGTYPE_p_gsSensor,_wrap_new_Sensor, swig_delete_Sensor, swig_gsSensor_methods, swig_gsSensor_attributes, swig_gsSensor_bases, swig_gsSensor_base_names };

static int _wrap_new_ActuatorSensor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsActuatorSensor *result = 0 ;
  
  SWIG_check_num_args("gsActuatorSensor::gsActuatorSensor",0,0)
  result = (gsActuatorSensor *)new gsActuatorSensor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsActuatorSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ActuatorSensor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gsActuatorSensor *result = 0 ;
  
  SWIG_check_num_args("gsActuatorSensor::gsActuatorSensor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsActuatorSensor::gsActuatorSensor",1,"gsLogicObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsActuatorSensor::gsActuatorSensor",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_ActuatorSensor",1,SWIGTYPE_p_gsLogicObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gsActuatorSensor *)new gsActuatorSensor(arg1,(gkString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsActuatorSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ActuatorSensor__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gsActuatorSensor *result = 0 ;
  
  SWIG_check_num_args("gsActuatorSensor::gsActuatorSensor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsActuatorSensor::gsActuatorSensor",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_ActuatorSensor",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (gsActuatorSensor *)new gsActuatorSensor(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsActuatorSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ActuatorSensor(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ActuatorSensor__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ActuatorSensor__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ActuatorSensor__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_ActuatorSensor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsActuatorSensor::gsActuatorSensor()\n"
    "    gsActuatorSensor::gsActuatorSensor(gsLogicObject *,gkString const &)\n"
    "    gsActuatorSensor::gsActuatorSensor(gsLogicObject *)\n");
  lua_error(L);return 0;
}


static int _wrap_ActuatorSensor_setActuatorName(lua_State* L) {
  int SWIG_arg = 0;
  gsActuatorSensor *arg1 = (gsActuatorSensor *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsActuatorSensor::setActuatorName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsActuatorSensor::setActuatorName",1,"gsActuatorSensor *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsActuatorSensor::setActuatorName",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsActuatorSensor,0))){
    SWIG_fail_ptr("ActuatorSensor_setActuatorName",1,SWIGTYPE_p_gsActuatorSensor);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setActuatorName((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActuatorSensor_getActuatorName(lua_State* L) {
  int SWIG_arg = 0;
  gsActuatorSensor *arg1 = (gsActuatorSensor *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsActuatorSensor::getActuatorName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsActuatorSensor::getActuatorName",1,"gsActuatorSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsActuatorSensor,0))){
    SWIG_fail_ptr("ActuatorSensor_getActuatorName",1,SWIGTYPE_p_gsActuatorSensor);
  }
  
  result = (arg1)->getActuatorName();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ActuatorSensor(void *obj) {
gsActuatorSensor *arg1 = (gsActuatorSensor *) obj;
delete arg1;
}
static swig_lua_method swig_gsActuatorSensor_methods[] = {
    {"setActuatorName", _wrap_ActuatorSensor_setActuatorName}, 
    {"getActuatorName", _wrap_ActuatorSensor_getActuatorName}, 
    {0,0}
};
static swig_lua_attribute swig_gsActuatorSensor_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsActuatorSensor_bases[] = {0,0};
static const char *swig_gsActuatorSensor_base_names[] = {"gsSensor *",0};
static swig_lua_class _wrap_class_gsActuatorSensor = { "ActuatorSensor", &SWIGTYPE_p_gsActuatorSensor,_wrap_new_ActuatorSensor, swig_delete_ActuatorSensor, swig_gsActuatorSensor_methods, swig_gsActuatorSensor_attributes, swig_gsActuatorSensor_bases, swig_gsActuatorSensor_base_names };

static int _wrap_new_AlwaysSensor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsAlwaysSensor *result = 0 ;
  
  SWIG_check_num_args("gsAlwaysSensor::gsAlwaysSensor",0,0)
  result = (gsAlwaysSensor *)new gsAlwaysSensor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsAlwaysSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AlwaysSensor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gsAlwaysSensor *result = 0 ;
  
  SWIG_check_num_args("gsAlwaysSensor::gsAlwaysSensor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsAlwaysSensor::gsAlwaysSensor",1,"gsLogicObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsAlwaysSensor::gsAlwaysSensor",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_AlwaysSensor",1,SWIGTYPE_p_gsLogicObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gsAlwaysSensor *)new gsAlwaysSensor(arg1,(gkString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsAlwaysSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AlwaysSensor__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gsAlwaysSensor *result = 0 ;
  
  SWIG_check_num_args("gsAlwaysSensor::gsAlwaysSensor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsAlwaysSensor::gsAlwaysSensor",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_AlwaysSensor",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (gsAlwaysSensor *)new gsAlwaysSensor(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsAlwaysSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AlwaysSensor(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_AlwaysSensor__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_AlwaysSensor__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_AlwaysSensor__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_AlwaysSensor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsAlwaysSensor::gsAlwaysSensor()\n"
    "    gsAlwaysSensor::gsAlwaysSensor(gsLogicObject *,gkString const &)\n"
    "    gsAlwaysSensor::gsAlwaysSensor(gsLogicObject *)\n");
  lua_error(L);return 0;
}


static void swig_delete_AlwaysSensor(void *obj) {
gsAlwaysSensor *arg1 = (gsAlwaysSensor *) obj;
delete arg1;
}
static swig_lua_method swig_gsAlwaysSensor_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_gsAlwaysSensor_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsAlwaysSensor_bases[] = {0,0};
static const char *swig_gsAlwaysSensor_base_names[] = {"gsSensor *",0};
static swig_lua_class _wrap_class_gsAlwaysSensor = { "AlwaysSensor", &SWIGTYPE_p_gsAlwaysSensor,_wrap_new_AlwaysSensor, swig_delete_AlwaysSensor, swig_gsAlwaysSensor_methods, swig_gsAlwaysSensor_attributes, swig_gsAlwaysSensor_bases, swig_gsAlwaysSensor_base_names };

static int _wrap_new_CollisionSensor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsCollisionSensor *result = 0 ;
  
  SWIG_check_num_args("gsCollisionSensor::gsCollisionSensor",0,0)
  result = (gsCollisionSensor *)new gsCollisionSensor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsCollisionSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CollisionSensor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gsCollisionSensor *result = 0 ;
  
  SWIG_check_num_args("gsCollisionSensor::gsCollisionSensor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsCollisionSensor::gsCollisionSensor",1,"gsLogicObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsCollisionSensor::gsCollisionSensor",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_CollisionSensor",1,SWIGTYPE_p_gsLogicObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gsCollisionSensor *)new gsCollisionSensor(arg1,(gkString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsCollisionSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CollisionSensor__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gsCollisionSensor *result = 0 ;
  
  SWIG_check_num_args("gsCollisionSensor::gsCollisionSensor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsCollisionSensor::gsCollisionSensor",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_CollisionSensor",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (gsCollisionSensor *)new gsCollisionSensor(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsCollisionSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CollisionSensor(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CollisionSensor__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CollisionSensor__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_CollisionSensor__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_CollisionSensor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsCollisionSensor::gsCollisionSensor()\n"
    "    gsCollisionSensor::gsCollisionSensor(gsLogicObject *,gkString const &)\n"
    "    gsCollisionSensor::gsCollisionSensor(gsLogicObject *)\n");
  lua_error(L);return 0;
}


static int _wrap_CollisionSensor_setMaterialName(lua_State* L) {
  int SWIG_arg = 0;
  gsCollisionSensor *arg1 = (gsCollisionSensor *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsCollisionSensor::setMaterialName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsCollisionSensor::setMaterialName",1,"gsCollisionSensor *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsCollisionSensor::setMaterialName",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsCollisionSensor,0))){
    SWIG_fail_ptr("CollisionSensor_setMaterialName",1,SWIGTYPE_p_gsCollisionSensor);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setMaterialName((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionSensor_getMaterialName(lua_State* L) {
  int SWIG_arg = 0;
  gsCollisionSensor *arg1 = (gsCollisionSensor *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsCollisionSensor::getMaterialName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsCollisionSensor::getMaterialName",1,"gsCollisionSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsCollisionSensor,0))){
    SWIG_fail_ptr("CollisionSensor_getMaterialName",1,SWIGTYPE_p_gsCollisionSensor);
  }
  
  result = (arg1)->getMaterialName();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionSensor_setPropertyName(lua_State* L) {
  int SWIG_arg = 0;
  gsCollisionSensor *arg1 = (gsCollisionSensor *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsCollisionSensor::setPropertyName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsCollisionSensor::setPropertyName",1,"gsCollisionSensor *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsCollisionSensor::setPropertyName",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsCollisionSensor,0))){
    SWIG_fail_ptr("CollisionSensor_setPropertyName",1,SWIGTYPE_p_gsCollisionSensor);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setPropertyName((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionSensor_getPropertyName(lua_State* L) {
  int SWIG_arg = 0;
  gsCollisionSensor *arg1 = (gsCollisionSensor *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsCollisionSensor::getPropertyName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsCollisionSensor::getPropertyName",1,"gsCollisionSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsCollisionSensor,0))){
    SWIG_fail_ptr("CollisionSensor_getPropertyName",1,SWIGTYPE_p_gsCollisionSensor);
  }
  
  result = (arg1)->getPropertyName();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionSensor_getHitObjectsCount(lua_State* L) {
  int SWIG_arg = 0;
  gsCollisionSensor *arg1 = (gsCollisionSensor *) 0 ;
  int result;
  
  SWIG_check_num_args("gsCollisionSensor::getHitObjectsCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsCollisionSensor::getHitObjectsCount",1,"gsCollisionSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsCollisionSensor,0))){
    SWIG_fail_ptr("CollisionSensor_getHitObjectsCount",1,SWIGTYPE_p_gsCollisionSensor);
  }
  
  result = (int)(arg1)->getHitObjectsCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionSensor_getHitObject(lua_State* L) {
  int SWIG_arg = 0;
  gsCollisionSensor *arg1 = (gsCollisionSensor *) 0 ;
  int arg2 ;
  gkGameObject *result = 0 ;
  
  SWIG_check_num_args("gsCollisionSensor::getHitObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsCollisionSensor::getHitObject",1,"gsCollisionSensor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsCollisionSensor::getHitObject",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsCollisionSensor,0))){
    SWIG_fail_ptr("CollisionSensor_getHitObject",1,SWIGTYPE_p_gsCollisionSensor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (gkGameObject *)(arg1)->getHitObject(arg2);
  if (result) {
    SWIG_arg += gsWrapGameObject(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CollisionSensor(void *obj) {
gsCollisionSensor *arg1 = (gsCollisionSensor *) obj;
delete arg1;
}
static swig_lua_method swig_gsCollisionSensor_methods[] = {
    {"setMaterialName", _wrap_CollisionSensor_setMaterialName}, 
    {"getMaterialName", _wrap_CollisionSensor_getMaterialName}, 
    {"setPropertyName", _wrap_CollisionSensor_setPropertyName}, 
    {"getPropertyName", _wrap_CollisionSensor_getPropertyName}, 
    {"getHitObjectsCount", _wrap_CollisionSensor_getHitObjectsCount}, 
    {"getHitObject", _wrap_CollisionSensor_getHitObject}, 
    {0,0}
};
static swig_lua_attribute swig_gsCollisionSensor_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsCollisionSensor_bases[] = {0,0};
static const char *swig_gsCollisionSensor_base_names[] = {"gsSensor *",0};
static swig_lua_class _wrap_class_gsCollisionSensor = { "CollisionSensor", &SWIGTYPE_p_gsCollisionSensor,_wrap_new_CollisionSensor, swig_delete_CollisionSensor, swig_gsCollisionSensor_methods, swig_gsCollisionSensor_attributes, swig_gsCollisionSensor_bases, swig_gsCollisionSensor_base_names };

static int _wrap_new_gsTouchSensor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsTouchSensor *result = 0 ;
  
  SWIG_check_num_args("gsTouchSensor::gsTouchSensor",0,0)
  result = (gsTouchSensor *)new gsTouchSensor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsTouchSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_gsTouchSensor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gsTouchSensor *result = 0 ;
  
  SWIG_check_num_args("gsTouchSensor::gsTouchSensor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsTouchSensor::gsTouchSensor",1,"gsLogicObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsTouchSensor::gsTouchSensor",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_gsTouchSensor",1,SWIGTYPE_p_gsLogicObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gsTouchSensor *)new gsTouchSensor(arg1,(gkString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsTouchSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_gsTouchSensor__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gsTouchSensor *result = 0 ;
  
  SWIG_check_num_args("gsTouchSensor::gsTouchSensor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsTouchSensor::gsTouchSensor",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_gsTouchSensor",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (gsTouchSensor *)new gsTouchSensor(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsTouchSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_gsTouchSensor(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_gsTouchSensor__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_gsTouchSensor__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_gsTouchSensor__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_gsTouchSensor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsTouchSensor::gsTouchSensor()\n"
    "    gsTouchSensor::gsTouchSensor(gsLogicObject *,gkString const &)\n"
    "    gsTouchSensor::gsTouchSensor(gsLogicObject *)\n");
  lua_error(L);return 0;
}


static int _wrap_gsTouchSensor_setMaterialName(lua_State* L) {
  int SWIG_arg = 0;
  gsTouchSensor *arg1 = (gsTouchSensor *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsTouchSensor::setMaterialName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsTouchSensor::setMaterialName",1,"gsTouchSensor *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsTouchSensor::setMaterialName",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsTouchSensor,0))){
    SWIG_fail_ptr("gsTouchSensor_setMaterialName",1,SWIGTYPE_p_gsTouchSensor);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setMaterialName((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gsTouchSensor_getMaterialName(lua_State* L) {
  int SWIG_arg = 0;
  gsTouchSensor *arg1 = (gsTouchSensor *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsTouchSensor::getMaterialName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsTouchSensor::getMaterialName",1,"gsTouchSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsTouchSensor,0))){
    SWIG_fail_ptr("gsTouchSensor_getMaterialName",1,SWIGTYPE_p_gsTouchSensor);
  }
  
  result = (arg1)->getMaterialName();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gsTouchSensor_setPropertyName(lua_State* L) {
  int SWIG_arg = 0;
  gsTouchSensor *arg1 = (gsTouchSensor *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsTouchSensor::setPropertyName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsTouchSensor::setPropertyName",1,"gsTouchSensor *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsTouchSensor::setPropertyName",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsTouchSensor,0))){
    SWIG_fail_ptr("gsTouchSensor_setPropertyName",1,SWIGTYPE_p_gsTouchSensor);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setPropertyName((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gsTouchSensor_getPropertyName(lua_State* L) {
  int SWIG_arg = 0;
  gsTouchSensor *arg1 = (gsTouchSensor *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsTouchSensor::getPropertyName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsTouchSensor::getPropertyName",1,"gsTouchSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsTouchSensor,0))){
    SWIG_fail_ptr("gsTouchSensor_getPropertyName",1,SWIGTYPE_p_gsTouchSensor);
  }
  
  result = (arg1)->getPropertyName();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gsTouchSensor_getHitObjectsCount(lua_State* L) {
  int SWIG_arg = 0;
  gsTouchSensor *arg1 = (gsTouchSensor *) 0 ;
  int result;
  
  SWIG_check_num_args("gsTouchSensor::getHitObjectsCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsTouchSensor::getHitObjectsCount",1,"gsTouchSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsTouchSensor,0))){
    SWIG_fail_ptr("gsTouchSensor_getHitObjectsCount",1,SWIGTYPE_p_gsTouchSensor);
  }
  
  result = (int)(arg1)->getHitObjectsCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gsTouchSensor_getHitObject(lua_State* L) {
  int SWIG_arg = 0;
  gsTouchSensor *arg1 = (gsTouchSensor *) 0 ;
  int arg2 ;
  gkGameObject *result = 0 ;
  
  SWIG_check_num_args("gsTouchSensor::getHitObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsTouchSensor::getHitObject",1,"gsTouchSensor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsTouchSensor::getHitObject",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsTouchSensor,0))){
    SWIG_fail_ptr("gsTouchSensor_getHitObject",1,SWIGTYPE_p_gsTouchSensor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (gkGameObject *)(arg1)->getHitObject(arg2);
  if (result) {
    SWIG_arg += gsWrapGameObject(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_gsTouchSensor(void *obj) {
gsTouchSensor *arg1 = (gsTouchSensor *) obj;
delete arg1;
}
static swig_lua_method swig_gsTouchSensor_methods[] = {
    {"setMaterialName", _wrap_gsTouchSensor_setMaterialName}, 
    {"getMaterialName", _wrap_gsTouchSensor_getMaterialName}, 
    {"setPropertyName", _wrap_gsTouchSensor_setPropertyName}, 
    {"getPropertyName", _wrap_gsTouchSensor_getPropertyName}, 
    {"getHitObjectsCount", _wrap_gsTouchSensor_getHitObjectsCount}, 
    {"getHitObject", _wrap_gsTouchSensor_getHitObject}, 
    {0,0}
};
static swig_lua_attribute swig_gsTouchSensor_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsTouchSensor_bases[] = {0,0};
static const char *swig_gsTouchSensor_base_names[] = {"gsSensor *",0};
static swig_lua_class _wrap_class_gsTouchSensor = { "gsTouchSensor", &SWIGTYPE_p_gsTouchSensor,_wrap_new_gsTouchSensor, swig_delete_gsTouchSensor, swig_gsTouchSensor_methods, swig_gsTouchSensor_attributes, swig_gsTouchSensor_bases, swig_gsTouchSensor_base_names };

static int _wrap_new_DelaySensor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsDelaySensor *result = 0 ;
  
  SWIG_check_num_args("gsDelaySensor::gsDelaySensor",0,0)
  result = (gsDelaySensor *)new gsDelaySensor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsDelaySensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DelaySensor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gsDelaySensor *result = 0 ;
  
  SWIG_check_num_args("gsDelaySensor::gsDelaySensor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsDelaySensor::gsDelaySensor",1,"gsLogicObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsDelaySensor::gsDelaySensor",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_DelaySensor",1,SWIGTYPE_p_gsLogicObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gsDelaySensor *)new gsDelaySensor(arg1,(gkString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsDelaySensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DelaySensor__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gsDelaySensor *result = 0 ;
  
  SWIG_check_num_args("gsDelaySensor::gsDelaySensor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsDelaySensor::gsDelaySensor",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_DelaySensor",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (gsDelaySensor *)new gsDelaySensor(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsDelaySensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DelaySensor(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DelaySensor__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DelaySensor__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_DelaySensor__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_DelaySensor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsDelaySensor::gsDelaySensor()\n"
    "    gsDelaySensor::gsDelaySensor(gsLogicObject *,gkString const &)\n"
    "    gsDelaySensor::gsDelaySensor(gsLogicObject *)\n");
  lua_error(L);return 0;
}


static int _wrap_DelaySensor_setDelay(lua_State* L) {
  int SWIG_arg = 0;
  gsDelaySensor *arg1 = (gsDelaySensor *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gsDelaySensor::setDelay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsDelaySensor::setDelay",1,"gsDelaySensor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsDelaySensor::setDelay",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsDelaySensor,0))){
    SWIG_fail_ptr("DelaySensor_setDelay",1,SWIGTYPE_p_gsDelaySensor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setDelay(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelaySensor_setDuration(lua_State* L) {
  int SWIG_arg = 0;
  gsDelaySensor *arg1 = (gsDelaySensor *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gsDelaySensor::setDuration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsDelaySensor::setDuration",1,"gsDelaySensor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsDelaySensor::setDuration",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsDelaySensor,0))){
    SWIG_fail_ptr("DelaySensor_setDuration",1,SWIGTYPE_p_gsDelaySensor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setDuration(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelaySensor_setRepeat(lua_State* L) {
  int SWIG_arg = 0;
  gsDelaySensor *arg1 = (gsDelaySensor *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gsDelaySensor::setRepeat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsDelaySensor::setRepeat",1,"gsDelaySensor *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gsDelaySensor::setRepeat",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsDelaySensor,0))){
    SWIG_fail_ptr("DelaySensor_setRepeat",1,SWIGTYPE_p_gsDelaySensor);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setRepeat(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelaySensor_getDelay(lua_State* L) {
  int SWIG_arg = 0;
  gsDelaySensor *arg1 = (gsDelaySensor *) 0 ;
  int result;
  
  SWIG_check_num_args("gsDelaySensor::getDelay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsDelaySensor::getDelay",1,"gsDelaySensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsDelaySensor,0))){
    SWIG_fail_ptr("DelaySensor_getDelay",1,SWIGTYPE_p_gsDelaySensor);
  }
  
  result = (int)(arg1)->getDelay();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelaySensor_getDuration(lua_State* L) {
  int SWIG_arg = 0;
  gsDelaySensor *arg1 = (gsDelaySensor *) 0 ;
  int result;
  
  SWIG_check_num_args("gsDelaySensor::getDuration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsDelaySensor::getDuration",1,"gsDelaySensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsDelaySensor,0))){
    SWIG_fail_ptr("DelaySensor_getDuration",1,SWIGTYPE_p_gsDelaySensor);
  }
  
  result = (int)(arg1)->getDuration();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelaySensor_getRepeat(lua_State* L) {
  int SWIG_arg = 0;
  gsDelaySensor *arg1 = (gsDelaySensor *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsDelaySensor::getRepeat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsDelaySensor::getRepeat",1,"gsDelaySensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsDelaySensor,0))){
    SWIG_fail_ptr("DelaySensor_getRepeat",1,SWIGTYPE_p_gsDelaySensor);
  }
  
  result = (bool)(arg1)->getRepeat();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DelaySensor(void *obj) {
gsDelaySensor *arg1 = (gsDelaySensor *) obj;
delete arg1;
}
static swig_lua_method swig_gsDelaySensor_methods[] = {
    {"setDelay", _wrap_DelaySensor_setDelay}, 
    {"setDuration", _wrap_DelaySensor_setDuration}, 
    {"setRepeat", _wrap_DelaySensor_setRepeat}, 
    {"getDelay", _wrap_DelaySensor_getDelay}, 
    {"getDuration", _wrap_DelaySensor_getDuration}, 
    {"getRepeat", _wrap_DelaySensor_getRepeat}, 
    {0,0}
};
static swig_lua_attribute swig_gsDelaySensor_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsDelaySensor_bases[] = {0,0};
static const char *swig_gsDelaySensor_base_names[] = {"gsSensor *",0};
static swig_lua_class _wrap_class_gsDelaySensor = { "DelaySensor", &SWIGTYPE_p_gsDelaySensor,_wrap_new_DelaySensor, swig_delete_DelaySensor, swig_gsDelaySensor_methods, swig_gsDelaySensor_attributes, swig_gsDelaySensor_bases, swig_gsDelaySensor_base_names };

static int _wrap_new_KeyboardSensor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsKeyboardSensor *result = 0 ;
  
  SWIG_check_num_args("gsKeyboardSensor::gsKeyboardSensor",0,0)
  result = (gsKeyboardSensor *)new gsKeyboardSensor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsKeyboardSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_KeyboardSensor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gsKeyboardSensor *result = 0 ;
  
  SWIG_check_num_args("gsKeyboardSensor::gsKeyboardSensor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsKeyboardSensor::gsKeyboardSensor",1,"gsLogicObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsKeyboardSensor::gsKeyboardSensor",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_KeyboardSensor",1,SWIGTYPE_p_gsLogicObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gsKeyboardSensor *)new gsKeyboardSensor(arg1,(gkString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsKeyboardSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_KeyboardSensor__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gsKeyboardSensor *result = 0 ;
  
  SWIG_check_num_args("gsKeyboardSensor::gsKeyboardSensor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsKeyboardSensor::gsKeyboardSensor",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_KeyboardSensor",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (gsKeyboardSensor *)new gsKeyboardSensor(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsKeyboardSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_KeyboardSensor(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_KeyboardSensor__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_KeyboardSensor__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_KeyboardSensor__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_KeyboardSensor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsKeyboardSensor::gsKeyboardSensor()\n"
    "    gsKeyboardSensor::gsKeyboardSensor(gsLogicObject *,gkString const &)\n"
    "    gsKeyboardSensor::gsKeyboardSensor(gsLogicObject *)\n");
  lua_error(L);return 0;
}


static int _wrap_KeyboardSensor_setKey(lua_State* L) {
  int SWIG_arg = 0;
  gsKeyboardSensor *arg1 = (gsKeyboardSensor *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gsKeyboardSensor::setKey",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsKeyboardSensor::setKey",1,"gsKeyboardSensor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsKeyboardSensor::setKey",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsKeyboardSensor,0))){
    SWIG_fail_ptr("KeyboardSensor_setKey",1,SWIGTYPE_p_gsKeyboardSensor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setKey(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KeyboardSensor_setModifier0(lua_State* L) {
  int SWIG_arg = 0;
  gsKeyboardSensor *arg1 = (gsKeyboardSensor *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gsKeyboardSensor::setModifier0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsKeyboardSensor::setModifier0",1,"gsKeyboardSensor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsKeyboardSensor::setModifier0",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsKeyboardSensor,0))){
    SWIG_fail_ptr("KeyboardSensor_setModifier0",1,SWIGTYPE_p_gsKeyboardSensor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setModifier0(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KeyboardSensor_setModifier1(lua_State* L) {
  int SWIG_arg = 0;
  gsKeyboardSensor *arg1 = (gsKeyboardSensor *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gsKeyboardSensor::setModifier1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsKeyboardSensor::setModifier1",1,"gsKeyboardSensor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsKeyboardSensor::setModifier1",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsKeyboardSensor,0))){
    SWIG_fail_ptr("KeyboardSensor_setModifier1",1,SWIGTYPE_p_gsKeyboardSensor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setModifier1(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KeyboardSensor_setAllKeys(lua_State* L) {
  int SWIG_arg = 0;
  gsKeyboardSensor *arg1 = (gsKeyboardSensor *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gsKeyboardSensor::setAllKeys",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsKeyboardSensor::setAllKeys",1,"gsKeyboardSensor *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gsKeyboardSensor::setAllKeys",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsKeyboardSensor,0))){
    SWIG_fail_ptr("KeyboardSensor_setAllKeys",1,SWIGTYPE_p_gsKeyboardSensor);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setAllKeys(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KeyboardSensor_getKey(lua_State* L) {
  int SWIG_arg = 0;
  gsKeyboardSensor *arg1 = (gsKeyboardSensor *) 0 ;
  int result;
  
  SWIG_check_num_args("gsKeyboardSensor::getKey",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsKeyboardSensor::getKey",1,"gsKeyboardSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsKeyboardSensor,0))){
    SWIG_fail_ptr("KeyboardSensor_getKey",1,SWIGTYPE_p_gsKeyboardSensor);
  }
  
  result = (int)(arg1)->getKey();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KeyboardSensor_getModifier0(lua_State* L) {
  int SWIG_arg = 0;
  gsKeyboardSensor *arg1 = (gsKeyboardSensor *) 0 ;
  int result;
  
  SWIG_check_num_args("gsKeyboardSensor::getModifier0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsKeyboardSensor::getModifier0",1,"gsKeyboardSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsKeyboardSensor,0))){
    SWIG_fail_ptr("KeyboardSensor_getModifier0",1,SWIGTYPE_p_gsKeyboardSensor);
  }
  
  result = (int)(arg1)->getModifier0();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KeyboardSensor_getModifier1(lua_State* L) {
  int SWIG_arg = 0;
  gsKeyboardSensor *arg1 = (gsKeyboardSensor *) 0 ;
  int result;
  
  SWIG_check_num_args("gsKeyboardSensor::getModifier1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsKeyboardSensor::getModifier1",1,"gsKeyboardSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsKeyboardSensor,0))){
    SWIG_fail_ptr("KeyboardSensor_getModifier1",1,SWIGTYPE_p_gsKeyboardSensor);
  }
  
  result = (int)(arg1)->getModifier1();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KeyboardSensor_getAllKeys(lua_State* L) {
  int SWIG_arg = 0;
  gsKeyboardSensor *arg1 = (gsKeyboardSensor *) 0 ;
  int result;
  
  SWIG_check_num_args("gsKeyboardSensor::getAllKeys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsKeyboardSensor::getAllKeys",1,"gsKeyboardSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsKeyboardSensor,0))){
    SWIG_fail_ptr("KeyboardSensor_getAllKeys",1,SWIGTYPE_p_gsKeyboardSensor);
  }
  
  result = (int)(arg1)->getAllKeys();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_KeyboardSensor(void *obj) {
gsKeyboardSensor *arg1 = (gsKeyboardSensor *) obj;
delete arg1;
}
static swig_lua_method swig_gsKeyboardSensor_methods[] = {
    {"setKey", _wrap_KeyboardSensor_setKey}, 
    {"setModifier0", _wrap_KeyboardSensor_setModifier0}, 
    {"setModifier1", _wrap_KeyboardSensor_setModifier1}, 
    {"setAllKeys", _wrap_KeyboardSensor_setAllKeys}, 
    {"getKey", _wrap_KeyboardSensor_getKey}, 
    {"getModifier0", _wrap_KeyboardSensor_getModifier0}, 
    {"getModifier1", _wrap_KeyboardSensor_getModifier1}, 
    {"getAllKeys", _wrap_KeyboardSensor_getAllKeys}, 
    {0,0}
};
static swig_lua_attribute swig_gsKeyboardSensor_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsKeyboardSensor_bases[] = {0,0};
static const char *swig_gsKeyboardSensor_base_names[] = {"gsSensor *",0};
static swig_lua_class _wrap_class_gsKeyboardSensor = { "KeyboardSensor", &SWIGTYPE_p_gsKeyboardSensor,_wrap_new_KeyboardSensor, swig_delete_KeyboardSensor, swig_gsKeyboardSensor_methods, swig_gsKeyboardSensor_attributes, swig_gsKeyboardSensor_bases, swig_gsKeyboardSensor_base_names };

static int _wrap_new_MessageSensor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsMessageSensor *result = 0 ;
  
  SWIG_check_num_args("gsMessageSensor::gsMessageSensor",0,0)
  result = (gsMessageSensor *)new gsMessageSensor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsMessageSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MessageSensor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gsMessageSensor *result = 0 ;
  
  SWIG_check_num_args("gsMessageSensor::gsMessageSensor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMessageSensor::gsMessageSensor",1,"gsLogicObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsMessageSensor::gsMessageSensor",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_MessageSensor",1,SWIGTYPE_p_gsLogicObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gsMessageSensor *)new gsMessageSensor(arg1,(gkString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsMessageSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MessageSensor__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gsMessageSensor *result = 0 ;
  
  SWIG_check_num_args("gsMessageSensor::gsMessageSensor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMessageSensor::gsMessageSensor",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_MessageSensor",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (gsMessageSensor *)new gsMessageSensor(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsMessageSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MessageSensor(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_MessageSensor__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_MessageSensor__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_MessageSensor__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_MessageSensor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsMessageSensor::gsMessageSensor()\n"
    "    gsMessageSensor::gsMessageSensor(gsLogicObject *,gkString const &)\n"
    "    gsMessageSensor::gsMessageSensor(gsLogicObject *)\n");
  lua_error(L);return 0;
}


static int _wrap_MessageSensor_setSubject(lua_State* L) {
  int SWIG_arg = 0;
  gsMessageSensor *arg1 = (gsMessageSensor *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsMessageSensor::setSubject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMessageSensor::setSubject",1,"gsMessageSensor *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsMessageSensor::setSubject",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMessageSensor,0))){
    SWIG_fail_ptr("MessageSensor_setSubject",1,SWIGTYPE_p_gsMessageSensor);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setSubject((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MessageSensor_getSubject(lua_State* L) {
  int SWIG_arg = 0;
  gsMessageSensor *arg1 = (gsMessageSensor *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsMessageSensor::getSubject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMessageSensor::getSubject",1,"gsMessageSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMessageSensor,0))){
    SWIG_fail_ptr("MessageSensor_getSubject",1,SWIGTYPE_p_gsMessageSensor);
  }
  
  result = (arg1)->getSubject();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MessageSensor(void *obj) {
gsMessageSensor *arg1 = (gsMessageSensor *) obj;
delete arg1;
}
static swig_lua_method swig_gsMessageSensor_methods[] = {
    {"setSubject", _wrap_MessageSensor_setSubject}, 
    {"getSubject", _wrap_MessageSensor_getSubject}, 
    {0,0}
};
static swig_lua_attribute swig_gsMessageSensor_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsMessageSensor_bases[] = {0,0};
static const char *swig_gsMessageSensor_base_names[] = {"gsSensor *",0};
static swig_lua_class _wrap_class_gsMessageSensor = { "MessageSensor", &SWIGTYPE_p_gsMessageSensor,_wrap_new_MessageSensor, swig_delete_MessageSensor, swig_gsMessageSensor_methods, swig_gsMessageSensor_attributes, swig_gsMessageSensor_bases, swig_gsMessageSensor_base_names };

static int _wrap_new_MouseSensor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsMouseSensor *result = 0 ;
  
  SWIG_check_num_args("gsMouseSensor::gsMouseSensor",0,0)
  result = (gsMouseSensor *)new gsMouseSensor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsMouseSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MouseSensor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gsMouseSensor *result = 0 ;
  
  SWIG_check_num_args("gsMouseSensor::gsMouseSensor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMouseSensor::gsMouseSensor",1,"gsLogicObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsMouseSensor::gsMouseSensor",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_MouseSensor",1,SWIGTYPE_p_gsLogicObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gsMouseSensor *)new gsMouseSensor(arg1,(gkString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsMouseSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MouseSensor__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gsMouseSensor *result = 0 ;
  
  SWIG_check_num_args("gsMouseSensor::gsMouseSensor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMouseSensor::gsMouseSensor",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_MouseSensor",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (gsMouseSensor *)new gsMouseSensor(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsMouseSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MouseSensor(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_MouseSensor__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_MouseSensor__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_MouseSensor__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_MouseSensor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsMouseSensor::gsMouseSensor()\n"
    "    gsMouseSensor::gsMouseSensor(gsLogicObject *,gkString const &)\n"
    "    gsMouseSensor::gsMouseSensor(gsLogicObject *)\n");
  lua_error(L);return 0;
}


static int _wrap_MouseSensor_setType(lua_State* L) {
  int SWIG_arg = 0;
  gsMouseSensor *arg1 = (gsMouseSensor *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gsMouseSensor::setType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMouseSensor::setType",1,"gsMouseSensor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsMouseSensor::setType",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMouseSensor,0))){
    SWIG_fail_ptr("MouseSensor_setType",1,SWIGTYPE_p_gsMouseSensor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MouseSensor_getType(lua_State* L) {
  int SWIG_arg = 0;
  gsMouseSensor *arg1 = (gsMouseSensor *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("gsMouseSensor::getType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMouseSensor::getType",1,"gsMouseSensor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsMouseSensor::getType",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMouseSensor,0))){
    SWIG_fail_ptr("MouseSensor_getType",1,SWIGTYPE_p_gsMouseSensor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->getType(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MouseSensor(void *obj) {
gsMouseSensor *arg1 = (gsMouseSensor *) obj;
delete arg1;
}
static swig_lua_method swig_gsMouseSensor_methods[] = {
    {"setType", _wrap_MouseSensor_setType}, 
    {"getType", _wrap_MouseSensor_getType}, 
    {0,0}
};
static swig_lua_attribute swig_gsMouseSensor_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsMouseSensor_bases[] = {0,0};
static const char *swig_gsMouseSensor_base_names[] = {"gsSensor *",0};
static swig_lua_class _wrap_class_gsMouseSensor = { "MouseSensor", &SWIGTYPE_p_gsMouseSensor,_wrap_new_MouseSensor, swig_delete_MouseSensor, swig_gsMouseSensor_methods, swig_gsMouseSensor_attributes, swig_gsMouseSensor_bases, swig_gsMouseSensor_base_names };

static int _wrap_new_NearSensor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsNearSensor *result = 0 ;
  
  SWIG_check_num_args("gsNearSensor::gsNearSensor",0,0)
  result = (gsNearSensor *)new gsNearSensor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsNearSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NearSensor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gsNearSensor *result = 0 ;
  
  SWIG_check_num_args("gsNearSensor::gsNearSensor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsNearSensor::gsNearSensor",1,"gsLogicObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsNearSensor::gsNearSensor",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_NearSensor",1,SWIGTYPE_p_gsLogicObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gsNearSensor *)new gsNearSensor(arg1,(gkString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsNearSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NearSensor__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gsNearSensor *result = 0 ;
  
  SWIG_check_num_args("gsNearSensor::gsNearSensor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsNearSensor::gsNearSensor",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_NearSensor",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (gsNearSensor *)new gsNearSensor(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsNearSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NearSensor(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_NearSensor__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_NearSensor__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_NearSensor__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_NearSensor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsNearSensor::gsNearSensor()\n"
    "    gsNearSensor::gsNearSensor(gsLogicObject *,gkString const &)\n"
    "    gsNearSensor::gsNearSensor(gsLogicObject *)\n");
  lua_error(L);return 0;
}


static int _wrap_NearSensor_setRange(lua_State* L) {
  int SWIG_arg = 0;
  gsNearSensor *arg1 = (gsNearSensor *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsNearSensor::setRange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsNearSensor::setRange",1,"gsNearSensor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsNearSensor::setRange",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsNearSensor,0))){
    SWIG_fail_ptr("NearSensor_setRange",1,SWIGTYPE_p_gsNearSensor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setRange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NearSensor_setResetRange(lua_State* L) {
  int SWIG_arg = 0;
  gsNearSensor *arg1 = (gsNearSensor *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsNearSensor::setResetRange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsNearSensor::setResetRange",1,"gsNearSensor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsNearSensor::setResetRange",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsNearSensor,0))){
    SWIG_fail_ptr("NearSensor_setResetRange",1,SWIGTYPE_p_gsNearSensor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setResetRange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NearSensor_setMaterial(lua_State* L) {
  int SWIG_arg = 0;
  gsNearSensor *arg1 = (gsNearSensor *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsNearSensor::setMaterial",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsNearSensor::setMaterial",1,"gsNearSensor *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsNearSensor::setMaterial",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsNearSensor,0))){
    SWIG_fail_ptr("NearSensor_setMaterial",1,SWIGTYPE_p_gsNearSensor);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setMaterial((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NearSensor_setProperty(lua_State* L) {
  int SWIG_arg = 0;
  gsNearSensor *arg1 = (gsNearSensor *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsNearSensor::setProperty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsNearSensor::setProperty",1,"gsNearSensor *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsNearSensor::setProperty",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsNearSensor,0))){
    SWIG_fail_ptr("NearSensor_setProperty",1,SWIGTYPE_p_gsNearSensor);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setProperty((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NearSensor_getRange(lua_State* L) {
  int SWIG_arg = 0;
  gsNearSensor *arg1 = (gsNearSensor *) 0 ;
  float result;
  
  SWIG_check_num_args("gsNearSensor::getRange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsNearSensor::getRange",1,"gsNearSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsNearSensor,0))){
    SWIG_fail_ptr("NearSensor_getRange",1,SWIGTYPE_p_gsNearSensor);
  }
  
  result = (float)(arg1)->getRange();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NearSensor_getResetRange(lua_State* L) {
  int SWIG_arg = 0;
  gsNearSensor *arg1 = (gsNearSensor *) 0 ;
  float result;
  
  SWIG_check_num_args("gsNearSensor::getResetRange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsNearSensor::getResetRange",1,"gsNearSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsNearSensor,0))){
    SWIG_fail_ptr("NearSensor_getResetRange",1,SWIGTYPE_p_gsNearSensor);
  }
  
  result = (float)(arg1)->getResetRange();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NearSensor_getMaterial(lua_State* L) {
  int SWIG_arg = 0;
  gsNearSensor *arg1 = (gsNearSensor *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsNearSensor::getMaterial",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsNearSensor::getMaterial",1,"gsNearSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsNearSensor,0))){
    SWIG_fail_ptr("NearSensor_getMaterial",1,SWIGTYPE_p_gsNearSensor);
  }
  
  result = (arg1)->getMaterial();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NearSensor_getProperty(lua_State* L) {
  int SWIG_arg = 0;
  gsNearSensor *arg1 = (gsNearSensor *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsNearSensor::getProperty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsNearSensor::getProperty",1,"gsNearSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsNearSensor,0))){
    SWIG_fail_ptr("NearSensor_getProperty",1,SWIGTYPE_p_gsNearSensor);
  }
  
  result = (arg1)->getProperty();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NearSensor_getNearObjectCount(lua_State* L) {
  int SWIG_arg = 0;
  gsNearSensor *arg1 = (gsNearSensor *) 0 ;
  int result;
  
  SWIG_check_num_args("gsNearSensor::getNearObjectCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsNearSensor::getNearObjectCount",1,"gsNearSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsNearSensor,0))){
    SWIG_fail_ptr("NearSensor_getNearObjectCount",1,SWIGTYPE_p_gsNearSensor);
  }
  
  result = (int)(arg1)->getNearObjectCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NearSensor_getNearObject(lua_State* L) {
  int SWIG_arg = 0;
  gsNearSensor *arg1 = (gsNearSensor *) 0 ;
  int arg2 ;
  gkGameObject *result = 0 ;
  
  SWIG_check_num_args("gsNearSensor::getNearObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsNearSensor::getNearObject",1,"gsNearSensor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsNearSensor::getNearObject",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsNearSensor,0))){
    SWIG_fail_ptr("NearSensor_getNearObject",1,SWIGTYPE_p_gsNearSensor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (gkGameObject *)(arg1)->getNearObject(arg2);
  if (result) {
    SWIG_arg += gsWrapGameObject(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NearSensor(void *obj) {
gsNearSensor *arg1 = (gsNearSensor *) obj;
delete arg1;
}
static swig_lua_method swig_gsNearSensor_methods[] = {
    {"setRange", _wrap_NearSensor_setRange}, 
    {"setResetRange", _wrap_NearSensor_setResetRange}, 
    {"setMaterial", _wrap_NearSensor_setMaterial}, 
    {"setProperty", _wrap_NearSensor_setProperty}, 
    {"getRange", _wrap_NearSensor_getRange}, 
    {"getResetRange", _wrap_NearSensor_getResetRange}, 
    {"getMaterial", _wrap_NearSensor_getMaterial}, 
    {"getProperty", _wrap_NearSensor_getProperty}, 
    {"getNearObjectCount", _wrap_NearSensor_getNearObjectCount}, 
    {"getNearObject", _wrap_NearSensor_getNearObject}, 
    {0,0}
};
static swig_lua_attribute swig_gsNearSensor_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsNearSensor_bases[] = {0,0};
static const char *swig_gsNearSensor_base_names[] = {"gsSensor *",0};
static swig_lua_class _wrap_class_gsNearSensor = { "NearSensor", &SWIGTYPE_p_gsNearSensor,_wrap_new_NearSensor, swig_delete_NearSensor, swig_gsNearSensor_methods, swig_gsNearSensor_attributes, swig_gsNearSensor_bases, swig_gsNearSensor_base_names };

static int _wrap_new_PropertySensor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsPropertySensor *result = 0 ;
  
  SWIG_check_num_args("gsPropertySensor::gsPropertySensor",0,0)
  result = (gsPropertySensor *)new gsPropertySensor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsPropertySensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PropertySensor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gsPropertySensor *result = 0 ;
  
  SWIG_check_num_args("gsPropertySensor::gsPropertySensor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsPropertySensor::gsPropertySensor",1,"gsLogicObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsPropertySensor::gsPropertySensor",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_PropertySensor",1,SWIGTYPE_p_gsLogicObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gsPropertySensor *)new gsPropertySensor(arg1,(gkString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsPropertySensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PropertySensor__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gsPropertySensor *result = 0 ;
  
  SWIG_check_num_args("gsPropertySensor::gsPropertySensor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsPropertySensor::gsPropertySensor",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_PropertySensor",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (gsPropertySensor *)new gsPropertySensor(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsPropertySensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PropertySensor(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PropertySensor__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_PropertySensor__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_PropertySensor__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_PropertySensor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsPropertySensor::gsPropertySensor()\n"
    "    gsPropertySensor::gsPropertySensor(gsLogicObject *,gkString const &)\n"
    "    gsPropertySensor::gsPropertySensor(gsLogicObject *)\n");
  lua_error(L);return 0;
}


static int _wrap_PropertySensor_setType(lua_State* L) {
  int SWIG_arg = 0;
  gsPropertySensor *arg1 = (gsPropertySensor *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gsPropertySensor::setType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsPropertySensor::setType",1,"gsPropertySensor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsPropertySensor::setType",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsPropertySensor,0))){
    SWIG_fail_ptr("PropertySensor_setType",1,SWIGTYPE_p_gsPropertySensor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PropertySensor_setPropertyName(lua_State* L) {
  int SWIG_arg = 0;
  gsPropertySensor *arg1 = (gsPropertySensor *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsPropertySensor::setPropertyName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsPropertySensor::setPropertyName",1,"gsPropertySensor *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsPropertySensor::setPropertyName",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsPropertySensor,0))){
    SWIG_fail_ptr("PropertySensor_setPropertyName",1,SWIGTYPE_p_gsPropertySensor);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setPropertyName((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PropertySensor_setValue(lua_State* L) {
  int SWIG_arg = 0;
  gsPropertySensor *arg1 = (gsPropertySensor *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsPropertySensor::setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsPropertySensor::setValue",1,"gsPropertySensor *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsPropertySensor::setValue",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsPropertySensor,0))){
    SWIG_fail_ptr("PropertySensor_setValue",1,SWIGTYPE_p_gsPropertySensor);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setValue((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PropertySensor_getType(lua_State* L) {
  int SWIG_arg = 0;
  gsPropertySensor *arg1 = (gsPropertySensor *) 0 ;
  int result;
  
  SWIG_check_num_args("gsPropertySensor::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsPropertySensor::getType",1,"gsPropertySensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsPropertySensor,0))){
    SWIG_fail_ptr("PropertySensor_getType",1,SWIGTYPE_p_gsPropertySensor);
  }
  
  result = (int)(arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PropertySensor_getPropertyName(lua_State* L) {
  int SWIG_arg = 0;
  gsPropertySensor *arg1 = (gsPropertySensor *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsPropertySensor::getPropertyName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsPropertySensor::getPropertyName",1,"gsPropertySensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsPropertySensor,0))){
    SWIG_fail_ptr("PropertySensor_getPropertyName",1,SWIGTYPE_p_gsPropertySensor);
  }
  
  result = (arg1)->getPropertyName();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PropertySensor_getValue(lua_State* L) {
  int SWIG_arg = 0;
  gsPropertySensor *arg1 = (gsPropertySensor *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsPropertySensor::getValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsPropertySensor::getValue",1,"gsPropertySensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsPropertySensor,0))){
    SWIG_fail_ptr("PropertySensor_getValue",1,SWIGTYPE_p_gsPropertySensor);
  }
  
  result = (arg1)->getValue();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PropertySensor(void *obj) {
gsPropertySensor *arg1 = (gsPropertySensor *) obj;
delete arg1;
}
static swig_lua_method swig_gsPropertySensor_methods[] = {
    {"setType", _wrap_PropertySensor_setType}, 
    {"setPropertyName", _wrap_PropertySensor_setPropertyName}, 
    {"setValue", _wrap_PropertySensor_setValue}, 
    {"getType", _wrap_PropertySensor_getType}, 
    {"getPropertyName", _wrap_PropertySensor_getPropertyName}, 
    {"getValue", _wrap_PropertySensor_getValue}, 
    {0,0}
};
static swig_lua_attribute swig_gsPropertySensor_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsPropertySensor_bases[] = {0,0};
static const char *swig_gsPropertySensor_base_names[] = {"gsSensor *",0};
static swig_lua_class _wrap_class_gsPropertySensor = { "PropertySensor", &SWIGTYPE_p_gsPropertySensor,_wrap_new_PropertySensor, swig_delete_PropertySensor, swig_gsPropertySensor_methods, swig_gsPropertySensor_attributes, swig_gsPropertySensor_bases, swig_gsPropertySensor_base_names };

static int _wrap_new_RaySensor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsRaySensor *result = 0 ;
  
  SWIG_check_num_args("gsRaySensor::gsRaySensor",0,0)
  result = (gsRaySensor *)new gsRaySensor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsRaySensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RaySensor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gsRaySensor *result = 0 ;
  
  SWIG_check_num_args("gsRaySensor::gsRaySensor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRaySensor::gsRaySensor",1,"gsLogicObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsRaySensor::gsRaySensor",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_RaySensor",1,SWIGTYPE_p_gsLogicObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gsRaySensor *)new gsRaySensor(arg1,(gkString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsRaySensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RaySensor__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gsRaySensor *result = 0 ;
  
  SWIG_check_num_args("gsRaySensor::gsRaySensor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRaySensor::gsRaySensor",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_RaySensor",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (gsRaySensor *)new gsRaySensor(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsRaySensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RaySensor(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_RaySensor__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_RaySensor__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_RaySensor__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_RaySensor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsRaySensor::gsRaySensor()\n"
    "    gsRaySensor::gsRaySensor(gsLogicObject *,gkString const &)\n"
    "    gsRaySensor::gsRaySensor(gsLogicObject *)\n");
  lua_error(L);return 0;
}


static int _wrap_RaySensor_setRange(lua_State* L) {
  int SWIG_arg = 0;
  gsRaySensor *arg1 = (gsRaySensor *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsRaySensor::setRange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRaySensor::setRange",1,"gsRaySensor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsRaySensor::setRange",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRaySensor,0))){
    SWIG_fail_ptr("RaySensor_setRange",1,SWIGTYPE_p_gsRaySensor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setRange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RaySensor_getRange(lua_State* L) {
  int SWIG_arg = 0;
  gsRaySensor *arg1 = (gsRaySensor *) 0 ;
  float result;
  
  SWIG_check_num_args("gsRaySensor::getRange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRaySensor::getRange",1,"gsRaySensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRaySensor,0))){
    SWIG_fail_ptr("RaySensor_getRange",1,SWIGTYPE_p_gsRaySensor);
  }
  
  result = (float)(arg1)->getRange();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RaySensor_setAxis(lua_State* L) {
  int SWIG_arg = 0;
  gsRaySensor *arg1 = (gsRaySensor *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gsRaySensor::setAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRaySensor::setAxis",1,"gsRaySensor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsRaySensor::setAxis",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRaySensor,0))){
    SWIG_fail_ptr("RaySensor_setAxis",1,SWIGTYPE_p_gsRaySensor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setAxis(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RaySensor_getAxis(lua_State* L) {
  int SWIG_arg = 0;
  gsRaySensor *arg1 = (gsRaySensor *) 0 ;
  int result;
  
  SWIG_check_num_args("gsRaySensor::getAxis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRaySensor::getAxis",1,"gsRaySensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRaySensor,0))){
    SWIG_fail_ptr("RaySensor_getAxis",1,SWIGTYPE_p_gsRaySensor);
  }
  
  result = (int)(arg1)->getAxis();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RaySensor_setMaterial(lua_State* L) {
  int SWIG_arg = 0;
  gsRaySensor *arg1 = (gsRaySensor *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsRaySensor::setMaterial",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRaySensor::setMaterial",1,"gsRaySensor *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsRaySensor::setMaterial",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRaySensor,0))){
    SWIG_fail_ptr("RaySensor_setMaterial",1,SWIGTYPE_p_gsRaySensor);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setMaterial((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RaySensor_getMaterial(lua_State* L) {
  int SWIG_arg = 0;
  gsRaySensor *arg1 = (gsRaySensor *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsRaySensor::getMaterial",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRaySensor::getMaterial",1,"gsRaySensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRaySensor,0))){
    SWIG_fail_ptr("RaySensor_getMaterial",1,SWIGTYPE_p_gsRaySensor);
  }
  
  result = (arg1)->getMaterial();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RaySensor_setProperty(lua_State* L) {
  int SWIG_arg = 0;
  gsRaySensor *arg1 = (gsRaySensor *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsRaySensor::setProperty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRaySensor::setProperty",1,"gsRaySensor *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsRaySensor::setProperty",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRaySensor,0))){
    SWIG_fail_ptr("RaySensor_setProperty",1,SWIGTYPE_p_gsRaySensor);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setProperty((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RaySensor_getProperty(lua_State* L) {
  int SWIG_arg = 0;
  gsRaySensor *arg1 = (gsRaySensor *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsRaySensor::getProperty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRaySensor::getProperty",1,"gsRaySensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRaySensor,0))){
    SWIG_fail_ptr("RaySensor_getProperty",1,SWIGTYPE_p_gsRaySensor);
  }
  
  result = (arg1)->getProperty();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RaySensor(void *obj) {
gsRaySensor *arg1 = (gsRaySensor *) obj;
delete arg1;
}
static swig_lua_method swig_gsRaySensor_methods[] = {
    {"setRange", _wrap_RaySensor_setRange}, 
    {"getRange", _wrap_RaySensor_getRange}, 
    {"setAxis", _wrap_RaySensor_setAxis}, 
    {"getAxis", _wrap_RaySensor_getAxis}, 
    {"setMaterial", _wrap_RaySensor_setMaterial}, 
    {"getMaterial", _wrap_RaySensor_getMaterial}, 
    {"setProperty", _wrap_RaySensor_setProperty}, 
    {"getProperty", _wrap_RaySensor_getProperty}, 
    {0,0}
};
static swig_lua_attribute swig_gsRaySensor_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsRaySensor_bases[] = {0,0};
static const char *swig_gsRaySensor_base_names[] = {"gsSensor *",0};
static swig_lua_class _wrap_class_gsRaySensor = { "RaySensor", &SWIGTYPE_p_gsRaySensor,_wrap_new_RaySensor, swig_delete_RaySensor, swig_gsRaySensor_methods, swig_gsRaySensor_attributes, swig_gsRaySensor_bases, swig_gsRaySensor_base_names };

static int _wrap_new_RadarSensor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsRadarSensor *result = 0 ;
  
  SWIG_check_num_args("gsRadarSensor::gsRadarSensor",0,0)
  result = (gsRadarSensor *)new gsRadarSensor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsRadarSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RadarSensor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gsRadarSensor *result = 0 ;
  
  SWIG_check_num_args("gsRadarSensor::gsRadarSensor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRadarSensor::gsRadarSensor",1,"gsLogicObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsRadarSensor::gsRadarSensor",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_RadarSensor",1,SWIGTYPE_p_gsLogicObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gsRadarSensor *)new gsRadarSensor(arg1,(gkString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsRadarSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RadarSensor__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gsRadarSensor *result = 0 ;
  
  SWIG_check_num_args("gsRadarSensor::gsRadarSensor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRadarSensor::gsRadarSensor",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_RadarSensor",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (gsRadarSensor *)new gsRadarSensor(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsRadarSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RadarSensor(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_RadarSensor__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_RadarSensor__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_RadarSensor__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_RadarSensor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsRadarSensor::gsRadarSensor()\n"
    "    gsRadarSensor::gsRadarSensor(gsLogicObject *,gkString const &)\n"
    "    gsRadarSensor::gsRadarSensor(gsLogicObject *)\n");
  lua_error(L);return 0;
}


static int _wrap_RadarSensor_setRange(lua_State* L) {
  int SWIG_arg = 0;
  gsRadarSensor *arg1 = (gsRadarSensor *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsRadarSensor::setRange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRadarSensor::setRange",1,"gsRadarSensor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsRadarSensor::setRange",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRadarSensor,0))){
    SWIG_fail_ptr("RadarSensor_setRange",1,SWIGTYPE_p_gsRadarSensor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setRange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadarSensor_getRange(lua_State* L) {
  int SWIG_arg = 0;
  gsRadarSensor *arg1 = (gsRadarSensor *) 0 ;
  float result;
  
  SWIG_check_num_args("gsRadarSensor::getRange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRadarSensor::getRange",1,"gsRadarSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRadarSensor,0))){
    SWIG_fail_ptr("RadarSensor_getRange",1,SWIGTYPE_p_gsRadarSensor);
  }
  
  result = (float)(arg1)->getRange();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadarSensor_setAxis(lua_State* L) {
  int SWIG_arg = 0;
  gsRadarSensor *arg1 = (gsRadarSensor *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gsRadarSensor::setAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRadarSensor::setAxis",1,"gsRadarSensor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsRadarSensor::setAxis",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRadarSensor,0))){
    SWIG_fail_ptr("RadarSensor_setAxis",1,SWIGTYPE_p_gsRadarSensor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setAxis(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadarSensor_getAxis(lua_State* L) {
  int SWIG_arg = 0;
  gsRadarSensor *arg1 = (gsRadarSensor *) 0 ;
  int result;
  
  SWIG_check_num_args("gsRadarSensor::getAxis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRadarSensor::getAxis",1,"gsRadarSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRadarSensor,0))){
    SWIG_fail_ptr("RadarSensor_getAxis",1,SWIGTYPE_p_gsRadarSensor);
  }
  
  result = (int)(arg1)->getAxis();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadarSensor_setMaterial(lua_State* L) {
  int SWIG_arg = 0;
  gsRadarSensor *arg1 = (gsRadarSensor *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsRadarSensor::setMaterial",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRadarSensor::setMaterial",1,"gsRadarSensor *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsRadarSensor::setMaterial",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRadarSensor,0))){
    SWIG_fail_ptr("RadarSensor_setMaterial",1,SWIGTYPE_p_gsRadarSensor);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setMaterial((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadarSensor_getMaterial(lua_State* L) {
  int SWIG_arg = 0;
  gsRadarSensor *arg1 = (gsRadarSensor *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsRadarSensor::getMaterial",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRadarSensor::getMaterial",1,"gsRadarSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRadarSensor,0))){
    SWIG_fail_ptr("RadarSensor_getMaterial",1,SWIGTYPE_p_gsRadarSensor);
  }
  
  result = (arg1)->getMaterial();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadarSensor_setProperty(lua_State* L) {
  int SWIG_arg = 0;
  gsRadarSensor *arg1 = (gsRadarSensor *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsRadarSensor::setProperty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRadarSensor::setProperty",1,"gsRadarSensor *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsRadarSensor::setProperty",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRadarSensor,0))){
    SWIG_fail_ptr("RadarSensor_setProperty",1,SWIGTYPE_p_gsRadarSensor);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setProperty((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadarSensor_getProperty(lua_State* L) {
  int SWIG_arg = 0;
  gsRadarSensor *arg1 = (gsRadarSensor *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsRadarSensor::getProperty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRadarSensor::getProperty",1,"gsRadarSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRadarSensor,0))){
    SWIG_fail_ptr("RadarSensor_getProperty",1,SWIGTYPE_p_gsRadarSensor);
  }
  
  result = (arg1)->getProperty();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadarSensor_setAngle(lua_State* L) {
  int SWIG_arg = 0;
  gsRadarSensor *arg1 = (gsRadarSensor *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsRadarSensor::setAngle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRadarSensor::setAngle",1,"gsRadarSensor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsRadarSensor::setAngle",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRadarSensor,0))){
    SWIG_fail_ptr("RadarSensor_setAngle",1,SWIGTYPE_p_gsRadarSensor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setAngle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadarSensor_getAngle(lua_State* L) {
  int SWIG_arg = 0;
  gsRadarSensor *arg1 = (gsRadarSensor *) 0 ;
  float result;
  
  SWIG_check_num_args("gsRadarSensor::getAngle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRadarSensor::getAngle",1,"gsRadarSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRadarSensor,0))){
    SWIG_fail_ptr("RadarSensor_getAngle",1,SWIGTYPE_p_gsRadarSensor);
  }
  
  result = (float)(arg1)->getAngle();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RadarSensor(void *obj) {
gsRadarSensor *arg1 = (gsRadarSensor *) obj;
delete arg1;
}
static swig_lua_method swig_gsRadarSensor_methods[] = {
    {"setRange", _wrap_RadarSensor_setRange}, 
    {"getRange", _wrap_RadarSensor_getRange}, 
    {"setAxis", _wrap_RadarSensor_setAxis}, 
    {"getAxis", _wrap_RadarSensor_getAxis}, 
    {"setMaterial", _wrap_RadarSensor_setMaterial}, 
    {"getMaterial", _wrap_RadarSensor_getMaterial}, 
    {"setProperty", _wrap_RadarSensor_setProperty}, 
    {"getProperty", _wrap_RadarSensor_getProperty}, 
    {"setAngle", _wrap_RadarSensor_setAngle}, 
    {"getAngle", _wrap_RadarSensor_getAngle}, 
    {0,0}
};
static swig_lua_attribute swig_gsRadarSensor_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsRadarSensor_bases[] = {0,0};
static const char *swig_gsRadarSensor_base_names[] = {"gsSensor *",0};
static swig_lua_class _wrap_class_gsRadarSensor = { "RadarSensor", &SWIGTYPE_p_gsRadarSensor,_wrap_new_RadarSensor, swig_delete_RadarSensor, swig_gsRadarSensor_methods, swig_gsRadarSensor_attributes, swig_gsRadarSensor_bases, swig_gsRadarSensor_base_names };

static int _wrap_new_RandomSensor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsRandomSensor *result = 0 ;
  
  SWIG_check_num_args("gsRandomSensor::gsRandomSensor",0,0)
  result = (gsRandomSensor *)new gsRandomSensor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsRandomSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RandomSensor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gsRandomSensor *result = 0 ;
  
  SWIG_check_num_args("gsRandomSensor::gsRandomSensor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRandomSensor::gsRandomSensor",1,"gsLogicObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsRandomSensor::gsRandomSensor",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_RandomSensor",1,SWIGTYPE_p_gsLogicObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gsRandomSensor *)new gsRandomSensor(arg1,(gkString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsRandomSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RandomSensor__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gsRandomSensor *result = 0 ;
  
  SWIG_check_num_args("gsRandomSensor::gsRandomSensor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRandomSensor::gsRandomSensor",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_RandomSensor",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (gsRandomSensor *)new gsRandomSensor(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsRandomSensor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RandomSensor(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_RandomSensor__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_RandomSensor__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_RandomSensor__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_RandomSensor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsRandomSensor::gsRandomSensor()\n"
    "    gsRandomSensor::gsRandomSensor(gsLogicObject *,gkString const &)\n"
    "    gsRandomSensor::gsRandomSensor(gsLogicObject *)\n");
  lua_error(L);return 0;
}


static int _wrap_RandomSensor_setSeed(lua_State* L) {
  int SWIG_arg = 0;
  gsRandomSensor *arg1 = (gsRandomSensor *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gsRandomSensor::setSeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRandomSensor::setSeed",1,"gsRandomSensor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsRandomSensor::setSeed",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRandomSensor,0))){
    SWIG_fail_ptr("RandomSensor_setSeed",1,SWIGTYPE_p_gsRandomSensor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setSeed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomSensor_getSeed(lua_State* L) {
  int SWIG_arg = 0;
  gsRandomSensor *arg1 = (gsRandomSensor *) 0 ;
  int result;
  
  SWIG_check_num_args("gsRandomSensor::getSeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRandomSensor::getSeed",1,"gsRandomSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRandomSensor,0))){
    SWIG_fail_ptr("RandomSensor_getSeed",1,SWIGTYPE_p_gsRandomSensor);
  }
  
  result = (int)(arg1)->getSeed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RandomSensor(void *obj) {
gsRandomSensor *arg1 = (gsRandomSensor *) obj;
delete arg1;
}
static swig_lua_method swig_gsRandomSensor_methods[] = {
    {"setSeed", _wrap_RandomSensor_setSeed}, 
    {"getSeed", _wrap_RandomSensor_getSeed}, 
    {0,0}
};
static swig_lua_attribute swig_gsRandomSensor_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsRandomSensor_bases[] = {0,0};
static const char *swig_gsRandomSensor_base_names[] = {"gsSensor *",0};
static swig_lua_class _wrap_class_gsRandomSensor = { "RandomSensor", &SWIGTYPE_p_gsRandomSensor,_wrap_new_RandomSensor, swig_delete_RandomSensor, swig_gsRandomSensor_methods, swig_gsRandomSensor_attributes, swig_gsRandomSensor_bases, swig_gsRandomSensor_base_names };

static int _wrap_new_Controller(lua_State* L) {
  int SWIG_arg = 0;
  gsController *result = 0 ;
  
  SWIG_check_num_args("gsController::gsController",0,0)
  result = (gsController *)new gsController();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsController,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Controller_link__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsController *arg1 = (gsController *) 0 ;
  gsSensor *arg2 = (gsSensor *) 0 ;
  
  SWIG_check_num_args("gsController::link",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsController::link",1,"gsController *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gsController::link",2,"gsSensor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsController,0))){
    SWIG_fail_ptr("Controller_link",1,SWIGTYPE_p_gsController);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsSensor,0))){
    SWIG_fail_ptr("Controller_link",2,SWIGTYPE_p_gsSensor);
  }
  
  (arg1)->link(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Controller_link__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsController *arg1 = (gsController *) 0 ;
  gsActuator *arg2 = (gsActuator *) 0 ;
  
  SWIG_check_num_args("gsController::link",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsController::link",1,"gsController *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gsController::link",2,"gsActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsController,0))){
    SWIG_fail_ptr("Controller_link",1,SWIGTYPE_p_gsController);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsActuator,0))){
    SWIG_fail_ptr("Controller_link",2,SWIGTYPE_p_gsActuator);
  }
  
  (arg1)->link(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Controller_link(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsController, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gsSensor, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Controller_link__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsController, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gsActuator, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Controller_link__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Controller_link'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsController::link(gsSensor *)\n"
    "    gsController::link(gsActuator *)\n");
  lua_error(L);return 0;
}


static int _wrap_Controller_getSensor(lua_State* L) {
  int SWIG_arg = 0;
  gsController *arg1 = (gsController *) 0 ;
  gkString arg2 ;
  gkLogicSensor *result = 0 ;
  
  SWIG_check_num_args("gsController::getSensor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsController::getSensor",1,"gsController *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsController::getSensor",2,"gkString");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsController,0))){
    SWIG_fail_ptr("Controller_getSensor",1,SWIGTYPE_p_gsController);
  }
  
  
  arg2 = gkString((const char*)lua_tostring(L, 2));
  
  result = (gkLogicSensor *)(arg1)->getSensor(arg2);
  if (result) {
    SWIG_arg += gsWrapSensor(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Controller_getActuator(lua_State* L) {
  int SWIG_arg = 0;
  gsController *arg1 = (gsController *) 0 ;
  gkString arg2 ;
  gkLogicActuator *result = 0 ;
  
  SWIG_check_num_args("gsController::getActuator",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsController::getActuator",1,"gsController *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsController::getActuator",2,"gkString");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsController,0))){
    SWIG_fail_ptr("Controller_getActuator",1,SWIGTYPE_p_gsController);
  }
  
  
  arg2 = gkString((const char*)lua_tostring(L, 2));
  
  result = (gkLogicActuator *)(arg1)->getActuator(arg2);
  if (result) {
    SWIG_arg += gsWrapActuator(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Controller(void *obj) {
gsController *arg1 = (gsController *) obj;
delete arg1;
}
static swig_lua_method swig_gsController_methods[] = {
    {"link", _wrap_Controller_link}, 
    {"getSensor", _wrap_Controller_getSensor}, 
    {"getActuator", _wrap_Controller_getActuator}, 
    {0,0}
};
static swig_lua_attribute swig_gsController_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsController_bases[] = {0,0};
static const char *swig_gsController_base_names[] = {"gsBrick *",0};
static swig_lua_class _wrap_class_gsController = { "Controller", &SWIGTYPE_p_gsController,_wrap_new_Controller, swig_delete_Controller, swig_gsController_methods, swig_gsController_attributes, swig_gsController_bases, swig_gsController_base_names };

static int _wrap_new_LogicOpController__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gsLogicOpController *result = 0 ;
  
  SWIG_check_num_args("gsLogicOpController::gsLogicOpController",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsLogicOpController::gsLogicOpController",1,"gsLogicObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsLogicOpController::gsLogicOpController",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_LogicOpController",1,SWIGTYPE_p_gsLogicObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gsLogicOpController *)new gsLogicOpController(arg1,(gkString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsLogicOpController,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LogicOpController__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gsLogicOpController *result = 0 ;
  
  SWIG_check_num_args("gsLogicOpController::gsLogicOpController",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsLogicOpController::gsLogicOpController",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_LogicOpController",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (gsLogicOpController *)new gsLogicOpController(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsLogicOpController,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LogicOpController__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicOpController *result = 0 ;
  
  SWIG_check_num_args("gsLogicOpController::gsLogicOpController",0,0)
  result = (gsLogicOpController *)new gsLogicOpController();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsLogicOpController,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LogicOpController(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_LogicOpController__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_LogicOpController__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_LogicOpController__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_LogicOpController'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsLogicOpController::gsLogicOpController(gsLogicObject *,gkString const &)\n"
    "    gsLogicOpController::gsLogicOpController(gsLogicObject *)\n"
    "    gsLogicOpController::gsLogicOpController()\n");
  lua_error(L);return 0;
}


static int _wrap_LogicOpController_getOp(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicOpController *arg1 = (gsLogicOpController *) 0 ;
  int result;
  
  SWIG_check_num_args("gsLogicOpController::getOp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsLogicOpController::getOp",1,"gsLogicOpController *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicOpController,0))){
    SWIG_fail_ptr("LogicOpController_getOp",1,SWIGTYPE_p_gsLogicOpController);
  }
  
  result = (int)(arg1)->getOp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogicOpController_setOp(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicOpController *arg1 = (gsLogicOpController *) 0 ;
  gsLogicOp arg2 ;
  
  SWIG_check_num_args("gsLogicOpController::setOp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsLogicOpController::setOp",1,"gsLogicOpController *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsLogicOpController::setOp",2,"gsLogicOp");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicOpController,0))){
    SWIG_fail_ptr("LogicOpController_setOp",1,SWIGTYPE_p_gsLogicOpController);
  }
  
  arg2 = (gsLogicOp)(int)lua_tonumber(L, 2);
  (arg1)->setOp(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LogicOpController(void *obj) {
gsLogicOpController *arg1 = (gsLogicOpController *) obj;
delete arg1;
}
static swig_lua_method swig_gsLogicOpController_methods[] = {
    {"getOp", _wrap_LogicOpController_getOp}, 
    {"setOp", _wrap_LogicOpController_setOp}, 
    {0,0}
};
static swig_lua_attribute swig_gsLogicOpController_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsLogicOpController_bases[] = {0,0};
static const char *swig_gsLogicOpController_base_names[] = {"gsController *",0};
static swig_lua_class _wrap_class_gsLogicOpController = { "LogicOpController", &SWIGTYPE_p_gsLogicOpController,_wrap_new_LogicOpController, swig_delete_LogicOpController, swig_gsLogicOpController_methods, swig_gsLogicOpController_attributes, swig_gsLogicOpController_bases, swig_gsLogicOpController_base_names };

static int _wrap_new_ExpressionController__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gsExpressionController *result = 0 ;
  
  SWIG_check_num_args("gsExpressionController::gsExpressionController",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsExpressionController::gsExpressionController",1,"gsLogicObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsExpressionController::gsExpressionController",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_ExpressionController",1,SWIGTYPE_p_gsLogicObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gsExpressionController *)new gsExpressionController(arg1,(gkString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsExpressionController,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ExpressionController__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gsExpressionController *result = 0 ;
  
  SWIG_check_num_args("gsExpressionController::gsExpressionController",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsExpressionController::gsExpressionController",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_ExpressionController",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (gsExpressionController *)new gsExpressionController(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsExpressionController,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ExpressionController__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsExpressionController *result = 0 ;
  
  SWIG_check_num_args("gsExpressionController::gsExpressionController",0,0)
  result = (gsExpressionController *)new gsExpressionController();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsExpressionController,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ExpressionController(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ExpressionController__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ExpressionController__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ExpressionController__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_ExpressionController'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsExpressionController::gsExpressionController(gsLogicObject *,gkString const &)\n"
    "    gsExpressionController::gsExpressionController(gsLogicObject *)\n"
    "    gsExpressionController::gsExpressionController()\n");
  lua_error(L);return 0;
}


static int _wrap_ExpressionController_setExpression(lua_State* L) {
  int SWIG_arg = 0;
  gsExpressionController *arg1 = (gsExpressionController *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsExpressionController::setExpression",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsExpressionController::setExpression",1,"gsExpressionController *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsExpressionController::setExpression",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsExpressionController,0))){
    SWIG_fail_ptr("ExpressionController_setExpression",1,SWIGTYPE_p_gsExpressionController);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setExpression((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ExpressionController(void *obj) {
gsExpressionController *arg1 = (gsExpressionController *) obj;
delete arg1;
}
static swig_lua_method swig_gsExpressionController_methods[] = {
    {"setExpression", _wrap_ExpressionController_setExpression}, 
    {0,0}
};
static swig_lua_attribute swig_gsExpressionController_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsExpressionController_bases[] = {0,0};
static const char *swig_gsExpressionController_base_names[] = {"gsController *",0};
static swig_lua_class _wrap_class_gsExpressionController = { "ExpressionController", &SWIGTYPE_p_gsExpressionController,_wrap_new_ExpressionController, swig_delete_ExpressionController, swig_gsExpressionController_methods, swig_gsExpressionController_attributes, swig_gsExpressionController_bases, swig_gsExpressionController_base_names };

static int _wrap_new_ScriptController__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gsScriptController *result = 0 ;
  
  SWIG_check_num_args("gsScriptController::gsScriptController",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsScriptController::gsScriptController",1,"gsLogicObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsScriptController::gsScriptController",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_ScriptController",1,SWIGTYPE_p_gsLogicObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gsScriptController *)new gsScriptController(arg1,(gkString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsScriptController,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptController__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gsScriptController *result = 0 ;
  
  SWIG_check_num_args("gsScriptController::gsScriptController",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsScriptController::gsScriptController",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_ScriptController",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (gsScriptController *)new gsScriptController(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsScriptController,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptController__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsScriptController *result = 0 ;
  
  SWIG_check_num_args("gsScriptController::gsScriptController",0,0)
  result = (gsScriptController *)new gsScriptController();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsScriptController,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptController(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ScriptController__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ScriptController__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ScriptController__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_ScriptController'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsScriptController::gsScriptController(gsLogicObject *,gkString const &)\n"
    "    gsScriptController::gsScriptController(gsLogicObject *)\n"
    "    gsScriptController::gsScriptController()\n");
  lua_error(L);return 0;
}


static int _wrap_ScriptController_setScript(lua_State* L) {
  int SWIG_arg = 0;
  gsScriptController *arg1 = (gsScriptController *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsScriptController::setScript",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsScriptController::setScript",1,"gsScriptController *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsScriptController::setScript",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsScriptController,0))){
    SWIG_fail_ptr("ScriptController_setScript",1,SWIGTYPE_p_gsScriptController);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setScript((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ScriptController(void *obj) {
gsScriptController *arg1 = (gsScriptController *) obj;
delete arg1;
}
static swig_lua_method swig_gsScriptController_methods[] = {
    {"setScript", _wrap_ScriptController_setScript}, 
    {0,0}
};
static swig_lua_attribute swig_gsScriptController_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsScriptController_bases[] = {0,0};
static const char *swig_gsScriptController_base_names[] = {"gsController *",0};
static swig_lua_class _wrap_class_gsScriptController = { "ScriptController", &SWIGTYPE_p_gsScriptController,_wrap_new_ScriptController, swig_delete_ScriptController, swig_gsScriptController_methods, swig_gsScriptController_attributes, swig_gsScriptController_bases, swig_gsScriptController_base_names };

static int _wrap_getCurrentController(lua_State* L) {
  int SWIG_arg = 0;
  gsScriptController *result = 0 ;
  
  SWIG_check_num_args("getCurrentController",0,0)
  result = (gsScriptController *)getCurrentController();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsScriptController,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Actuator(lua_State* L) {
  int SWIG_arg = 0;
  gsActuator *result = 0 ;
  
  SWIG_check_num_args("gsActuator::gsActuator",0,0)
  result = (gsActuator *)new gsActuator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Actuator(void *obj) {
gsActuator *arg1 = (gsActuator *) obj;
delete arg1;
}
static swig_lua_method swig_gsActuator_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_gsActuator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsActuator_bases[] = {0,0};
static const char *swig_gsActuator_base_names[] = {"gsBrick *",0};
static swig_lua_class _wrap_class_gsActuator = { "Actuator", &SWIGTYPE_p_gsActuator,_wrap_new_Actuator, swig_delete_Actuator, swig_gsActuator_methods, swig_gsActuator_attributes, swig_gsActuator_bases, swig_gsActuator_base_names };

static int _wrap_new_ActionActuator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gsActionActuator *result = 0 ;
  
  SWIG_check_num_args("gsActionActuator::gsActionActuator",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsActionActuator::gsActionActuator",1,"gsLogicObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsActionActuator::gsActionActuator",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_ActionActuator",1,SWIGTYPE_p_gsLogicObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gsActionActuator *)new gsActionActuator(arg1,(gkString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsActionActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ActionActuator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gsActionActuator *result = 0 ;
  
  SWIG_check_num_args("gsActionActuator::gsActionActuator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsActionActuator::gsActionActuator",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_ActionActuator",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (gsActionActuator *)new gsActionActuator(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsActionActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ActionActuator__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsActionActuator *result = 0 ;
  
  SWIG_check_num_args("gsActionActuator::gsActionActuator",0,0)
  result = (gsActionActuator *)new gsActionActuator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsActionActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ActionActuator(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ActionActuator__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ActionActuator__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ActionActuator__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_ActionActuator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsActionActuator::gsActionActuator(gsLogicObject *,gkString const &)\n"
    "    gsActionActuator::gsActionActuator(gsLogicObject *)\n"
    "    gsActionActuator::gsActionActuator()\n");
  lua_error(L);return 0;
}


static int _wrap_ActionActuator_setStart(lua_State* L) {
  int SWIG_arg = 0;
  gsActionActuator *arg1 = (gsActionActuator *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gsActionActuator::setStart",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsActionActuator::setStart",1,"gsActionActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsActionActuator::setStart",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsActionActuator,0))){
    SWIG_fail_ptr("ActionActuator_setStart",1,SWIGTYPE_p_gsActionActuator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setStart(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActionActuator_setEnd(lua_State* L) {
  int SWIG_arg = 0;
  gsActionActuator *arg1 = (gsActionActuator *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gsActionActuator::setEnd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsActionActuator::setEnd",1,"gsActionActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsActionActuator::setEnd",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsActionActuator,0))){
    SWIG_fail_ptr("ActionActuator_setEnd",1,SWIGTYPE_p_gsActionActuator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setEnd(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActionActuator_setBlend(lua_State* L) {
  int SWIG_arg = 0;
  gsActionActuator *arg1 = (gsActionActuator *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gsActionActuator::setBlend",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsActionActuator::setBlend",1,"gsActionActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsActionActuator::setBlend",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsActionActuator,0))){
    SWIG_fail_ptr("ActionActuator_setBlend",1,SWIGTYPE_p_gsActionActuator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setBlend(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActionActuator_setMode(lua_State* L) {
  int SWIG_arg = 0;
  gsActionActuator *arg1 = (gsActionActuator *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gsActionActuator::setMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsActionActuator::setMode",1,"gsActionActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsActionActuator::setMode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsActionActuator,0))){
    SWIG_fail_ptr("ActionActuator_setMode",1,SWIGTYPE_p_gsActionActuator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActionActuator_setPriority(lua_State* L) {
  int SWIG_arg = 0;
  gsActionActuator *arg1 = (gsActionActuator *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gsActionActuator::setPriority",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsActionActuator::setPriority",1,"gsActionActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsActionActuator::setPriority",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsActionActuator,0))){
    SWIG_fail_ptr("ActionActuator_setPriority",1,SWIGTYPE_p_gsActionActuator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setPriority(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActionActuator_setAnimation(lua_State* L) {
  int SWIG_arg = 0;
  gsActionActuator *arg1 = (gsActionActuator *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsActionActuator::setAnimation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsActionActuator::setAnimation",1,"gsActionActuator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsActionActuator::setAnimation",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsActionActuator,0))){
    SWIG_fail_ptr("ActionActuator_setAnimation",1,SWIGTYPE_p_gsActionActuator);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setAnimation((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActionActuator_setProperty(lua_State* L) {
  int SWIG_arg = 0;
  gsActionActuator *arg1 = (gsActionActuator *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsActionActuator::setProperty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsActionActuator::setProperty",1,"gsActionActuator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsActionActuator::setProperty",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsActionActuator,0))){
    SWIG_fail_ptr("ActionActuator_setProperty",1,SWIGTYPE_p_gsActionActuator);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setProperty((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActionActuator_setReset(lua_State* L) {
  int SWIG_arg = 0;
  gsActionActuator *arg1 = (gsActionActuator *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gsActionActuator::setReset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsActionActuator::setReset",1,"gsActionActuator *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gsActionActuator::setReset",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsActionActuator,0))){
    SWIG_fail_ptr("ActionActuator_setReset",1,SWIGTYPE_p_gsActionActuator);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setReset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActionActuator_getStart(lua_State* L) {
  int SWIG_arg = 0;
  gsActionActuator *arg1 = (gsActionActuator *) 0 ;
  int result;
  
  SWIG_check_num_args("gsActionActuator::getStart",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsActionActuator::getStart",1,"gsActionActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsActionActuator,0))){
    SWIG_fail_ptr("ActionActuator_getStart",1,SWIGTYPE_p_gsActionActuator);
  }
  
  result = (int)(arg1)->getStart();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActionActuator_getEnd(lua_State* L) {
  int SWIG_arg = 0;
  gsActionActuator *arg1 = (gsActionActuator *) 0 ;
  int result;
  
  SWIG_check_num_args("gsActionActuator::getEnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsActionActuator::getEnd",1,"gsActionActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsActionActuator,0))){
    SWIG_fail_ptr("ActionActuator_getEnd",1,SWIGTYPE_p_gsActionActuator);
  }
  
  result = (int)(arg1)->getEnd();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActionActuator_getBlend(lua_State* L) {
  int SWIG_arg = 0;
  gsActionActuator *arg1 = (gsActionActuator *) 0 ;
  int result;
  
  SWIG_check_num_args("gsActionActuator::getBlend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsActionActuator::getBlend",1,"gsActionActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsActionActuator,0))){
    SWIG_fail_ptr("ActionActuator_getBlend",1,SWIGTYPE_p_gsActionActuator);
  }
  
  result = (int)(arg1)->getBlend();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActionActuator_getMode(lua_State* L) {
  int SWIG_arg = 0;
  gsActionActuator *arg1 = (gsActionActuator *) 0 ;
  int result;
  
  SWIG_check_num_args("gsActionActuator::getMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsActionActuator::getMode",1,"gsActionActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsActionActuator,0))){
    SWIG_fail_ptr("ActionActuator_getMode",1,SWIGTYPE_p_gsActionActuator);
  }
  
  result = (int)(arg1)->getMode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActionActuator_getPriority(lua_State* L) {
  int SWIG_arg = 0;
  gsActionActuator *arg1 = (gsActionActuator *) 0 ;
  int result;
  
  SWIG_check_num_args("gsActionActuator::getPriority",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsActionActuator::getPriority",1,"gsActionActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsActionActuator,0))){
    SWIG_fail_ptr("ActionActuator_getPriority",1,SWIGTYPE_p_gsActionActuator);
  }
  
  result = (int)(arg1)->getPriority();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActionActuator_getAnimation(lua_State* L) {
  int SWIG_arg = 0;
  gsActionActuator *arg1 = (gsActionActuator *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsActionActuator::getAnimation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsActionActuator::getAnimation",1,"gsActionActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsActionActuator,0))){
    SWIG_fail_ptr("ActionActuator_getAnimation",1,SWIGTYPE_p_gsActionActuator);
  }
  
  result = (arg1)->getAnimation();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActionActuator_getProperty(lua_State* L) {
  int SWIG_arg = 0;
  gsActionActuator *arg1 = (gsActionActuator *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsActionActuator::getProperty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsActionActuator::getProperty",1,"gsActionActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsActionActuator,0))){
    SWIG_fail_ptr("ActionActuator_getProperty",1,SWIGTYPE_p_gsActionActuator);
  }
  
  result = (arg1)->getProperty();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActionActuator_getReset(lua_State* L) {
  int SWIG_arg = 0;
  gsActionActuator *arg1 = (gsActionActuator *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsActionActuator::getReset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsActionActuator::getReset",1,"gsActionActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsActionActuator,0))){
    SWIG_fail_ptr("ActionActuator_getReset",1,SWIGTYPE_p_gsActionActuator);
  }
  
  result = (bool)(arg1)->getReset();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ActionActuator(void *obj) {
gsActionActuator *arg1 = (gsActionActuator *) obj;
delete arg1;
}
static swig_lua_method swig_gsActionActuator_methods[] = {
    {"setStart", _wrap_ActionActuator_setStart}, 
    {"setEnd", _wrap_ActionActuator_setEnd}, 
    {"setBlend", _wrap_ActionActuator_setBlend}, 
    {"setMode", _wrap_ActionActuator_setMode}, 
    {"setPriority", _wrap_ActionActuator_setPriority}, 
    {"setAnimation", _wrap_ActionActuator_setAnimation}, 
    {"setProperty", _wrap_ActionActuator_setProperty}, 
    {"setReset", _wrap_ActionActuator_setReset}, 
    {"getStart", _wrap_ActionActuator_getStart}, 
    {"getEnd", _wrap_ActionActuator_getEnd}, 
    {"getBlend", _wrap_ActionActuator_getBlend}, 
    {"getMode", _wrap_ActionActuator_getMode}, 
    {"getPriority", _wrap_ActionActuator_getPriority}, 
    {"getAnimation", _wrap_ActionActuator_getAnimation}, 
    {"getProperty", _wrap_ActionActuator_getProperty}, 
    {"getReset", _wrap_ActionActuator_getReset}, 
    {0,0}
};
static swig_lua_attribute swig_gsActionActuator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsActionActuator_bases[] = {0,0};
static const char *swig_gsActionActuator_base_names[] = {"gsActuator *",0};
static swig_lua_class _wrap_class_gsActionActuator = { "ActionActuator", &SWIGTYPE_p_gsActionActuator,_wrap_new_ActionActuator, swig_delete_ActionActuator, swig_gsActionActuator_methods, swig_gsActionActuator_attributes, swig_gsActionActuator_bases, swig_gsActionActuator_base_names };

static int _wrap_new_EditObjectActuator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gsEditObjectActuator *result = 0 ;
  
  SWIG_check_num_args("gsEditObjectActuator::gsEditObjectActuator",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsEditObjectActuator::gsEditObjectActuator",1,"gsLogicObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsEditObjectActuator::gsEditObjectActuator",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_EditObjectActuator",1,SWIGTYPE_p_gsLogicObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gsEditObjectActuator *)new gsEditObjectActuator(arg1,(gkString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsEditObjectActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EditObjectActuator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gsEditObjectActuator *result = 0 ;
  
  SWIG_check_num_args("gsEditObjectActuator::gsEditObjectActuator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsEditObjectActuator::gsEditObjectActuator",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_EditObjectActuator",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (gsEditObjectActuator *)new gsEditObjectActuator(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsEditObjectActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EditObjectActuator__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsEditObjectActuator *result = 0 ;
  
  SWIG_check_num_args("gsEditObjectActuator::gsEditObjectActuator",0,0)
  result = (gsEditObjectActuator *)new gsEditObjectActuator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsEditObjectActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EditObjectActuator(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_EditObjectActuator__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_EditObjectActuator__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_EditObjectActuator__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_EditObjectActuator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsEditObjectActuator::gsEditObjectActuator(gsLogicObject *,gkString const &)\n"
    "    gsEditObjectActuator::gsEditObjectActuator(gsLogicObject *)\n"
    "    gsEditObjectActuator::gsEditObjectActuator()\n");
  lua_error(L);return 0;
}


static int _wrap_EditObjectActuator_setType(lua_State* L) {
  int SWIG_arg = 0;
  gsEditObjectActuator *arg1 = (gsEditObjectActuator *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gsEditObjectActuator::setType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsEditObjectActuator::setType",1,"gsEditObjectActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsEditObjectActuator::setType",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsEditObjectActuator,0))){
    SWIG_fail_ptr("EditObjectActuator_setType",1,SWIGTYPE_p_gsEditObjectActuator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EditObjectActuator_setDynMode(lua_State* L) {
  int SWIG_arg = 0;
  gsEditObjectActuator *arg1 = (gsEditObjectActuator *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gsEditObjectActuator::setDynMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsEditObjectActuator::setDynMode",1,"gsEditObjectActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsEditObjectActuator::setDynMode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsEditObjectActuator,0))){
    SWIG_fail_ptr("EditObjectActuator_setDynMode",1,SWIGTYPE_p_gsEditObjectActuator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setDynMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EditObjectActuator_setObject(lua_State* L) {
  int SWIG_arg = 0;
  gsEditObjectActuator *arg1 = (gsEditObjectActuator *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsEditObjectActuator::setObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsEditObjectActuator::setObject",1,"gsEditObjectActuator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsEditObjectActuator::setObject",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsEditObjectActuator,0))){
    SWIG_fail_ptr("EditObjectActuator_setObject",1,SWIGTYPE_p_gsEditObjectActuator);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setObject((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EditObjectActuator_setLinearVelocity(lua_State* L) {
  int SWIG_arg = 0;
  gsEditObjectActuator *arg1 = (gsEditObjectActuator *) 0 ;
  gsVector3 *arg2 = 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("gsEditObjectActuator::setLinearVelocity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsEditObjectActuator::setLinearVelocity",1,"gsEditObjectActuator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsEditObjectActuator::setLinearVelocity",2,"gsVector3 const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("gsEditObjectActuator::setLinearVelocity",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsEditObjectActuator,0))){
    SWIG_fail_ptr("EditObjectActuator_setLinearVelocity",1,SWIGTYPE_p_gsEditObjectActuator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("EditObjectActuator_setLinearVelocity",2,SWIGTYPE_p_gsVector3);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->setLinearVelocity((gsVector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EditObjectActuator_setAngularVelocity(lua_State* L) {
  int SWIG_arg = 0;
  gsEditObjectActuator *arg1 = (gsEditObjectActuator *) 0 ;
  gsVector3 *arg2 = 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("gsEditObjectActuator::setAngularVelocity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsEditObjectActuator::setAngularVelocity",1,"gsEditObjectActuator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsEditObjectActuator::setAngularVelocity",2,"gsVector3 const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("gsEditObjectActuator::setAngularVelocity",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsEditObjectActuator,0))){
    SWIG_fail_ptr("EditObjectActuator_setAngularVelocity",1,SWIGTYPE_p_gsEditObjectActuator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("EditObjectActuator_setAngularVelocity",2,SWIGTYPE_p_gsVector3);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->setAngularVelocity((gsVector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EditObjectActuator_setLifeSpan(lua_State* L) {
  int SWIG_arg = 0;
  gsEditObjectActuator *arg1 = (gsEditObjectActuator *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gsEditObjectActuator::setLifeSpan",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsEditObjectActuator::setLifeSpan",1,"gsEditObjectActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsEditObjectActuator::setLifeSpan",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsEditObjectActuator,0))){
    SWIG_fail_ptr("EditObjectActuator_setLifeSpan",1,SWIGTYPE_p_gsEditObjectActuator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setLifeSpan(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EditObjectActuator_getType(lua_State* L) {
  int SWIG_arg = 0;
  gsEditObjectActuator *arg1 = (gsEditObjectActuator *) 0 ;
  int result;
  
  SWIG_check_num_args("gsEditObjectActuator::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsEditObjectActuator::getType",1,"gsEditObjectActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsEditObjectActuator,0))){
    SWIG_fail_ptr("EditObjectActuator_getType",1,SWIGTYPE_p_gsEditObjectActuator);
  }
  
  result = (int)(arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EditObjectActuator_getDynMode(lua_State* L) {
  int SWIG_arg = 0;
  gsEditObjectActuator *arg1 = (gsEditObjectActuator *) 0 ;
  int result;
  
  SWIG_check_num_args("gsEditObjectActuator::getDynMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsEditObjectActuator::getDynMode",1,"gsEditObjectActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsEditObjectActuator,0))){
    SWIG_fail_ptr("EditObjectActuator_getDynMode",1,SWIGTYPE_p_gsEditObjectActuator);
  }
  
  result = (int)(arg1)->getDynMode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EditObjectActuator_getObject(lua_State* L) {
  int SWIG_arg = 0;
  gsEditObjectActuator *arg1 = (gsEditObjectActuator *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsEditObjectActuator::getObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsEditObjectActuator::getObject",1,"gsEditObjectActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsEditObjectActuator,0))){
    SWIG_fail_ptr("EditObjectActuator_getObject",1,SWIGTYPE_p_gsEditObjectActuator);
  }
  
  result = (arg1)->getObject();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EditObjectActuator_getLinearVelocity(lua_State* L) {
  int SWIG_arg = 0;
  gsEditObjectActuator *arg1 = (gsEditObjectActuator *) 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsEditObjectActuator::getLinearVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsEditObjectActuator::getLinearVelocity",1,"gsEditObjectActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsEditObjectActuator,0))){
    SWIG_fail_ptr("EditObjectActuator_getLinearVelocity",1,SWIGTYPE_p_gsEditObjectActuator);
  }
  
  result = (arg1)->getLinearVelocity();
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EditObjectActuator_getAngularVelocity(lua_State* L) {
  int SWIG_arg = 0;
  gsEditObjectActuator *arg1 = (gsEditObjectActuator *) 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsEditObjectActuator::getAngularVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsEditObjectActuator::getAngularVelocity",1,"gsEditObjectActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsEditObjectActuator,0))){
    SWIG_fail_ptr("EditObjectActuator_getAngularVelocity",1,SWIGTYPE_p_gsEditObjectActuator);
  }
  
  result = (arg1)->getAngularVelocity();
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EditObjectActuator_getLifeSpan(lua_State* L) {
  int SWIG_arg = 0;
  gsEditObjectActuator *arg1 = (gsEditObjectActuator *) 0 ;
  int result;
  
  SWIG_check_num_args("gsEditObjectActuator::getLifeSpan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsEditObjectActuator::getLifeSpan",1,"gsEditObjectActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsEditObjectActuator,0))){
    SWIG_fail_ptr("EditObjectActuator_getLifeSpan",1,SWIGTYPE_p_gsEditObjectActuator);
  }
  
  result = (int)(arg1)->getLifeSpan();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EditObjectActuator_getLastCreatedObject(lua_State* L) {
  int SWIG_arg = 0;
  gsEditObjectActuator *arg1 = (gsEditObjectActuator *) 0 ;
  gkGameObject *result = 0 ;
  
  SWIG_check_num_args("gsEditObjectActuator::getLastCreatedObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsEditObjectActuator::getLastCreatedObject",1,"gsEditObjectActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsEditObjectActuator,0))){
    SWIG_fail_ptr("EditObjectActuator_getLastCreatedObject",1,SWIGTYPE_p_gsEditObjectActuator);
  }
  
  result = (gkGameObject *)(arg1)->getLastCreatedObject();
  if (result) {
    SWIG_arg += gsWrapGameObject(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EditObjectActuator(void *obj) {
gsEditObjectActuator *arg1 = (gsEditObjectActuator *) obj;
delete arg1;
}
static swig_lua_method swig_gsEditObjectActuator_methods[] = {
    {"setType", _wrap_EditObjectActuator_setType}, 
    {"setDynMode", _wrap_EditObjectActuator_setDynMode}, 
    {"setObject", _wrap_EditObjectActuator_setObject}, 
    {"setLinearVelocity", _wrap_EditObjectActuator_setLinearVelocity}, 
    {"setAngularVelocity", _wrap_EditObjectActuator_setAngularVelocity}, 
    {"setLifeSpan", _wrap_EditObjectActuator_setLifeSpan}, 
    {"getType", _wrap_EditObjectActuator_getType}, 
    {"getDynMode", _wrap_EditObjectActuator_getDynMode}, 
    {"getObject", _wrap_EditObjectActuator_getObject}, 
    {"getLinearVelocity", _wrap_EditObjectActuator_getLinearVelocity}, 
    {"getAngularVelocity", _wrap_EditObjectActuator_getAngularVelocity}, 
    {"getLifeSpan", _wrap_EditObjectActuator_getLifeSpan}, 
    {"getLastCreatedObject", _wrap_EditObjectActuator_getLastCreatedObject}, 
    {0,0}
};
static swig_lua_attribute swig_gsEditObjectActuator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsEditObjectActuator_bases[] = {0,0};
static const char *swig_gsEditObjectActuator_base_names[] = {"gsActuator *",0};
static swig_lua_class _wrap_class_gsEditObjectActuator = { "EditObjectActuator", &SWIGTYPE_p_gsEditObjectActuator,_wrap_new_EditObjectActuator, swig_delete_EditObjectActuator, swig_gsEditObjectActuator_methods, swig_gsEditObjectActuator_attributes, swig_gsEditObjectActuator_bases, swig_gsEditObjectActuator_base_names };

static int _wrap_new_GameActuator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gsGameActuator *result = 0 ;
  
  SWIG_check_num_args("gsGameActuator::gsGameActuator",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameActuator::gsGameActuator",1,"gsLogicObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsGameActuator::gsGameActuator",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_GameActuator",1,SWIGTYPE_p_gsLogicObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gsGameActuator *)new gsGameActuator(arg1,(gkString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsGameActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GameActuator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gsGameActuator *result = 0 ;
  
  SWIG_check_num_args("gsGameActuator::gsGameActuator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameActuator::gsGameActuator",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_GameActuator",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (gsGameActuator *)new gsGameActuator(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsGameActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GameActuator__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsGameActuator *result = 0 ;
  
  SWIG_check_num_args("gsGameActuator::gsGameActuator",0,0)
  result = (gsGameActuator *)new gsGameActuator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsGameActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GameActuator(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_GameActuator__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_GameActuator__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_GameActuator__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_GameActuator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsGameActuator::gsGameActuator(gsLogicObject *,gkString const &)\n"
    "    gsGameActuator::gsGameActuator(gsLogicObject *)\n"
    "    gsGameActuator::gsGameActuator()\n");
  lua_error(L);return 0;
}


static int _wrap_GameActuator_setType(lua_State* L) {
  int SWIG_arg = 0;
  gsGameActuator *arg1 = (gsGameActuator *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gsGameActuator::setType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameActuator::setType",1,"gsGameActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsGameActuator::setType",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameActuator,0))){
    SWIG_fail_ptr("GameActuator_setType",1,SWIGTYPE_p_gsGameActuator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameActuator_getType(lua_State* L) {
  int SWIG_arg = 0;
  gsGameActuator *arg1 = (gsGameActuator *) 0 ;
  int result;
  
  SWIG_check_num_args("gsGameActuator::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsGameActuator::getType",1,"gsGameActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsGameActuator,0))){
    SWIG_fail_ptr("GameActuator_getType",1,SWIGTYPE_p_gsGameActuator);
  }
  
  result = (int)(arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GameActuator(void *obj) {
gsGameActuator *arg1 = (gsGameActuator *) obj;
delete arg1;
}
static swig_lua_method swig_gsGameActuator_methods[] = {
    {"setType", _wrap_GameActuator_setType}, 
    {"getType", _wrap_GameActuator_getType}, 
    {0,0}
};
static swig_lua_attribute swig_gsGameActuator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsGameActuator_bases[] = {0,0};
static const char *swig_gsGameActuator_base_names[] = {"gsActuator *",0};
static swig_lua_class _wrap_class_gsGameActuator = { "GameActuator", &SWIGTYPE_p_gsGameActuator,_wrap_new_GameActuator, swig_delete_GameActuator, swig_gsGameActuator_methods, swig_gsGameActuator_attributes, swig_gsGameActuator_bases, swig_gsGameActuator_base_names };

static int _wrap_new_MessageActuator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gsMessageActuator *result = 0 ;
  
  SWIG_check_num_args("gsMessageActuator::gsMessageActuator",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMessageActuator::gsMessageActuator",1,"gsLogicObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsMessageActuator::gsMessageActuator",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_MessageActuator",1,SWIGTYPE_p_gsLogicObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gsMessageActuator *)new gsMessageActuator(arg1,(gkString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsMessageActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MessageActuator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gsMessageActuator *result = 0 ;
  
  SWIG_check_num_args("gsMessageActuator::gsMessageActuator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMessageActuator::gsMessageActuator",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_MessageActuator",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (gsMessageActuator *)new gsMessageActuator(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsMessageActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MessageActuator__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsMessageActuator *result = 0 ;
  
  SWIG_check_num_args("gsMessageActuator::gsMessageActuator",0,0)
  result = (gsMessageActuator *)new gsMessageActuator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsMessageActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MessageActuator(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_MessageActuator__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_MessageActuator__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_MessageActuator__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_MessageActuator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsMessageActuator::gsMessageActuator(gsLogicObject *,gkString const &)\n"
    "    gsMessageActuator::gsMessageActuator(gsLogicObject *)\n"
    "    gsMessageActuator::gsMessageActuator()\n");
  lua_error(L);return 0;
}


static int _wrap_MessageActuator_setTo(lua_State* L) {
  int SWIG_arg = 0;
  gsMessageActuator *arg1 = (gsMessageActuator *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsMessageActuator::setTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMessageActuator::setTo",1,"gsMessageActuator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsMessageActuator::setTo",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMessageActuator,0))){
    SWIG_fail_ptr("MessageActuator_setTo",1,SWIGTYPE_p_gsMessageActuator);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setTo((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MessageActuator_getTo(lua_State* L) {
  int SWIG_arg = 0;
  gsMessageActuator *arg1 = (gsMessageActuator *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsMessageActuator::getTo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMessageActuator::getTo",1,"gsMessageActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMessageActuator,0))){
    SWIG_fail_ptr("MessageActuator_getTo",1,SWIGTYPE_p_gsMessageActuator);
  }
  
  result = (arg1)->getTo();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MessageActuator_setSubject(lua_State* L) {
  int SWIG_arg = 0;
  gsMessageActuator *arg1 = (gsMessageActuator *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsMessageActuator::setSubject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMessageActuator::setSubject",1,"gsMessageActuator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsMessageActuator::setSubject",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMessageActuator,0))){
    SWIG_fail_ptr("MessageActuator_setSubject",1,SWIGTYPE_p_gsMessageActuator);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setSubject((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MessageActuator_getSubject(lua_State* L) {
  int SWIG_arg = 0;
  gsMessageActuator *arg1 = (gsMessageActuator *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsMessageActuator::getSubject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMessageActuator::getSubject",1,"gsMessageActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMessageActuator,0))){
    SWIG_fail_ptr("MessageActuator_getSubject",1,SWIGTYPE_p_gsMessageActuator);
  }
  
  result = (arg1)->getSubject();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MessageActuator_setBodyText(lua_State* L) {
  int SWIG_arg = 0;
  gsMessageActuator *arg1 = (gsMessageActuator *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsMessageActuator::setBodyText",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMessageActuator::setBodyText",1,"gsMessageActuator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsMessageActuator::setBodyText",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMessageActuator,0))){
    SWIG_fail_ptr("MessageActuator_setBodyText",1,SWIGTYPE_p_gsMessageActuator);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setBodyText((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MessageActuator_getBodyText(lua_State* L) {
  int SWIG_arg = 0;
  gsMessageActuator *arg1 = (gsMessageActuator *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsMessageActuator::getBodyText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMessageActuator::getBodyText",1,"gsMessageActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMessageActuator,0))){
    SWIG_fail_ptr("MessageActuator_getBodyText",1,SWIGTYPE_p_gsMessageActuator);
  }
  
  result = (arg1)->getBodyText();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MessageActuator_setBodyProperty(lua_State* L) {
  int SWIG_arg = 0;
  gsMessageActuator *arg1 = (gsMessageActuator *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsMessageActuator::setBodyProperty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMessageActuator::setBodyProperty",1,"gsMessageActuator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsMessageActuator::setBodyProperty",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMessageActuator,0))){
    SWIG_fail_ptr("MessageActuator_setBodyProperty",1,SWIGTYPE_p_gsMessageActuator);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setBodyProperty((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MessageActuator_getBodyProperty(lua_State* L) {
  int SWIG_arg = 0;
  gsMessageActuator *arg1 = (gsMessageActuator *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsMessageActuator::getBodyProperty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMessageActuator::getBodyProperty",1,"gsMessageActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMessageActuator,0))){
    SWIG_fail_ptr("MessageActuator_getBodyProperty",1,SWIGTYPE_p_gsMessageActuator);
  }
  
  result = (arg1)->getBodyProperty();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MessageActuator_setBodyType(lua_State* L) {
  int SWIG_arg = 0;
  gsMessageActuator *arg1 = (gsMessageActuator *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gsMessageActuator::setBodyType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMessageActuator::setBodyType",1,"gsMessageActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsMessageActuator::setBodyType",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMessageActuator,0))){
    SWIG_fail_ptr("MessageActuator_setBodyType",1,SWIGTYPE_p_gsMessageActuator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setBodyType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MessageActuator_getBodyType(lua_State* L) {
  int SWIG_arg = 0;
  gsMessageActuator *arg1 = (gsMessageActuator *) 0 ;
  int result;
  
  SWIG_check_num_args("gsMessageActuator::getBodyType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMessageActuator::getBodyType",1,"gsMessageActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMessageActuator,0))){
    SWIG_fail_ptr("MessageActuator_getBodyType",1,SWIGTYPE_p_gsMessageActuator);
  }
  
  result = (int)(arg1)->getBodyType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MessageActuator(void *obj) {
gsMessageActuator *arg1 = (gsMessageActuator *) obj;
delete arg1;
}
static swig_lua_method swig_gsMessageActuator_methods[] = {
    {"setTo", _wrap_MessageActuator_setTo}, 
    {"getTo", _wrap_MessageActuator_getTo}, 
    {"setSubject", _wrap_MessageActuator_setSubject}, 
    {"getSubject", _wrap_MessageActuator_getSubject}, 
    {"setBodyText", _wrap_MessageActuator_setBodyText}, 
    {"getBodyText", _wrap_MessageActuator_getBodyText}, 
    {"setBodyProperty", _wrap_MessageActuator_setBodyProperty}, 
    {"getBodyProperty", _wrap_MessageActuator_getBodyProperty}, 
    {"setBodyType", _wrap_MessageActuator_setBodyType}, 
    {"getBodyType", _wrap_MessageActuator_getBodyType}, 
    {0,0}
};
static swig_lua_attribute swig_gsMessageActuator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsMessageActuator_bases[] = {0,0};
static const char *swig_gsMessageActuator_base_names[] = {"gsActuator *",0};
static swig_lua_class _wrap_class_gsMessageActuator = { "MessageActuator", &SWIGTYPE_p_gsMessageActuator,_wrap_new_MessageActuator, swig_delete_MessageActuator, swig_gsMessageActuator_methods, swig_gsMessageActuator_attributes, swig_gsMessageActuator_bases, swig_gsMessageActuator_base_names };

static int _wrap_new_MotionActuator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gsMotionActuator *result = 0 ;
  
  SWIG_check_num_args("gsMotionActuator::gsMotionActuator",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::gsMotionActuator",1,"gsLogicObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsMotionActuator::gsMotionActuator",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_MotionActuator",1,SWIGTYPE_p_gsLogicObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gsMotionActuator *)new gsMotionActuator(arg1,(gkString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsMotionActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MotionActuator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gsMotionActuator *result = 0 ;
  
  SWIG_check_num_args("gsMotionActuator::gsMotionActuator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::gsMotionActuator",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_MotionActuator",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (gsMotionActuator *)new gsMotionActuator(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsMotionActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MotionActuator__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *result = 0 ;
  
  SWIG_check_num_args("gsMotionActuator::gsMotionActuator",0,0)
  result = (gsMotionActuator *)new gsMotionActuator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsMotionActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MotionActuator(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_MotionActuator__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_MotionActuator__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_MotionActuator__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_MotionActuator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsMotionActuator::gsMotionActuator(gsLogicObject *,gkString const &)\n"
    "    gsMotionActuator::gsMotionActuator(gsLogicObject *)\n"
    "    gsMotionActuator::gsMotionActuator()\n");
  lua_error(L);return 0;
}


static int _wrap_MotionActuator_setTranslation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  bool arg5 ;
  
  SWIG_check_num_args("gsMotionActuator::setTranslation",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::setTranslation",1,"gsMotionActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsMotionActuator::setTranslation",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsMotionActuator::setTranslation",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gsMotionActuator::setTranslation",4,"float");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("gsMotionActuator::setTranslation",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_setTranslation",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->setTranslation(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_setTranslation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("gsMotionActuator::setTranslation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::setTranslation",1,"gsMotionActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsMotionActuator::setTranslation",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsMotionActuator::setTranslation",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gsMotionActuator::setTranslation",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_setTranslation",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setTranslation(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_setTranslation__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  gsVector3 *arg2 = 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("gsMotionActuator::setTranslation",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::setTranslation",1,"gsMotionActuator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsMotionActuator::setTranslation",2,"gsVector3 const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("gsMotionActuator::setTranslation",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_setTranslation",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("MotionActuator_setTranslation",2,SWIGTYPE_p_gsVector3);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->setTranslation((gsVector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_setTranslation__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  gsVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("gsMotionActuator::setTranslation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::setTranslation",1,"gsMotionActuator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsMotionActuator::setTranslation",2,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_setTranslation",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("MotionActuator_setTranslation",2,SWIGTYPE_p_gsVector3);
  }
  
  (arg1)->setTranslation((gsVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_setTranslation(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsMotionActuator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gsVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_MotionActuator_setTranslation__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsMotionActuator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gsVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_MotionActuator_setTranslation__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsMotionActuator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_MotionActuator_setTranslation__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsMotionActuator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_MotionActuator_setTranslation__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'MotionActuator_setTranslation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsMotionActuator::setTranslation(float,float,float,bool)\n"
    "    gsMotionActuator::setTranslation(float,float,float)\n"
    "    gsMotionActuator::setTranslation(gsVector3 const &,bool)\n"
    "    gsMotionActuator::setTranslation(gsVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_MotionActuator_setRotation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  bool arg5 ;
  
  SWIG_check_num_args("gsMotionActuator::setRotation",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::setRotation",1,"gsMotionActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsMotionActuator::setRotation",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsMotionActuator::setRotation",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gsMotionActuator::setRotation",4,"float");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("gsMotionActuator::setRotation",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_setRotation",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->setRotation(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_setRotation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("gsMotionActuator::setRotation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::setRotation",1,"gsMotionActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsMotionActuator::setRotation",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsMotionActuator::setRotation",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gsMotionActuator::setRotation",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_setRotation",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setRotation(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_setRotation__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  gsVector3 *arg2 = 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("gsMotionActuator::setRotation",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::setRotation",1,"gsMotionActuator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsMotionActuator::setRotation",2,"gsVector3 const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("gsMotionActuator::setRotation",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_setRotation",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("MotionActuator_setRotation",2,SWIGTYPE_p_gsVector3);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->setRotation((gsVector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_setRotation__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  gsVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("gsMotionActuator::setRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::setRotation",1,"gsMotionActuator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsMotionActuator::setRotation",2,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_setRotation",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("MotionActuator_setRotation",2,SWIGTYPE_p_gsVector3);
  }
  
  (arg1)->setRotation((gsVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_setRotation(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsMotionActuator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gsVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_MotionActuator_setRotation__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsMotionActuator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gsVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_MotionActuator_setRotation__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsMotionActuator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_MotionActuator_setRotation__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsMotionActuator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_MotionActuator_setRotation__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'MotionActuator_setRotation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsMotionActuator::setRotation(float,float,float,bool)\n"
    "    gsMotionActuator::setRotation(float,float,float)\n"
    "    gsMotionActuator::setRotation(gsVector3 const &,bool)\n"
    "    gsMotionActuator::setRotation(gsVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_MotionActuator_setForce__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  bool arg5 ;
  
  SWIG_check_num_args("gsMotionActuator::setForce",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::setForce",1,"gsMotionActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsMotionActuator::setForce",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsMotionActuator::setForce",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gsMotionActuator::setForce",4,"float");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("gsMotionActuator::setForce",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_setForce",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->setForce(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_setForce__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("gsMotionActuator::setForce",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::setForce",1,"gsMotionActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsMotionActuator::setForce",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsMotionActuator::setForce",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gsMotionActuator::setForce",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_setForce",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setForce(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_setForce__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  gsVector3 *arg2 = 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("gsMotionActuator::setForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::setForce",1,"gsMotionActuator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsMotionActuator::setForce",2,"gsVector3 const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("gsMotionActuator::setForce",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_setForce",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("MotionActuator_setForce",2,SWIGTYPE_p_gsVector3);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->setForce((gsVector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_setForce__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  gsVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("gsMotionActuator::setForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::setForce",1,"gsMotionActuator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsMotionActuator::setForce",2,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_setForce",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("MotionActuator_setForce",2,SWIGTYPE_p_gsVector3);
  }
  
  (arg1)->setForce((gsVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_setForce(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsMotionActuator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gsVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_MotionActuator_setForce__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsMotionActuator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gsVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_MotionActuator_setForce__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsMotionActuator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_MotionActuator_setForce__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsMotionActuator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_MotionActuator_setForce__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'MotionActuator_setForce'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsMotionActuator::setForce(float,float,float,bool)\n"
    "    gsMotionActuator::setForce(float,float,float)\n"
    "    gsMotionActuator::setForce(gsVector3 const &,bool)\n"
    "    gsMotionActuator::setForce(gsVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_MotionActuator_setTorque__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  bool arg5 ;
  
  SWIG_check_num_args("gsMotionActuator::setTorque",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::setTorque",1,"gsMotionActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsMotionActuator::setTorque",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsMotionActuator::setTorque",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gsMotionActuator::setTorque",4,"float");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("gsMotionActuator::setTorque",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_setTorque",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->setTorque(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_setTorque__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("gsMotionActuator::setTorque",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::setTorque",1,"gsMotionActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsMotionActuator::setTorque",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsMotionActuator::setTorque",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gsMotionActuator::setTorque",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_setTorque",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setTorque(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_setTorque__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  gsVector3 *arg2 = 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("gsMotionActuator::setTorque",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::setTorque",1,"gsMotionActuator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsMotionActuator::setTorque",2,"gsVector3 const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("gsMotionActuator::setTorque",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_setTorque",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("MotionActuator_setTorque",2,SWIGTYPE_p_gsVector3);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->setTorque((gsVector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_setTorque__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  gsVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("gsMotionActuator::setTorque",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::setTorque",1,"gsMotionActuator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsMotionActuator::setTorque",2,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_setTorque",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("MotionActuator_setTorque",2,SWIGTYPE_p_gsVector3);
  }
  
  (arg1)->setTorque((gsVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_setTorque(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsMotionActuator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gsVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_MotionActuator_setTorque__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsMotionActuator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gsVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_MotionActuator_setTorque__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsMotionActuator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_MotionActuator_setTorque__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsMotionActuator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_MotionActuator_setTorque__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'MotionActuator_setTorque'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsMotionActuator::setTorque(float,float,float,bool)\n"
    "    gsMotionActuator::setTorque(float,float,float)\n"
    "    gsMotionActuator::setTorque(gsVector3 const &,bool)\n"
    "    gsMotionActuator::setTorque(gsVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_MotionActuator_setLinearVelocity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  bool arg5 ;
  
  SWIG_check_num_args("gsMotionActuator::setLinearVelocity",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::setLinearVelocity",1,"gsMotionActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsMotionActuator::setLinearVelocity",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsMotionActuator::setLinearVelocity",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gsMotionActuator::setLinearVelocity",4,"float");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("gsMotionActuator::setLinearVelocity",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_setLinearVelocity",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->setLinearVelocity(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_setLinearVelocity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("gsMotionActuator::setLinearVelocity",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::setLinearVelocity",1,"gsMotionActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsMotionActuator::setLinearVelocity",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsMotionActuator::setLinearVelocity",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gsMotionActuator::setLinearVelocity",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_setLinearVelocity",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setLinearVelocity(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_setLinearVelocity__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  gsVector3 *arg2 = 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("gsMotionActuator::setLinearVelocity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::setLinearVelocity",1,"gsMotionActuator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsMotionActuator::setLinearVelocity",2,"gsVector3 const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("gsMotionActuator::setLinearVelocity",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_setLinearVelocity",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("MotionActuator_setLinearVelocity",2,SWIGTYPE_p_gsVector3);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->setLinearVelocity((gsVector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_setLinearVelocity__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  gsVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("gsMotionActuator::setLinearVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::setLinearVelocity",1,"gsMotionActuator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsMotionActuator::setLinearVelocity",2,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_setLinearVelocity",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("MotionActuator_setLinearVelocity",2,SWIGTYPE_p_gsVector3);
  }
  
  (arg1)->setLinearVelocity((gsVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_setLinearVelocity(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsMotionActuator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gsVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_MotionActuator_setLinearVelocity__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsMotionActuator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gsVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_MotionActuator_setLinearVelocity__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsMotionActuator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_MotionActuator_setLinearVelocity__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsMotionActuator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_MotionActuator_setLinearVelocity__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'MotionActuator_setLinearVelocity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsMotionActuator::setLinearVelocity(float,float,float,bool)\n"
    "    gsMotionActuator::setLinearVelocity(float,float,float)\n"
    "    gsMotionActuator::setLinearVelocity(gsVector3 const &,bool)\n"
    "    gsMotionActuator::setLinearVelocity(gsVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_MotionActuator_setAngularVelocity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  bool arg5 ;
  
  SWIG_check_num_args("gsMotionActuator::setAngularVelocity",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::setAngularVelocity",1,"gsMotionActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsMotionActuator::setAngularVelocity",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsMotionActuator::setAngularVelocity",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gsMotionActuator::setAngularVelocity",4,"float");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("gsMotionActuator::setAngularVelocity",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_setAngularVelocity",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->setAngularVelocity(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_setAngularVelocity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("gsMotionActuator::setAngularVelocity",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::setAngularVelocity",1,"gsMotionActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsMotionActuator::setAngularVelocity",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsMotionActuator::setAngularVelocity",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gsMotionActuator::setAngularVelocity",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_setAngularVelocity",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setAngularVelocity(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_setAngularVelocity__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  gsVector3 *arg2 = 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("gsMotionActuator::setAngularVelocity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::setAngularVelocity",1,"gsMotionActuator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsMotionActuator::setAngularVelocity",2,"gsVector3 const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("gsMotionActuator::setAngularVelocity",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_setAngularVelocity",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("MotionActuator_setAngularVelocity",2,SWIGTYPE_p_gsVector3);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->setAngularVelocity((gsVector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_setAngularVelocity__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  gsVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("gsMotionActuator::setAngularVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::setAngularVelocity",1,"gsMotionActuator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsMotionActuator::setAngularVelocity",2,"gsVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_setAngularVelocity",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("MotionActuator_setAngularVelocity",2,SWIGTYPE_p_gsVector3);
  }
  
  (arg1)->setAngularVelocity((gsVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_setAngularVelocity(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsMotionActuator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gsVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_MotionActuator_setAngularVelocity__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsMotionActuator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gsVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_MotionActuator_setAngularVelocity__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsMotionActuator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_MotionActuator_setAngularVelocity__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsMotionActuator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_MotionActuator_setAngularVelocity__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'MotionActuator_setAngularVelocity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsMotionActuator::setAngularVelocity(float,float,float,bool)\n"
    "    gsMotionActuator::setAngularVelocity(float,float,float)\n"
    "    gsMotionActuator::setAngularVelocity(gsVector3 const &,bool)\n"
    "    gsMotionActuator::setAngularVelocity(gsVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_MotionActuator_setIncrementalTargetVelocity(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsMotionActuator::setIncrementalTargetVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::setIncrementalTargetVelocity",1,"gsMotionActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsMotionActuator::setIncrementalTargetVelocity",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_setIncrementalTargetVelocity",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setIncrementalTargetVelocity(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_setIncrementalVelocity(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gsMotionActuator::setIncrementalVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::setIncrementalVelocity",1,"gsMotionActuator *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gsMotionActuator::setIncrementalVelocity",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_setIncrementalVelocity",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setIncrementalVelocity(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_getIncrementalTargetVelocity(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  float result;
  
  SWIG_check_num_args("gsMotionActuator::getIncrementalTargetVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::getIncrementalTargetVelocity",1,"gsMotionActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_getIncrementalTargetVelocity",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  result = (float)(arg1)->getIncrementalTargetVelocity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_getIncrementalVelocity(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsMotionActuator::getIncrementalVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::getIncrementalVelocity",1,"gsMotionActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_getIncrementalVelocity",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  result = (bool)(arg1)->getIncrementalVelocity();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_getTranslation(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsMotionActuator::getTranslation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::getTranslation",1,"gsMotionActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_getTranslation",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  result = (arg1)->getTranslation();
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_getRotation(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsMotionActuator::getRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::getRotation",1,"gsMotionActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_getRotation",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  result = (arg1)->getRotation();
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_getForce(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsMotionActuator::getForce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::getForce",1,"gsMotionActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_getForce",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  result = (arg1)->getForce();
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_getTorque(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsMotionActuator::getTorque",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::getTorque",1,"gsMotionActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_getTorque",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  result = (arg1)->getTorque();
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_getLinearVelocity(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsMotionActuator::getLinearVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::getLinearVelocity",1,"gsMotionActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_getLinearVelocity",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  result = (arg1)->getLinearVelocity();
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotionActuator_getAngularVelocity(lua_State* L) {
  int SWIG_arg = 0;
  gsMotionActuator *arg1 = (gsMotionActuator *) 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsMotionActuator::getAngularVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsMotionActuator::getAngularVelocity",1,"gsMotionActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsMotionActuator,0))){
    SWIG_fail_ptr("MotionActuator_getAngularVelocity",1,SWIGTYPE_p_gsMotionActuator);
  }
  
  result = (arg1)->getAngularVelocity();
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MotionActuator(void *obj) {
gsMotionActuator *arg1 = (gsMotionActuator *) obj;
delete arg1;
}
static swig_lua_method swig_gsMotionActuator_methods[] = {
    {"setTranslation", _wrap_MotionActuator_setTranslation}, 
    {"setRotation", _wrap_MotionActuator_setRotation}, 
    {"setForce", _wrap_MotionActuator_setForce}, 
    {"setTorque", _wrap_MotionActuator_setTorque}, 
    {"setLinearVelocity", _wrap_MotionActuator_setLinearVelocity}, 
    {"setAngularVelocity", _wrap_MotionActuator_setAngularVelocity}, 
    {"setIncrementalTargetVelocity", _wrap_MotionActuator_setIncrementalTargetVelocity}, 
    {"setIncrementalVelocity", _wrap_MotionActuator_setIncrementalVelocity}, 
    {"getIncrementalTargetVelocity", _wrap_MotionActuator_getIncrementalTargetVelocity}, 
    {"getIncrementalVelocity", _wrap_MotionActuator_getIncrementalVelocity}, 
    {"getTranslation", _wrap_MotionActuator_getTranslation}, 
    {"getRotation", _wrap_MotionActuator_getRotation}, 
    {"getForce", _wrap_MotionActuator_getForce}, 
    {"getTorque", _wrap_MotionActuator_getTorque}, 
    {"getLinearVelocity", _wrap_MotionActuator_getLinearVelocity}, 
    {"getAngularVelocity", _wrap_MotionActuator_getAngularVelocity}, 
    {0,0}
};
static swig_lua_attribute swig_gsMotionActuator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsMotionActuator_bases[] = {0,0};
static const char *swig_gsMotionActuator_base_names[] = {"gsActuator *",0};
static swig_lua_class _wrap_class_gsMotionActuator = { "MotionActuator", &SWIGTYPE_p_gsMotionActuator,_wrap_new_MotionActuator, swig_delete_MotionActuator, swig_gsMotionActuator_methods, swig_gsMotionActuator_attributes, swig_gsMotionActuator_bases, swig_gsMotionActuator_base_names };

static int _wrap_new_ParentActuator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gsParentActuator *result = 0 ;
  
  SWIG_check_num_args("gsParentActuator::gsParentActuator",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsParentActuator::gsParentActuator",1,"gsLogicObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsParentActuator::gsParentActuator",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_ParentActuator",1,SWIGTYPE_p_gsLogicObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gsParentActuator *)new gsParentActuator(arg1,(gkString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsParentActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParentActuator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gsParentActuator *result = 0 ;
  
  SWIG_check_num_args("gsParentActuator::gsParentActuator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsParentActuator::gsParentActuator",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_ParentActuator",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (gsParentActuator *)new gsParentActuator(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsParentActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParentActuator__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsParentActuator *result = 0 ;
  
  SWIG_check_num_args("gsParentActuator::gsParentActuator",0,0)
  result = (gsParentActuator *)new gsParentActuator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsParentActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParentActuator(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ParentActuator__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ParentActuator__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ParentActuator__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_ParentActuator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsParentActuator::gsParentActuator(gsLogicObject *,gkString const &)\n"
    "    gsParentActuator::gsParentActuator(gsLogicObject *)\n"
    "    gsParentActuator::gsParentActuator()\n");
  lua_error(L);return 0;
}


static int _wrap_ParentActuator_setMode(lua_State* L) {
  int SWIG_arg = 0;
  gsParentActuator *arg1 = (gsParentActuator *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gsParentActuator::setMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsParentActuator::setMode",1,"gsParentActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsParentActuator::setMode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsParentActuator,0))){
    SWIG_fail_ptr("ParentActuator_setMode",1,SWIGTYPE_p_gsParentActuator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParentActuator_getMode(lua_State* L) {
  int SWIG_arg = 0;
  gsParentActuator *arg1 = (gsParentActuator *) 0 ;
  int result;
  
  SWIG_check_num_args("gsParentActuator::getMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsParentActuator::getMode",1,"gsParentActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsParentActuator,0))){
    SWIG_fail_ptr("ParentActuator_getMode",1,SWIGTYPE_p_gsParentActuator);
  }
  
  result = (int)(arg1)->getMode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParentActuator_setParent(lua_State* L) {
  int SWIG_arg = 0;
  gsParentActuator *arg1 = (gsParentActuator *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsParentActuator::setParent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsParentActuator::setParent",1,"gsParentActuator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsParentActuator::setParent",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsParentActuator,0))){
    SWIG_fail_ptr("ParentActuator_setParent",1,SWIGTYPE_p_gsParentActuator);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setParent((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParentActuator_getParent(lua_State* L) {
  int SWIG_arg = 0;
  gsParentActuator *arg1 = (gsParentActuator *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsParentActuator::getParent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsParentActuator::getParent",1,"gsParentActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsParentActuator,0))){
    SWIG_fail_ptr("ParentActuator_getParent",1,SWIGTYPE_p_gsParentActuator);
  }
  
  result = (arg1)->getParent();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParentActuator_setCompound(lua_State* L) {
  int SWIG_arg = 0;
  gsParentActuator *arg1 = (gsParentActuator *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gsParentActuator::setCompound",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsParentActuator::setCompound",1,"gsParentActuator *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gsParentActuator::setCompound",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsParentActuator,0))){
    SWIG_fail_ptr("ParentActuator_setCompound",1,SWIGTYPE_p_gsParentActuator);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setCompound(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParentActuator_getCompound(lua_State* L) {
  int SWIG_arg = 0;
  gsParentActuator *arg1 = (gsParentActuator *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsParentActuator::getCompound",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsParentActuator::getCompound",1,"gsParentActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsParentActuator,0))){
    SWIG_fail_ptr("ParentActuator_getCompound",1,SWIGTYPE_p_gsParentActuator);
  }
  
  result = (bool)(arg1)->getCompound();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParentActuator_setGhost(lua_State* L) {
  int SWIG_arg = 0;
  gsParentActuator *arg1 = (gsParentActuator *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gsParentActuator::setGhost",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsParentActuator::setGhost",1,"gsParentActuator *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gsParentActuator::setGhost",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsParentActuator,0))){
    SWIG_fail_ptr("ParentActuator_setGhost",1,SWIGTYPE_p_gsParentActuator);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setGhost(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParentActuator_getGhost(lua_State* L) {
  int SWIG_arg = 0;
  gsParentActuator *arg1 = (gsParentActuator *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsParentActuator::getGhost",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsParentActuator::getGhost",1,"gsParentActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsParentActuator,0))){
    SWIG_fail_ptr("ParentActuator_getGhost",1,SWIGTYPE_p_gsParentActuator);
  }
  
  result = (bool)(arg1)->getGhost();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParentActuator(void *obj) {
gsParentActuator *arg1 = (gsParentActuator *) obj;
delete arg1;
}
static swig_lua_method swig_gsParentActuator_methods[] = {
    {"setMode", _wrap_ParentActuator_setMode}, 
    {"getMode", _wrap_ParentActuator_getMode}, 
    {"setParent", _wrap_ParentActuator_setParent}, 
    {"getParent", _wrap_ParentActuator_getParent}, 
    {"setCompound", _wrap_ParentActuator_setCompound}, 
    {"getCompound", _wrap_ParentActuator_getCompound}, 
    {"setGhost", _wrap_ParentActuator_setGhost}, 
    {"getGhost", _wrap_ParentActuator_getGhost}, 
    {0,0}
};
static swig_lua_attribute swig_gsParentActuator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsParentActuator_bases[] = {0,0};
static const char *swig_gsParentActuator_base_names[] = {"gsActuator *",0};
static swig_lua_class _wrap_class_gsParentActuator = { "ParentActuator", &SWIGTYPE_p_gsParentActuator,_wrap_new_ParentActuator, swig_delete_ParentActuator, swig_gsParentActuator_methods, swig_gsParentActuator_attributes, swig_gsParentActuator_bases, swig_gsParentActuator_base_names };

static int _wrap_new_PropertyActuator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gsPropertyActuator *result = 0 ;
  
  SWIG_check_num_args("gsPropertyActuator::gsPropertyActuator",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsPropertyActuator::gsPropertyActuator",1,"gsLogicObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsPropertyActuator::gsPropertyActuator",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_PropertyActuator",1,SWIGTYPE_p_gsLogicObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gsPropertyActuator *)new gsPropertyActuator(arg1,(gkString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsPropertyActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PropertyActuator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gsPropertyActuator *result = 0 ;
  
  SWIG_check_num_args("gsPropertyActuator::gsPropertyActuator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsPropertyActuator::gsPropertyActuator",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_PropertyActuator",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (gsPropertyActuator *)new gsPropertyActuator(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsPropertyActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PropertyActuator__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsPropertyActuator *result = 0 ;
  
  SWIG_check_num_args("gsPropertyActuator::gsPropertyActuator",0,0)
  result = (gsPropertyActuator *)new gsPropertyActuator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsPropertyActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PropertyActuator(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PropertyActuator__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_PropertyActuator__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_PropertyActuator__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_PropertyActuator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsPropertyActuator::gsPropertyActuator(gsLogicObject *,gkString const &)\n"
    "    gsPropertyActuator::gsPropertyActuator(gsLogicObject *)\n"
    "    gsPropertyActuator::gsPropertyActuator()\n");
  lua_error(L);return 0;
}


static int _wrap_PropertyActuator_setType(lua_State* L) {
  int SWIG_arg = 0;
  gsPropertyActuator *arg1 = (gsPropertyActuator *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gsPropertyActuator::setType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsPropertyActuator::setType",1,"gsPropertyActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsPropertyActuator::setType",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsPropertyActuator,0))){
    SWIG_fail_ptr("PropertyActuator_setType",1,SWIGTYPE_p_gsPropertyActuator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PropertyActuator_getType(lua_State* L) {
  int SWIG_arg = 0;
  gsPropertyActuator *arg1 = (gsPropertyActuator *) 0 ;
  int result;
  
  SWIG_check_num_args("gsPropertyActuator::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsPropertyActuator::getType",1,"gsPropertyActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsPropertyActuator,0))){
    SWIG_fail_ptr("PropertyActuator_getType",1,SWIGTYPE_p_gsPropertyActuator);
  }
  
  result = (int)(arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PropertyActuator_setProperty(lua_State* L) {
  int SWIG_arg = 0;
  gsPropertyActuator *arg1 = (gsPropertyActuator *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsPropertyActuator::setProperty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsPropertyActuator::setProperty",1,"gsPropertyActuator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsPropertyActuator::setProperty",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsPropertyActuator,0))){
    SWIG_fail_ptr("PropertyActuator_setProperty",1,SWIGTYPE_p_gsPropertyActuator);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setProperty((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PropertyActuator_getProperty(lua_State* L) {
  int SWIG_arg = 0;
  gsPropertyActuator *arg1 = (gsPropertyActuator *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsPropertyActuator::getProperty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsPropertyActuator::getProperty",1,"gsPropertyActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsPropertyActuator,0))){
    SWIG_fail_ptr("PropertyActuator_getProperty",1,SWIGTYPE_p_gsPropertyActuator);
  }
  
  result = (arg1)->getProperty();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PropertyActuator_setValue(lua_State* L) {
  int SWIG_arg = 0;
  gsPropertyActuator *arg1 = (gsPropertyActuator *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsPropertyActuator::setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsPropertyActuator::setValue",1,"gsPropertyActuator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsPropertyActuator::setValue",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsPropertyActuator,0))){
    SWIG_fail_ptr("PropertyActuator_setValue",1,SWIGTYPE_p_gsPropertyActuator);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setValue((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PropertyActuator_getValue(lua_State* L) {
  int SWIG_arg = 0;
  gsPropertyActuator *arg1 = (gsPropertyActuator *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsPropertyActuator::getValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsPropertyActuator::getValue",1,"gsPropertyActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsPropertyActuator,0))){
    SWIG_fail_ptr("PropertyActuator_getValue",1,SWIGTYPE_p_gsPropertyActuator);
  }
  
  result = (arg1)->getValue();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PropertyActuator_setObject(lua_State* L) {
  int SWIG_arg = 0;
  gsPropertyActuator *arg1 = (gsPropertyActuator *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsPropertyActuator::setObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsPropertyActuator::setObject",1,"gsPropertyActuator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsPropertyActuator::setObject",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsPropertyActuator,0))){
    SWIG_fail_ptr("PropertyActuator_setObject",1,SWIGTYPE_p_gsPropertyActuator);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setObject((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PropertyActuator_getObject(lua_State* L) {
  int SWIG_arg = 0;
  gsPropertyActuator *arg1 = (gsPropertyActuator *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsPropertyActuator::getObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsPropertyActuator::getObject",1,"gsPropertyActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsPropertyActuator,0))){
    SWIG_fail_ptr("PropertyActuator_getObject",1,SWIGTYPE_p_gsPropertyActuator);
  }
  
  result = (arg1)->getObject();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PropertyActuator(void *obj) {
gsPropertyActuator *arg1 = (gsPropertyActuator *) obj;
delete arg1;
}
static swig_lua_method swig_gsPropertyActuator_methods[] = {
    {"setType", _wrap_PropertyActuator_setType}, 
    {"getType", _wrap_PropertyActuator_getType}, 
    {"setProperty", _wrap_PropertyActuator_setProperty}, 
    {"getProperty", _wrap_PropertyActuator_getProperty}, 
    {"setValue", _wrap_PropertyActuator_setValue}, 
    {"getValue", _wrap_PropertyActuator_getValue}, 
    {"setObject", _wrap_PropertyActuator_setObject}, 
    {"getObject", _wrap_PropertyActuator_getObject}, 
    {0,0}
};
static swig_lua_attribute swig_gsPropertyActuator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsPropertyActuator_bases[] = {0,0};
static const char *swig_gsPropertyActuator_base_names[] = {"gsActuator *",0};
static swig_lua_class _wrap_class_gsPropertyActuator = { "PropertyActuator", &SWIGTYPE_p_gsPropertyActuator,_wrap_new_PropertyActuator, swig_delete_PropertyActuator, swig_gsPropertyActuator_methods, swig_gsPropertyActuator_attributes, swig_gsPropertyActuator_bases, swig_gsPropertyActuator_base_names };

static int _wrap_new_RandomActuator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gsRandomActuator *result = 0 ;
  
  SWIG_check_num_args("gsRandomActuator::gsRandomActuator",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRandomActuator::gsRandomActuator",1,"gsLogicObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsRandomActuator::gsRandomActuator",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_RandomActuator",1,SWIGTYPE_p_gsLogicObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gsRandomActuator *)new gsRandomActuator(arg1,(gkString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsRandomActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RandomActuator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gsRandomActuator *result = 0 ;
  
  SWIG_check_num_args("gsRandomActuator::gsRandomActuator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRandomActuator::gsRandomActuator",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_RandomActuator",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (gsRandomActuator *)new gsRandomActuator(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsRandomActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RandomActuator__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsRandomActuator *result = 0 ;
  
  SWIG_check_num_args("gsRandomActuator::gsRandomActuator",0,0)
  result = (gsRandomActuator *)new gsRandomActuator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsRandomActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RandomActuator(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_RandomActuator__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_RandomActuator__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_RandomActuator__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_RandomActuator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsRandomActuator::gsRandomActuator(gsLogicObject *,gkString const &)\n"
    "    gsRandomActuator::gsRandomActuator(gsLogicObject *)\n"
    "    gsRandomActuator::gsRandomActuator()\n");
  lua_error(L);return 0;
}


static int _wrap_RandomActuator_setSeed(lua_State* L) {
  int SWIG_arg = 0;
  gsRandomActuator *arg1 = (gsRandomActuator *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gsRandomActuator::setSeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRandomActuator::setSeed",1,"gsRandomActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsRandomActuator::setSeed",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRandomActuator,0))){
    SWIG_fail_ptr("RandomActuator_setSeed",1,SWIGTYPE_p_gsRandomActuator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setSeed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomActuator_getSeed(lua_State* L) {
  int SWIG_arg = 0;
  gsRandomActuator *arg1 = (gsRandomActuator *) 0 ;
  int result;
  
  SWIG_check_num_args("gsRandomActuator::getSeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRandomActuator::getSeed",1,"gsRandomActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRandomActuator,0))){
    SWIG_fail_ptr("RandomActuator_getSeed",1,SWIGTYPE_p_gsRandomActuator);
  }
  
  result = (int)(arg1)->getSeed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomActuator_setDistribution(lua_State* L) {
  int SWIG_arg = 0;
  gsRandomActuator *arg1 = (gsRandomActuator *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gsRandomActuator::setDistribution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRandomActuator::setDistribution",1,"gsRandomActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsRandomActuator::setDistribution",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRandomActuator,0))){
    SWIG_fail_ptr("RandomActuator_setDistribution",1,SWIGTYPE_p_gsRandomActuator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setDistribution(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomActuator_getDistribution(lua_State* L) {
  int SWIG_arg = 0;
  gsRandomActuator *arg1 = (gsRandomActuator *) 0 ;
  int result;
  
  SWIG_check_num_args("gsRandomActuator::getDistribution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRandomActuator::getDistribution",1,"gsRandomActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRandomActuator,0))){
    SWIG_fail_ptr("RandomActuator_getDistribution",1,SWIGTYPE_p_gsRandomActuator);
  }
  
  result = (int)(arg1)->getDistribution();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomActuator_setProperty(lua_State* L) {
  int SWIG_arg = 0;
  gsRandomActuator *arg1 = (gsRandomActuator *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsRandomActuator::setProperty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRandomActuator::setProperty",1,"gsRandomActuator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsRandomActuator::setProperty",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRandomActuator,0))){
    SWIG_fail_ptr("RandomActuator_setProperty",1,SWIGTYPE_p_gsRandomActuator);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setProperty((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomActuator_getProperty(lua_State* L) {
  int SWIG_arg = 0;
  gsRandomActuator *arg1 = (gsRandomActuator *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsRandomActuator::getProperty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRandomActuator::getProperty",1,"gsRandomActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRandomActuator,0))){
    SWIG_fail_ptr("RandomActuator_getProperty",1,SWIGTYPE_p_gsRandomActuator);
  }
  
  result = (arg1)->getProperty();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomActuator_setMin(lua_State* L) {
  int SWIG_arg = 0;
  gsRandomActuator *arg1 = (gsRandomActuator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsRandomActuator::setMin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRandomActuator::setMin",1,"gsRandomActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsRandomActuator::setMin",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRandomActuator,0))){
    SWIG_fail_ptr("RandomActuator_setMin",1,SWIGTYPE_p_gsRandomActuator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setMin(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomActuator_getMin(lua_State* L) {
  int SWIG_arg = 0;
  gsRandomActuator *arg1 = (gsRandomActuator *) 0 ;
  float result;
  
  SWIG_check_num_args("gsRandomActuator::getMin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRandomActuator::getMin",1,"gsRandomActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRandomActuator,0))){
    SWIG_fail_ptr("RandomActuator_getMin",1,SWIGTYPE_p_gsRandomActuator);
  }
  
  result = (float)(arg1)->getMin();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomActuator_setMax(lua_State* L) {
  int SWIG_arg = 0;
  gsRandomActuator *arg1 = (gsRandomActuator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsRandomActuator::setMax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRandomActuator::setMax",1,"gsRandomActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsRandomActuator::setMax",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRandomActuator,0))){
    SWIG_fail_ptr("RandomActuator_setMax",1,SWIGTYPE_p_gsRandomActuator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setMax(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomActuator_getMax(lua_State* L) {
  int SWIG_arg = 0;
  gsRandomActuator *arg1 = (gsRandomActuator *) 0 ;
  float result;
  
  SWIG_check_num_args("gsRandomActuator::getMax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRandomActuator::getMax",1,"gsRandomActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRandomActuator,0))){
    SWIG_fail_ptr("RandomActuator_getMax",1,SWIGTYPE_p_gsRandomActuator);
  }
  
  result = (float)(arg1)->getMax();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomActuator_setConstant(lua_State* L) {
  int SWIG_arg = 0;
  gsRandomActuator *arg1 = (gsRandomActuator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsRandomActuator::setConstant",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRandomActuator::setConstant",1,"gsRandomActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsRandomActuator::setConstant",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRandomActuator,0))){
    SWIG_fail_ptr("RandomActuator_setConstant",1,SWIGTYPE_p_gsRandomActuator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setConstant(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomActuator_getConstant(lua_State* L) {
  int SWIG_arg = 0;
  gsRandomActuator *arg1 = (gsRandomActuator *) 0 ;
  float result;
  
  SWIG_check_num_args("gsRandomActuator::getConstant",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRandomActuator::getConstant",1,"gsRandomActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRandomActuator,0))){
    SWIG_fail_ptr("RandomActuator_getConstant",1,SWIGTYPE_p_gsRandomActuator);
  }
  
  result = (float)(arg1)->getConstant();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomActuator_setMean(lua_State* L) {
  int SWIG_arg = 0;
  gsRandomActuator *arg1 = (gsRandomActuator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsRandomActuator::setMean",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRandomActuator::setMean",1,"gsRandomActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsRandomActuator::setMean",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRandomActuator,0))){
    SWIG_fail_ptr("RandomActuator_setMean",1,SWIGTYPE_p_gsRandomActuator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setMean(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomActuator_getMean(lua_State* L) {
  int SWIG_arg = 0;
  gsRandomActuator *arg1 = (gsRandomActuator *) 0 ;
  float result;
  
  SWIG_check_num_args("gsRandomActuator::getMean",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRandomActuator::getMean",1,"gsRandomActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRandomActuator,0))){
    SWIG_fail_ptr("RandomActuator_getMean",1,SWIGTYPE_p_gsRandomActuator);
  }
  
  result = (float)(arg1)->getMean();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomActuator_setDeviation(lua_State* L) {
  int SWIG_arg = 0;
  gsRandomActuator *arg1 = (gsRandomActuator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsRandomActuator::setDeviation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRandomActuator::setDeviation",1,"gsRandomActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsRandomActuator::setDeviation",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRandomActuator,0))){
    SWIG_fail_ptr("RandomActuator_setDeviation",1,SWIGTYPE_p_gsRandomActuator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setDeviation(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomActuator_getDeviation(lua_State* L) {
  int SWIG_arg = 0;
  gsRandomActuator *arg1 = (gsRandomActuator *) 0 ;
  float result;
  
  SWIG_check_num_args("gsRandomActuator::getDeviation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRandomActuator::getDeviation",1,"gsRandomActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRandomActuator,0))){
    SWIG_fail_ptr("RandomActuator_getDeviation",1,SWIGTYPE_p_gsRandomActuator);
  }
  
  result = (float)(arg1)->getDeviation();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomActuator_setHalfLife(lua_State* L) {
  int SWIG_arg = 0;
  gsRandomActuator *arg1 = (gsRandomActuator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsRandomActuator::setHalfLife",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRandomActuator::setHalfLife",1,"gsRandomActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsRandomActuator::setHalfLife",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRandomActuator,0))){
    SWIG_fail_ptr("RandomActuator_setHalfLife",1,SWIGTYPE_p_gsRandomActuator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setHalfLife(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomActuator_getHalfLife(lua_State* L) {
  int SWIG_arg = 0;
  gsRandomActuator *arg1 = (gsRandomActuator *) 0 ;
  float result;
  
  SWIG_check_num_args("gsRandomActuator::getHalfLife",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRandomActuator::getHalfLife",1,"gsRandomActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRandomActuator,0))){
    SWIG_fail_ptr("RandomActuator_getHalfLife",1,SWIGTYPE_p_gsRandomActuator);
  }
  
  result = (float)(arg1)->getHalfLife();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RandomActuator(void *obj) {
gsRandomActuator *arg1 = (gsRandomActuator *) obj;
delete arg1;
}
static swig_lua_method swig_gsRandomActuator_methods[] = {
    {"setSeed", _wrap_RandomActuator_setSeed}, 
    {"getSeed", _wrap_RandomActuator_getSeed}, 
    {"setDistribution", _wrap_RandomActuator_setDistribution}, 
    {"getDistribution", _wrap_RandomActuator_getDistribution}, 
    {"setProperty", _wrap_RandomActuator_setProperty}, 
    {"getProperty", _wrap_RandomActuator_getProperty}, 
    {"setMin", _wrap_RandomActuator_setMin}, 
    {"getMin", _wrap_RandomActuator_getMin}, 
    {"setMax", _wrap_RandomActuator_setMax}, 
    {"getMax", _wrap_RandomActuator_getMax}, 
    {"setConstant", _wrap_RandomActuator_setConstant}, 
    {"getConstant", _wrap_RandomActuator_getConstant}, 
    {"setMean", _wrap_RandomActuator_setMean}, 
    {"getMean", _wrap_RandomActuator_getMean}, 
    {"setDeviation", _wrap_RandomActuator_setDeviation}, 
    {"getDeviation", _wrap_RandomActuator_getDeviation}, 
    {"setHalfLife", _wrap_RandomActuator_setHalfLife}, 
    {"getHalfLife", _wrap_RandomActuator_getHalfLife}, 
    {0,0}
};
static swig_lua_attribute swig_gsRandomActuator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsRandomActuator_bases[] = {0,0};
static const char *swig_gsRandomActuator_base_names[] = {"gsActuator *",0};
static swig_lua_class _wrap_class_gsRandomActuator = { "RandomActuator", &SWIGTYPE_p_gsRandomActuator,_wrap_new_RandomActuator, swig_delete_RandomActuator, swig_gsRandomActuator_methods, swig_gsRandomActuator_attributes, swig_gsRandomActuator_bases, swig_gsRandomActuator_base_names };

static int _wrap_new_SceneActuator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gsSceneActuator *result = 0 ;
  
  SWIG_check_num_args("gsSceneActuator::gsSceneActuator",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsSceneActuator::gsSceneActuator",1,"gsLogicObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsSceneActuator::gsSceneActuator",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_SceneActuator",1,SWIGTYPE_p_gsLogicObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gsSceneActuator *)new gsSceneActuator(arg1,(gkString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsSceneActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SceneActuator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gsSceneActuator *result = 0 ;
  
  SWIG_check_num_args("gsSceneActuator::gsSceneActuator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsSceneActuator::gsSceneActuator",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_SceneActuator",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (gsSceneActuator *)new gsSceneActuator(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsSceneActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SceneActuator__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsSceneActuator *result = 0 ;
  
  SWIG_check_num_args("gsSceneActuator::gsSceneActuator",0,0)
  result = (gsSceneActuator *)new gsSceneActuator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsSceneActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SceneActuator(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SceneActuator__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_SceneActuator__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_SceneActuator__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_SceneActuator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsSceneActuator::gsSceneActuator(gsLogicObject *,gkString const &)\n"
    "    gsSceneActuator::gsSceneActuator(gsLogicObject *)\n"
    "    gsSceneActuator::gsSceneActuator()\n");
  lua_error(L);return 0;
}


static int _wrap_SceneActuator_setMode(lua_State* L) {
  int SWIG_arg = 0;
  gsSceneActuator *arg1 = (gsSceneActuator *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gsSceneActuator::setMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsSceneActuator::setMode",1,"gsSceneActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsSceneActuator::setMode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsSceneActuator,0))){
    SWIG_fail_ptr("SceneActuator_setMode",1,SWIGTYPE_p_gsSceneActuator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneActuator_getMode(lua_State* L) {
  int SWIG_arg = 0;
  gsSceneActuator *arg1 = (gsSceneActuator *) 0 ;
  int result;
  
  SWIG_check_num_args("gsSceneActuator::getMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsSceneActuator::getMode",1,"gsSceneActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsSceneActuator,0))){
    SWIG_fail_ptr("SceneActuator_getMode",1,SWIGTYPE_p_gsSceneActuator);
  }
  
  result = (int)(arg1)->getMode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneActuator_setScene(lua_State* L) {
  int SWIG_arg = 0;
  gsSceneActuator *arg1 = (gsSceneActuator *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsSceneActuator::setScene",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsSceneActuator::setScene",1,"gsSceneActuator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsSceneActuator::setScene",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsSceneActuator,0))){
    SWIG_fail_ptr("SceneActuator_setScene",1,SWIGTYPE_p_gsSceneActuator);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setScene((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneActuator_getScene(lua_State* L) {
  int SWIG_arg = 0;
  gsSceneActuator *arg1 = (gsSceneActuator *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsSceneActuator::getScene",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsSceneActuator::getScene",1,"gsSceneActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsSceneActuator,0))){
    SWIG_fail_ptr("SceneActuator_getScene",1,SWIGTYPE_p_gsSceneActuator);
  }
  
  result = (arg1)->getScene();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneActuator_setCamera(lua_State* L) {
  int SWIG_arg = 0;
  gsSceneActuator *arg1 = (gsSceneActuator *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsSceneActuator::setCamera",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsSceneActuator::setCamera",1,"gsSceneActuator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsSceneActuator::setCamera",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsSceneActuator,0))){
    SWIG_fail_ptr("SceneActuator_setCamera",1,SWIGTYPE_p_gsSceneActuator);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setCamera((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneActuator_getCamera(lua_State* L) {
  int SWIG_arg = 0;
  gsSceneActuator *arg1 = (gsSceneActuator *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsSceneActuator::getCamera",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsSceneActuator::getCamera",1,"gsSceneActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsSceneActuator,0))){
    SWIG_fail_ptr("SceneActuator_getCamera",1,SWIGTYPE_p_gsSceneActuator);
  }
  
  result = (arg1)->getCamera();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SceneActuator(void *obj) {
gsSceneActuator *arg1 = (gsSceneActuator *) obj;
delete arg1;
}
static swig_lua_method swig_gsSceneActuator_methods[] = {
    {"setMode", _wrap_SceneActuator_setMode}, 
    {"getMode", _wrap_SceneActuator_getMode}, 
    {"setScene", _wrap_SceneActuator_setScene}, 
    {"getScene", _wrap_SceneActuator_getScene}, 
    {"setCamera", _wrap_SceneActuator_setCamera}, 
    {"getCamera", _wrap_SceneActuator_getCamera}, 
    {0,0}
};
static swig_lua_attribute swig_gsSceneActuator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsSceneActuator_bases[] = {0,0};
static const char *swig_gsSceneActuator_base_names[] = {"gsActuator *",0};
static swig_lua_class _wrap_class_gsSceneActuator = { "SceneActuator", &SWIGTYPE_p_gsSceneActuator,_wrap_new_SceneActuator, swig_delete_SceneActuator, swig_gsSceneActuator_methods, swig_gsSceneActuator_attributes, swig_gsSceneActuator_bases, swig_gsSceneActuator_base_names };

static int _wrap_new_SoundActuator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gsSoundActuator *result = 0 ;
  
  SWIG_check_num_args("gsSoundActuator::gsSoundActuator",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsSoundActuator::gsSoundActuator",1,"gsLogicObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsSoundActuator::gsSoundActuator",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_SoundActuator",1,SWIGTYPE_p_gsLogicObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gsSoundActuator *)new gsSoundActuator(arg1,(gkString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsSoundActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SoundActuator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gsSoundActuator *result = 0 ;
  
  SWIG_check_num_args("gsSoundActuator::gsSoundActuator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsSoundActuator::gsSoundActuator",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_SoundActuator",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (gsSoundActuator *)new gsSoundActuator(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsSoundActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SoundActuator__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsSoundActuator *result = 0 ;
  
  SWIG_check_num_args("gsSoundActuator::gsSoundActuator",0,0)
  result = (gsSoundActuator *)new gsSoundActuator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsSoundActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SoundActuator(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SoundActuator__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_SoundActuator__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_SoundActuator__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_SoundActuator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsSoundActuator::gsSoundActuator(gsLogicObject *,gkString const &)\n"
    "    gsSoundActuator::gsSoundActuator(gsLogicObject *)\n"
    "    gsSoundActuator::gsSoundActuator()\n");
  lua_error(L);return 0;
}


static int _wrap_SoundActuator_setType(lua_State* L) {
  int SWIG_arg = 0;
  gsSoundActuator *arg1 = (gsSoundActuator *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gsSoundActuator::setType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsSoundActuator::setType",1,"gsSoundActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsSoundActuator::setType",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsSoundActuator,0))){
    SWIG_fail_ptr("SoundActuator_setType",1,SWIGTYPE_p_gsSoundActuator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundActuator_getType(lua_State* L) {
  int SWIG_arg = 0;
  gsSoundActuator *arg1 = (gsSoundActuator *) 0 ;
  int result;
  
  SWIG_check_num_args("gsSoundActuator::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsSoundActuator::getType",1,"gsSoundActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsSoundActuator,0))){
    SWIG_fail_ptr("SoundActuator_getType",1,SWIGTYPE_p_gsSoundActuator);
  }
  
  result = (int)(arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundActuator_setSoundFile(lua_State* L) {
  int SWIG_arg = 0;
  gsSoundActuator *arg1 = (gsSoundActuator *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsSoundActuator::setSoundFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsSoundActuator::setSoundFile",1,"gsSoundActuator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsSoundActuator::setSoundFile",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsSoundActuator,0))){
    SWIG_fail_ptr("SoundActuator_setSoundFile",1,SWIGTYPE_p_gsSoundActuator);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->setSoundFile((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundActuator_getSoundFile(lua_State* L) {
  int SWIG_arg = 0;
  gsSoundActuator *arg1 = (gsSoundActuator *) 0 ;
  gkString result;
  
  SWIG_check_num_args("gsSoundActuator::getSoundFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsSoundActuator::getSoundFile",1,"gsSoundActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsSoundActuator,0))){
    SWIG_fail_ptr("SoundActuator_getSoundFile",1,SWIGTYPE_p_gsSoundActuator);
  }
  
  result = (arg1)->getSoundFile();
  
  lua_pushstring(L, (&result)->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SoundActuator(void *obj) {
gsSoundActuator *arg1 = (gsSoundActuator *) obj;
delete arg1;
}
static swig_lua_method swig_gsSoundActuator_methods[] = {
    {"setType", _wrap_SoundActuator_setType}, 
    {"getType", _wrap_SoundActuator_getType}, 
    {"setSoundFile", _wrap_SoundActuator_setSoundFile}, 
    {"getSoundFile", _wrap_SoundActuator_getSoundFile}, 
    {0,0}
};
static swig_lua_attribute swig_gsSoundActuator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsSoundActuator_bases[] = {0,0};
static const char *swig_gsSoundActuator_base_names[] = {"gsActuator *",0};
static swig_lua_class _wrap_class_gsSoundActuator = { "SoundActuator", &SWIGTYPE_p_gsSoundActuator,_wrap_new_SoundActuator, swig_delete_SoundActuator, swig_gsSoundActuator_methods, swig_gsSoundActuator_attributes, swig_gsSoundActuator_bases, swig_gsSoundActuator_base_names };

static int _wrap_new_StateActuator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gsStateActuator *result = 0 ;
  
  SWIG_check_num_args("gsStateActuator::gsStateActuator",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsStateActuator::gsStateActuator",1,"gsLogicObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsStateActuator::gsStateActuator",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_StateActuator",1,SWIGTYPE_p_gsLogicObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gsStateActuator *)new gsStateActuator(arg1,(gkString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsStateActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StateActuator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gsStateActuator *result = 0 ;
  
  SWIG_check_num_args("gsStateActuator::gsStateActuator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsStateActuator::gsStateActuator",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_StateActuator",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (gsStateActuator *)new gsStateActuator(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsStateActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StateActuator__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsStateActuator *result = 0 ;
  
  SWIG_check_num_args("gsStateActuator::gsStateActuator",0,0)
  result = (gsStateActuator *)new gsStateActuator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsStateActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StateActuator(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_StateActuator__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_StateActuator__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_StateActuator__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_StateActuator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsStateActuator::gsStateActuator(gsLogicObject *,gkString const &)\n"
    "    gsStateActuator::gsStateActuator(gsLogicObject *)\n"
    "    gsStateActuator::gsStateActuator()\n");
  lua_error(L);return 0;
}


static int _wrap_StateActuator_setMask(lua_State* L) {
  int SWIG_arg = 0;
  gsStateActuator *arg1 = (gsStateActuator *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gsStateActuator::setMask",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsStateActuator::setMask",1,"gsStateActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsStateActuator::setMask",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsStateActuator,0))){
    SWIG_fail_ptr("StateActuator_setMask",1,SWIGTYPE_p_gsStateActuator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setMask(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StateActuator_getMask(lua_State* L) {
  int SWIG_arg = 0;
  gsStateActuator *arg1 = (gsStateActuator *) 0 ;
  int result;
  
  SWIG_check_num_args("gsStateActuator::getMask",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsStateActuator::getMask",1,"gsStateActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsStateActuator,0))){
    SWIG_fail_ptr("StateActuator_getMask",1,SWIGTYPE_p_gsStateActuator);
  }
  
  result = (int)(arg1)->getMask();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StateActuator_setOp(lua_State* L) {
  int SWIG_arg = 0;
  gsStateActuator *arg1 = (gsStateActuator *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gsStateActuator::setOp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsStateActuator::setOp",1,"gsStateActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsStateActuator::setOp",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsStateActuator,0))){
    SWIG_fail_ptr("StateActuator_setOp",1,SWIGTYPE_p_gsStateActuator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setOp(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StateActuator_getOp(lua_State* L) {
  int SWIG_arg = 0;
  gsStateActuator *arg1 = (gsStateActuator *) 0 ;
  int result;
  
  SWIG_check_num_args("gsStateActuator::getOp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsStateActuator::getOp",1,"gsStateActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsStateActuator,0))){
    SWIG_fail_ptr("StateActuator_getOp",1,SWIGTYPE_p_gsStateActuator);
  }
  
  result = (int)(arg1)->getOp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StateActuator(void *obj) {
gsStateActuator *arg1 = (gsStateActuator *) obj;
delete arg1;
}
static swig_lua_method swig_gsStateActuator_methods[] = {
    {"setMask", _wrap_StateActuator_setMask}, 
    {"getMask", _wrap_StateActuator_getMask}, 
    {"setOp", _wrap_StateActuator_setOp}, 
    {"getOp", _wrap_StateActuator_getOp}, 
    {0,0}
};
static swig_lua_attribute swig_gsStateActuator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsStateActuator_bases[] = {0,0};
static const char *swig_gsStateActuator_base_names[] = {"gsActuator *",0};
static swig_lua_class _wrap_class_gsStateActuator = { "StateActuator", &SWIGTYPE_p_gsStateActuator,_wrap_new_StateActuator, swig_delete_StateActuator, swig_gsStateActuator_methods, swig_gsStateActuator_attributes, swig_gsStateActuator_bases, swig_gsStateActuator_base_names };

static int _wrap_new_VisibilityActuator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gsVisibilityActuator *result = 0 ;
  
  SWIG_check_num_args("gsVisibilityActuator::gsVisibilityActuator",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsVisibilityActuator::gsVisibilityActuator",1,"gsLogicObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsVisibilityActuator::gsVisibilityActuator",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_VisibilityActuator",1,SWIGTYPE_p_gsLogicObject);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gsVisibilityActuator *)new gsVisibilityActuator(arg1,(gkString const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsVisibilityActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VisibilityActuator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsLogicObject *arg1 = (gsLogicObject *) 0 ;
  gsVisibilityActuator *result = 0 ;
  
  SWIG_check_num_args("gsVisibilityActuator::gsVisibilityActuator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsVisibilityActuator::gsVisibilityActuator",1,"gsLogicObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLogicObject,0))){
    SWIG_fail_ptr("new_VisibilityActuator",1,SWIGTYPE_p_gsLogicObject);
  }
  
  result = (gsVisibilityActuator *)new gsVisibilityActuator(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsVisibilityActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VisibilityActuator__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gsVisibilityActuator *result = 0 ;
  
  SWIG_check_num_args("gsVisibilityActuator::gsVisibilityActuator",0,0)
  result = (gsVisibilityActuator *)new gsVisibilityActuator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsVisibilityActuator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VisibilityActuator(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_VisibilityActuator__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_VisibilityActuator__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsLogicObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_VisibilityActuator__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_VisibilityActuator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsVisibilityActuator::gsVisibilityActuator(gsLogicObject *,gkString const &)\n"
    "    gsVisibilityActuator::gsVisibilityActuator(gsLogicObject *)\n"
    "    gsVisibilityActuator::gsVisibilityActuator()\n");
  lua_error(L);return 0;
}


static int _wrap_VisibilityActuator_setFlag(lua_State* L) {
  int SWIG_arg = 0;
  gsVisibilityActuator *arg1 = (gsVisibilityActuator *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gsVisibilityActuator::setFlag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsVisibilityActuator::setFlag",1,"gsVisibilityActuator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsVisibilityActuator::setFlag",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVisibilityActuator,0))){
    SWIG_fail_ptr("VisibilityActuator_setFlag",1,SWIGTYPE_p_gsVisibilityActuator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setFlag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VisibilityActuator_getFlag(lua_State* L) {
  int SWIG_arg = 0;
  gsVisibilityActuator *arg1 = (gsVisibilityActuator *) 0 ;
  int result;
  
  SWIG_check_num_args("gsVisibilityActuator::getFlag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsVisibilityActuator::getFlag",1,"gsVisibilityActuator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsVisibilityActuator,0))){
    SWIG_fail_ptr("VisibilityActuator_getFlag",1,SWIGTYPE_p_gsVisibilityActuator);
  }
  
  result = (int)(arg1)->getFlag();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_VisibilityActuator(void *obj) {
gsVisibilityActuator *arg1 = (gsVisibilityActuator *) obj;
delete arg1;
}
static swig_lua_method swig_gsVisibilityActuator_methods[] = {
    {"setFlag", _wrap_VisibilityActuator_setFlag}, 
    {"getFlag", _wrap_VisibilityActuator_getFlag}, 
    {0,0}
};
static swig_lua_attribute swig_gsVisibilityActuator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsVisibilityActuator_bases[] = {0,0};
static const char *swig_gsVisibilityActuator_base_names[] = {"gsActuator *",0};
static swig_lua_class _wrap_class_gsVisibilityActuator = { "VisibilityActuator", &SWIGTYPE_p_gsVisibilityActuator,_wrap_new_VisibilityActuator, swig_delete_VisibilityActuator, swig_gsVisibilityActuator_methods, swig_gsVisibilityActuator_attributes, swig_gsVisibilityActuator_bases, swig_gsVisibilityActuator_base_names };

static int _wrap_new_DynamicsWorld(lua_State* L) {
  int SWIG_arg = 0;
  gkDynamicsWorld *arg1 = (gkDynamicsWorld *) 0 ;
  gsDynamicsWorld *result = 0 ;
  
  SWIG_check_num_args("gsDynamicsWorld::gsDynamicsWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsDynamicsWorld::gsDynamicsWorld",1,"gkDynamicsWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gkDynamicsWorld,0))){
    SWIG_fail_ptr("new_DynamicsWorld",1,SWIGTYPE_p_gkDynamicsWorld);
  }
  
  result = (gsDynamicsWorld *)new gsDynamicsWorld(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsDynamicsWorld,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicsWorld_exportBullet(lua_State* L) {
  int SWIG_arg = 0;
  gsDynamicsWorld *arg1 = (gsDynamicsWorld *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  
  SWIG_check_num_args("gsDynamicsWorld::exportBullet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsDynamicsWorld::exportBullet",1,"gsDynamicsWorld *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsDynamicsWorld::exportBullet",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsDynamicsWorld,0))){
    SWIG_fail_ptr("DynamicsWorld_exportBullet",1,SWIGTYPE_p_gsDynamicsWorld);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  (arg1)->exportBullet((gkString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DynamicsWorld(void *obj) {
gsDynamicsWorld *arg1 = (gsDynamicsWorld *) obj;
delete arg1;
}
static swig_lua_method swig_gsDynamicsWorld_methods[] = {
    {"exportBullet", _wrap_DynamicsWorld_exportBullet}, 
    {0,0}
};
static swig_lua_attribute swig_gsDynamicsWorld_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsDynamicsWorld_bases[] = {0};
static const char *swig_gsDynamicsWorld_base_names[] = {0};
static swig_lua_class _wrap_class_gsDynamicsWorld = { "DynamicsWorld", &SWIGTYPE_p_gsDynamicsWorld,_wrap_new_DynamicsWorld, swig_delete_DynamicsWorld, swig_gsDynamicsWorld_methods, swig_gsDynamicsWorld_attributes, swig_gsDynamicsWorld_bases, swig_gsDynamicsWorld_base_names };

static int _wrap_new_RayTest(lua_State* L) {
  int SWIG_arg = 0;
  gsRayTest *result = 0 ;
  
  SWIG_check_num_args("gsRayTest::gsRayTest",0,0)
  result = (gsRayTest *)new gsRayTest();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsRayTest,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayTest_cast(lua_State* L) {
  int SWIG_arg = 0;
  gsRayTest *arg1 = (gsRayTest *) 0 ;
  gsRay *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("gsRayTest::cast",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRayTest::cast",1,"gsRayTest *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsRayTest::cast",2,"gsRay const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRayTest,0))){
    SWIG_fail_ptr("RayTest_cast",1,SWIGTYPE_p_gsRayTest);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsRay,0))){
    SWIG_fail_ptr("RayTest_cast",2,SWIGTYPE_p_gsRay);
  }
  
  result = (bool)(arg1)->cast((gsRay const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayTest_getHitPoint(lua_State* L) {
  int SWIG_arg = 0;
  gsRayTest *arg1 = (gsRayTest *) 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsRayTest::getHitPoint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRayTest::getHitPoint",1,"gsRayTest *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRayTest,0))){
    SWIG_fail_ptr("RayTest_getHitPoint",1,SWIGTYPE_p_gsRayTest);
  }
  
  result = (arg1)->getHitPoint();
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayTest_getHitNormal(lua_State* L) {
  int SWIG_arg = 0;
  gsRayTest *arg1 = (gsRayTest *) 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsRayTest::getHitNormal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRayTest::getHitNormal",1,"gsRayTest *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRayTest,0))){
    SWIG_fail_ptr("RayTest_getHitNormal",1,SWIGTYPE_p_gsRayTest);
  }
  
  result = (arg1)->getHitNormal();
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayTest_getObject(lua_State* L) {
  int SWIG_arg = 0;
  gsRayTest *arg1 = (gsRayTest *) 0 ;
  gkGameObject *result = 0 ;
  
  SWIG_check_num_args("gsRayTest::getObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRayTest::getObject",1,"gsRayTest *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRayTest,0))){
    SWIG_fail_ptr("RayTest_getObject",1,SWIGTYPE_p_gsRayTest);
  }
  
  result = (gkGameObject *)(arg1)->getObject();
  if (result) {
    SWIG_arg += gsWrapGameObject(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayTest_getHitFraction(lua_State* L) {
  int SWIG_arg = 0;
  gsRayTest *arg1 = (gsRayTest *) 0 ;
  float result;
  
  SWIG_check_num_args("gsRayTest::getHitFraction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsRayTest::getHitFraction",1,"gsRayTest *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsRayTest,0))){
    SWIG_fail_ptr("RayTest_getHitFraction",1,SWIGTYPE_p_gsRayTest);
  }
  
  result = (float)(arg1)->getHitFraction();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RayTest(void *obj) {
gsRayTest *arg1 = (gsRayTest *) obj;
delete arg1;
}
static swig_lua_method swig_gsRayTest_methods[] = {
    {"cast", _wrap_RayTest_cast}, 
    {"getHitPoint", _wrap_RayTest_getHitPoint}, 
    {"getHitNormal", _wrap_RayTest_getHitNormal}, 
    {"getObject", _wrap_RayTest_getObject}, 
    {"getHitFraction", _wrap_RayTest_getHitFraction}, 
    {0,0}
};
static swig_lua_attribute swig_gsRayTest_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsRayTest_bases[] = {0};
static const char *swig_gsRayTest_base_names[] = {0};
static swig_lua_class _wrap_class_gsRayTest = { "RayTest", &SWIGTYPE_p_gsRayTest,_wrap_new_RayTest, swig_delete_RayTest, swig_gsRayTest_methods, swig_gsRayTest_attributes, swig_gsRayTest_bases, swig_gsRayTest_base_names };

static int _wrap_new_SweptTest__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gsSweptTest *result = 0 ;
  
  SWIG_check_num_args("gsSweptTest::gsSweptTest",0,0)
  result = (gsSweptTest *)new gsSweptTest();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsSweptTest,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SweptTest__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gsArray< gsGameObject,gkGameObject > *arg1 = 0 ;
  gsSweptTest *result = 0 ;
  
  SWIG_check_num_args("gsSweptTest::gsSweptTest",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gsSweptTest::gsSweptTest",1,"gsArray< gsGameObject,gkGameObject > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsArrayT_gsGameObject_gkGameObject_t,0))){
    SWIG_fail_ptr("new_SweptTest",1,SWIGTYPE_p_gsArrayT_gsGameObject_gkGameObject_t);
  }
  
  result = (gsSweptTest *)new gsSweptTest(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsSweptTest,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SweptTest(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SweptTest__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gsArrayT_gsGameObject_gkGameObject_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_SweptTest__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_SweptTest'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gsSweptTest::gsSweptTest()\n"
    "    gsSweptTest::gsSweptTest(gsArray< gsGameObject,gkGameObject > &)\n");
  lua_error(L);return 0;
}


static int _wrap_SweptTest_collides(lua_State* L) {
  int SWIG_arg = 0;
  gsSweptTest *arg1 = (gsSweptTest *) 0 ;
  gsRay *arg2 = 0 ;
  float arg3 ;
  bool result;
  
  SWIG_check_num_args("gsSweptTest::collides",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsSweptTest::collides",1,"gsSweptTest *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsSweptTest::collides",2,"gsRay const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsSweptTest::collides",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsSweptTest,0))){
    SWIG_fail_ptr("SweptTest_collides",1,SWIGTYPE_p_gsSweptTest);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsRay,0))){
    SWIG_fail_ptr("SweptTest_collides",2,SWIGTYPE_p_gsRay);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)(arg1)->collides((gsRay const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SweptTest_getHitPoint(lua_State* L) {
  int SWIG_arg = 0;
  gsSweptTest *arg1 = (gsSweptTest *) 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsSweptTest::getHitPoint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsSweptTest::getHitPoint",1,"gsSweptTest *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsSweptTest,0))){
    SWIG_fail_ptr("SweptTest_getHitPoint",1,SWIGTYPE_p_gsSweptTest);
  }
  
  result = (arg1)->getHitPoint();
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SweptTest_getHitNormal(lua_State* L) {
  int SWIG_arg = 0;
  gsSweptTest *arg1 = (gsSweptTest *) 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsSweptTest::getHitNormal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsSweptTest::getHitNormal",1,"gsSweptTest *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsSweptTest,0))){
    SWIG_fail_ptr("SweptTest_getHitNormal",1,SWIGTYPE_p_gsSweptTest);
  }
  
  result = (arg1)->getHitNormal();
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SweptTest_getReflection(lua_State* L) {
  int SWIG_arg = 0;
  gsSweptTest *arg1 = (gsSweptTest *) 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsSweptTest::getReflection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsSweptTest::getReflection",1,"gsSweptTest *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsSweptTest,0))){
    SWIG_fail_ptr("SweptTest_getReflection",1,SWIGTYPE_p_gsSweptTest);
  }
  
  result = (arg1)->getReflection();
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SweptTest_getSliding(lua_State* L) {
  int SWIG_arg = 0;
  gsSweptTest *arg1 = (gsSweptTest *) 0 ;
  gsVector3 result;
  
  SWIG_check_num_args("gsSweptTest::getSliding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsSweptTest::getSliding",1,"gsSweptTest *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsSweptTest,0))){
    SWIG_fail_ptr("SweptTest_getSliding",1,SWIGTYPE_p_gsSweptTest);
  }
  
  result = (arg1)->getSliding();
  {
    gsVector3 * resultptr = new gsVector3((const gsVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gsVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SweptTest_getObject(lua_State* L) {
  int SWIG_arg = 0;
  gsSweptTest *arg1 = (gsSweptTest *) 0 ;
  gkGameObject *result = 0 ;
  
  SWIG_check_num_args("gsSweptTest::getObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsSweptTest::getObject",1,"gsSweptTest *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsSweptTest,0))){
    SWIG_fail_ptr("SweptTest_getObject",1,SWIGTYPE_p_gsSweptTest);
  }
  
  result = (gkGameObject *)(arg1)->getObject();
  if (result) {
    SWIG_arg += gsWrapGameObject(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SweptTest(void *obj) {
gsSweptTest *arg1 = (gsSweptTest *) obj;
delete arg1;
}
static swig_lua_method swig_gsSweptTest_methods[] = {
    {"collides", _wrap_SweptTest_collides}, 
    {"getHitPoint", _wrap_SweptTest_getHitPoint}, 
    {"getHitNormal", _wrap_SweptTest_getHitNormal}, 
    {"getReflection", _wrap_SweptTest_getReflection}, 
    {"getSliding", _wrap_SweptTest_getSliding}, 
    {"getObject", _wrap_SweptTest_getObject}, 
    {0,0}
};
static swig_lua_attribute swig_gsSweptTest_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsSweptTest_bases[] = {0};
static const char *swig_gsSweptTest_base_names[] = {0};
static swig_lua_class _wrap_class_gsSweptTest = { "SweptTest", &SWIGTYPE_p_gsSweptTest,_wrap_new_SweptTest, swig_delete_SweptTest, swig_gsSweptTest_methods, swig_gsSweptTest_attributes, swig_gsSweptTest_bases, swig_gsSweptTest_base_names };

static int _wrap_new_Character(lua_State* L) {
  int SWIG_arg = 0;
  gkCharacter *arg1 = (gkCharacter *) 0 ;
  gsCharacter *result = 0 ;
  
  SWIG_check_num_args("gsCharacter::gsCharacter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsCharacter::gsCharacter",1,"gkCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gkCharacter,0))){
    SWIG_fail_ptr("new_Character",1,SWIGTYPE_p_gkCharacter);
  }
  
  result = (gsCharacter *)new gsCharacter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsCharacter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Character_getObject(lua_State* L) {
  int SWIG_arg = 0;
  gsCharacter *arg1 = (gsCharacter *) 0 ;
  gkGameObject *result = 0 ;
  
  SWIG_check_num_args("gsCharacter::getObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsCharacter::getObject",1,"gsCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsCharacter,0))){
    SWIG_fail_ptr("Character_getObject",1,SWIGTYPE_p_gsCharacter);
  }
  
  result = (gkGameObject *)(arg1)->getObject();
  if (result) {
    SWIG_arg += gsWrapGameObject(L, result); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Character_setLinearVelocity(lua_State* L) {
  int SWIG_arg = 0;
  gsCharacter *arg1 = (gsCharacter *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  SWIG_check_num_args("gsCharacter::setLinearVelocity",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsCharacter::setLinearVelocity",1,"gsCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsCharacter::setLinearVelocity",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsCharacter::setLinearVelocity",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gsCharacter::setLinearVelocity",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("gsCharacter::setLinearVelocity",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("gsCharacter::setLinearVelocity",6,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsCharacter,0))){
    SWIG_fail_ptr("Character_setLinearVelocity",1,SWIGTYPE_p_gsCharacter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  (arg1)->setLinearVelocity(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Character_setGravity(lua_State* L) {
  int SWIG_arg = 0;
  gsCharacter *arg1 = (gsCharacter *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsCharacter::setGravity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsCharacter::setGravity",1,"gsCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsCharacter::setGravity",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsCharacter,0))){
    SWIG_fail_ptr("Character_setGravity",1,SWIGTYPE_p_gsCharacter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setGravity(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Character_setRotation(lua_State* L) {
  int SWIG_arg = 0;
  gsCharacter *arg1 = (gsCharacter *) 0 ;
  gsVector3 *arg2 = 0 ;
  float arg3 ;
  
  SWIG_check_num_args("gsCharacter::setRotation",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsCharacter::setRotation",1,"gsCharacter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gsCharacter::setRotation",2,"gsVector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gsCharacter::setRotation",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsCharacter,0))){
    SWIG_fail_ptr("Character_setRotation",1,SWIGTYPE_p_gsCharacter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gsVector3,0))){
    SWIG_fail_ptr("Character_setRotation",2,SWIGTYPE_p_gsVector3);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setRotation((gsVector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Character_setJumpSpeed(lua_State* L) {
  int SWIG_arg = 0;
  gsCharacter *arg1 = (gsCharacter *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gsCharacter::setJumpSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsCharacter::setJumpSpeed",1,"gsCharacter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gsCharacter::setJumpSpeed",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsCharacter,0))){
    SWIG_fail_ptr("Character_setJumpSpeed",1,SWIGTYPE_p_gsCharacter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setJumpSpeed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Character_jump(lua_State* L) {
  int SWIG_arg = 0;
  gsCharacter *arg1 = (gsCharacter *) 0 ;
  
  SWIG_check_num_args("gsCharacter::jump",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsCharacter::jump",1,"gsCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsCharacter,0))){
    SWIG_fail_ptr("Character_jump",1,SWIGTYPE_p_gsCharacter);
  }
  
  (arg1)->jump();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Character_isOnGround(lua_State* L) {
  int SWIG_arg = 0;
  gsCharacter *arg1 = (gsCharacter *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsCharacter::isOnGround",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsCharacter::isOnGround",1,"gsCharacter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsCharacter,0))){
    SWIG_fail_ptr("Character_isOnGround",1,SWIGTYPE_p_gsCharacter);
  }
  
  result = (bool)(arg1)->isOnGround();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Character(void *obj) {
gsCharacter *arg1 = (gsCharacter *) obj;
delete arg1;
}
static swig_lua_method swig_gsCharacter_methods[] = {
    {"getObject", _wrap_Character_getObject}, 
    {"setLinearVelocity", _wrap_Character_setLinearVelocity}, 
    {"setGravity", _wrap_Character_setGravity}, 
    {"setRotation", _wrap_Character_setRotation}, 
    {"setJumpSpeed", _wrap_Character_setJumpSpeed}, 
    {"jump", _wrap_Character_jump}, 
    {"isOnGround", _wrap_Character_isOnGround}, 
    {0,0}
};
static swig_lua_attribute swig_gsCharacter_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsCharacter_bases[] = {0};
static const char *swig_gsCharacter_base_names[] = {0};
static swig_lua_class _wrap_class_gsCharacter = { "Character", &SWIGTYPE_p_gsCharacter,_wrap_new_Character, swig_delete_Character, swig_gsCharacter_methods, swig_gsCharacter_attributes, swig_gsCharacter_bases, swig_gsCharacter_base_names };

static int _wrap_LuaScript_execute(lua_State* L) {
  int SWIG_arg = 0;
  gsLuaScript *arg1 = (gsLuaScript *) 0 ;
  bool result;
  
  SWIG_check_num_args("gsLuaScript::execute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsLuaScript::execute",1,"gsLuaScript *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLuaScript,0))){
    SWIG_fail_ptr("LuaScript_execute",1,SWIGTYPE_p_gsLuaScript);
  }
  
  result = (bool)(arg1)->execute();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaScript_getName(lua_State* L) {
  int SWIG_arg = 0;
  gsLuaScript *arg1 = (gsLuaScript *) 0 ;
  gkString *result = 0 ;
  
  SWIG_check_num_args("gsLuaScript::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsLuaScript::getName",1,"gsLuaScript *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLuaScript,0))){
    SWIG_fail_ptr("LuaScript_getName",1,SWIGTYPE_p_gsLuaScript);
  }
  
  result = (gkString *) &(arg1)->getName();
  
  lua_pushstring(L, result->c_str()); SWIG_arg++;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LuaScript(void *obj) {
gsLuaScript *arg1 = (gsLuaScript *) obj;
delete arg1;
}
static swig_lua_method swig_gsLuaScript_methods[] = {
    {"execute", _wrap_LuaScript_execute}, 
    {"getName", _wrap_LuaScript_getName}, 
    {0,0}
};
static swig_lua_attribute swig_gsLuaScript_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsLuaScript_bases[] = {0};
static const char *swig_gsLuaScript_base_names[] = {0};
static swig_lua_class _wrap_class_gsLuaScript = { "LuaScript", &SWIGTYPE_p_gsLuaScript,0, swig_delete_LuaScript, swig_gsLuaScript_methods, swig_gsLuaScript_attributes, swig_gsLuaScript_bases, swig_gsLuaScript_base_names };

static int _wrap_new_LuaManager(lua_State* L) {
  int SWIG_arg = 0;
  gsLuaManager *result = 0 ;
  
  SWIG_check_num_args("gsLuaManager::gsLuaManager",0,0)
  result = (gsLuaManager *)new gsLuaManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gsLuaManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaManager_getScript(lua_State* L) {
  int SWIG_arg = 0;
  gsLuaManager *arg1 = (gsLuaManager *) 0 ;
  gkString *arg2 = 0 ;
  gkString temp2 ;
  gkLuaScript *result = 0 ;
  
  SWIG_check_num_args("gsLuaManager::getScript",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsLuaManager::getScript",1,"gsLuaManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsLuaManager::getScript",2,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLuaManager,0))){
    SWIG_fail_ptr("LuaManager_getScript",1,SWIGTYPE_p_gsLuaManager);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  result = (gkLuaScript *)(arg1)->getScript((gkString const &)*arg2);
  if (result) {
    SWIG_arg += GS_LUA_OBJECT_STORE(result, LuaScript); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaManager_create(lua_State* L) {
  int SWIG_arg = 0;
  gsLuaManager *arg1 = (gsLuaManager *) 0 ;
  gkString *arg2 = 0 ;
  gkString *arg3 = 0 ;
  gkString temp2 ;
  gkString temp3 ;
  gkLuaScript *result = 0 ;
  
  SWIG_check_num_args("gsLuaManager::create",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gsLuaManager::create",1,"gsLuaManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("gsLuaManager::create",2,"gkString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("gsLuaManager::create",3,"gkString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gsLuaManager,0))){
    SWIG_fail_ptr("LuaManager_create",1,SWIGTYPE_p_gsLuaManager);
  }
  
  
  temp2 = gkString((const char*)lua_tostring(L, 2));
  arg2 = &temp2;
  
  
  temp3 = gkString((const char*)lua_tostring(L, 3));
  arg3 = &temp3;
  
  result = (gkLuaScript *)(arg1)->create((gkString const &)*arg2,(gkString const &)*arg3);
  if (result) {
    SWIG_arg += GS_LUA_OBJECT_STORE(result, LuaScript); 
  } 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LuaManager(void *obj) {
gsLuaManager *arg1 = (gsLuaManager *) obj;
delete arg1;
}
static swig_lua_method swig_gsLuaManager_methods[] = {
    {"getScript", _wrap_LuaManager_getScript}, 
    {"create", _wrap_LuaManager_create}, 
    {0,0}
};
static swig_lua_attribute swig_gsLuaManager_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_gsLuaManager_bases[] = {0};
static const char *swig_gsLuaManager_base_names[] = {0};
static swig_lua_class _wrap_class_gsLuaManager = { "LuaManager", &SWIGTYPE_p_gsLuaManager,_wrap_new_LuaManager, swig_delete_LuaManager, swig_gsLuaManager_methods, swig_gsLuaManager_attributes, swig_gsLuaManager_bases, swig_gsLuaManager_base_names };

#ifdef __cplusplus
}
#endif

static const struct luaL_reg swig_commands[] = {
    { "Vec3Negate", _wrap_Vec3Negate},
    { "Vec3AddVec3", _wrap_Vec3AddVec3},
    { "Vec3SubVec3", _wrap_Vec3SubVec3},
    { "Vec3MulVec3", _wrap_Vec3MulVec3},
    { "Vec3DivVec3", _wrap_Vec3DivVec3},
    { "Vec3Mulf", _wrap_Vec3Mulf},
    { "Vec3Divf", _wrap_Vec3Divf},
    { "QuatNegate", _wrap_QuatNegate},
    { "QuatAddQuat", _wrap_QuatAddQuat},
    { "QuatSubQuat", _wrap_QuatSubQuat},
    { "QuatMulQuat", _wrap_QuatMulQuat},
    { "QuatMulf", _wrap_QuatMulf},
    { "QuatMulVec3", _wrap_QuatMulVec3},
    { "Vec3RotationTo", _wrap_Vec3RotationTo},
    { "getNumJoysticks", _wrap_getNumJoysticks},
    { "getHUD", _wrap_getHUD},
    { "getActiveScene", _wrap_getActiveScene},
    { "sendMessage", _wrap_sendMessage},
    { "DebugPrint", _wrap_DebugPrint},
    { "SetCompositorChain", _wrap_SetCompositorChain},
    { "getCurrentController", _wrap_getCurrentController},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
{ SWIG_LUA_INT,     (char *)"OGRE_RS_GL", (long) GS_RS_GL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"OGRE_RS_GLES", (long) GS_RS_GLES, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"OGRE_RS_D3D9", (long) GS_RS_D3D9, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"OGRE_RS_D3D10", (long) GS_RS_D3D10, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"OGRE_RS_D3D11", (long) GS_RS_D3D11, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PROP_NULL", (long) PROP_NULL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PROP_BOOL", (long) PROP_BOOL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PROP_NUMBER", (long) PROP_NUMBER, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PROP_STRING", (long) PROP_STRING, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TS_LOCAL", (long) TS_LOCAL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TS_PARENT", (long) TS_PARENT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TS_WORLD", (long) TS_WORLD, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"OBT_UNKNOWN", (long) OBT_UNKNOWN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"OBT_CAMERA", (long) OBT_CAMERA, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"OBT_LIGHT", (long) OBT_LIGHT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"OBT_ENTITY", (long) OBT_ENTITY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"OBT_EMPTY", (long) OBT_EMPTY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"OBT_SKELETON", (long) OBT_SKELETON, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"EVT_TICK", (long) EVT_TICK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LEFT", (long) LEFT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RIGHT", (long) RIGHT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MIDDLE", (long) MIDDLE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"COP_ADD", (long) COP_ADD, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"COP_DEL", (long) COP_DEL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"COP_REPLACE", (long) COP_REPLACE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"COP_RESET", (long) COP_RESET, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_NONE", (long) KC_NONE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_AKEY", (long) KC_AKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_BKEY", (long) KC_BKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_CKEY", (long) KC_CKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_DKEY", (long) KC_DKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_EKEY", (long) KC_EKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_FKEY", (long) KC_FKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_GKEY", (long) KC_GKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_HKEY", (long) KC_HKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_IKEY", (long) KC_IKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_JKEY", (long) KC_JKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_KKEY", (long) KC_KKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_LKEY", (long) KC_LKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_MKEY", (long) KC_MKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_NKEY", (long) KC_NKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_OKEY", (long) KC_OKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_PKEY", (long) KC_PKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_QKEY", (long) KC_QKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_RKEY", (long) KC_RKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_SKEY", (long) KC_SKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_TKEY", (long) KC_TKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_UKEY", (long) KC_UKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_VKEY", (long) KC_VKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_WKEY", (long) KC_WKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_XKEY", (long) KC_XKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_YKEY", (long) KC_YKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_ZKEY", (long) KC_ZKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_ZEROKEY", (long) KC_ZEROKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_ONEKEY", (long) KC_ONEKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_TWOKEY", (long) KC_TWOKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_THREEKEY", (long) KC_THREEKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_FOURKEY", (long) KC_FOURKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_FIVEKEY", (long) KC_FIVEKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_SIXKEY", (long) KC_SIXKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_SEVENKEY", (long) KC_SEVENKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_EIGHTKEY", (long) KC_EIGHTKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_NINEKEY", (long) KC_NINEKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_CAPSLOCKKEY", (long) KC_CAPSLOCKKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_LEFTCTRLKEY", (long) KC_LEFTCTRLKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_LEFTALTKEY", (long) KC_LEFTALTKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_RIGHTALTKEY", (long) KC_RIGHTALTKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_RIGHTCTRLKEY", (long) KC_RIGHTCTRLKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_RIGHTSHIFTKEY", (long) KC_RIGHTSHIFTKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_LEFTSHIFTKEY", (long) KC_LEFTSHIFTKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_ESCKEY", (long) KC_ESCKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_TABKEY", (long) KC_TABKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_RETKEY", (long) KC_RETKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_SPACEKEY", (long) KC_SPACEKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_LINEFEEDKEY", (long) KC_LINEFEEDKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_BACKSPACEKEY", (long) KC_BACKSPACEKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_DELKEY", (long) KC_DELKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_SEMICOLONKEY", (long) KC_SEMICOLONKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_PERIODKEY", (long) KC_PERIODKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_COMMAKEY", (long) KC_COMMAKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_QUOTEKEY", (long) KC_QUOTEKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_ACCENTGRAVEKEY", (long) KC_ACCENTGRAVEKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_MINUSKEY", (long) KC_MINUSKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_SLASHKEY", (long) KC_SLASHKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_BACKSLASHKEY", (long) KC_BACKSLASHKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_EQUALKEY", (long) KC_EQUALKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_LEFTBRACKETKEY", (long) KC_LEFTBRACKETKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_RIGHTBRACKETKEY", (long) KC_RIGHTBRACKETKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_LEFTARROWKEY", (long) KC_LEFTARROWKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_DOWNARROWKEY", (long) KC_DOWNARROWKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_RIGHTARROWKEY", (long) KC_RIGHTARROWKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_UPARROWKEY", (long) KC_UPARROWKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_PAD0", (long) KC_PAD0, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_PAD1", (long) KC_PAD1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_PAD2", (long) KC_PAD2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_PAD3", (long) KC_PAD3, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_PAD4", (long) KC_PAD4, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_PAD5", (long) KC_PAD5, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_PAD6", (long) KC_PAD6, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_PAD7", (long) KC_PAD7, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_PAD8", (long) KC_PAD8, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_PAD9", (long) KC_PAD9, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_PADEQUALS", (long) KC_PADEQUALS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_PADPERIOD", (long) KC_PADPERIOD, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_PADSLASHKEY", (long) KC_PADSLASHKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_PADASTERKEY", (long) KC_PADASTERKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_PADMINUS", (long) KC_PADMINUS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_PADENTER", (long) KC_PADENTER, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_PADPLUSKEY", (long) KC_PADPLUSKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_F1KEY", (long) KC_F1KEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_F2KEY", (long) KC_F2KEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_F3KEY", (long) KC_F3KEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_F4KEY", (long) KC_F4KEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_F5KEY", (long) KC_F5KEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_F6KEY", (long) KC_F6KEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_F7KEY", (long) KC_F7KEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_F8KEY", (long) KC_F8KEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_F9KEY", (long) KC_F9KEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_F10KEY", (long) KC_F10KEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_F11KEY", (long) KC_F11KEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_F12KEY", (long) KC_F12KEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_PAUSEKEY", (long) KC_PAUSEKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_INSERTKEY", (long) KC_INSERTKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_HOMEKEY", (long) KC_HOMEKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_PAGEUPKEY", (long) KC_PAGEUPKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_PAGEDOWNKEY", (long) KC_PAGEDOWNKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_ENDKEY", (long) KC_ENDKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_UNKNOWNKEY", (long) KC_UNKNOWNKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_COMMANDKEY", (long) KC_COMMANDKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_GRLESSKEY", (long) KC_GRLESSKEY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KC_MAX", (long) KC_MAX, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BM_NONE", (long) GS_BM_NONE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BM_OFF", (long) GS_BM_OFF, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BM_ON", (long) GS_BM_ON, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PM_NONE", (long) PM_NONE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PM_OFF", (long) PM_OFF, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PM_ON", (long) PM_ON, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MST_LEFT", (long) MST_LEFT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MST_RIGHT", (long) MST_RIGHT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MST_MIDDLE", (long) MST_MIDDLE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MST_MOTION", (long) MST_MOTION, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MST_WHEEL_UP", (long) MST_WHEEL_UP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MST_WHEEL_DOWN", (long) MST_WHEEL_DOWN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MST_OVER", (long) MST_OVER, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MST_OVER_ANY", (long) MST_OVER_ANY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LM_EVT_OVERIDE", (long) LM_EVT_OVERIDE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LM_EVT_AND", (long) LM_EVT_AND, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PST_EQUAL", (long) PST_EQUAL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PST_NEQUAL", (long) PST_NEQUAL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PST_INTERVAL", (long) PST_INTERVAL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PST_CHANGED", (long) PST_CHANGED, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RSA_XPOS", (long) RSA_XPOS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RSA_YPOS", (long) RSA_YPOS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RSA_ZPOS", (long) RSA_ZPOS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RSA_XNEG", (long) RSA_XNEG, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RSA_YNEG", (long) RSA_YNEG, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RSA_ZNEG", (long) RSA_ZNEG, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LOP_NONE", (long) LOP_NONE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LOP_AND", (long) LOP_AND, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LOP_OR", (long) LOP_OR, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LOP_XOR", (long) LOP_XOR, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LOP_NAND", (long) LOP_NAND, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LOP_NOR", (long) LOP_NOR, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LOP_XNOR", (long) LOP_XNOR, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AAT_PLAY", (long) AAT_PLAY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AAT_PONG", (long) AAT_PONG, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AAT_FLIPPER", (long) AAT_FLIPPER, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AAT_LOOP_STOP", (long) AAT_LOOP_STOP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AAT_LOOP_END", (long) AAT_LOOP_END, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AAT_PROPERTY", (long) AAT_PROPERTY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"GAT_QUIT", (long) GAT_QUIT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"GAT_RESTART", (long) GAT_RESTART, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"GAT_START_NEW", (long) GAT_START_NEW, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"GAT_SAVE", (long) GAT_SAVE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"GAT_LOAD", (long) GAT_LOAD, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"EOT_ADDOBJ", (long) EOT_ADDOBJ, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"EOT_ENDOBJ", (long) EOT_ENDOBJ, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"EOT_REPLACEMESH", (long) EOT_REPLACEMESH, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"EOT_TRACKTO", (long) EOT_TRACKTO, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"EOT_DYNAMICS", (long) EOT_DYNAMICS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"EOD_RESTORE", (long) EOD_RESTORE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"EOD_SUSPEND", (long) EOD_SUSPEND, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"EOD_ENABLE_BODY", (long) EOD_ENABLE_BODY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"EOD_DISABLE_BODY", (long) EOD_DISABLE_BODY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"EOD_SETMASS", (long) EOD_SETMASS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MBT_TEXT", (long) MBT_TEXT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MBT_PROP", (long) MBT_PROP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PA_SET", (long) PA_SET, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PA_CLEAR", (long) PA_CLEAR, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PA_ASSIGN", (long) PA_ASSIGN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PA_ADD", (long) PA_ADD, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PA_COPY", (long) PA_COPY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PA_TOGGLE", (long) PA_TOGGLE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RA_BOOL_CONSTANT", (long) RA_BOOL_CONSTANT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RA_BOOL_UNIFORM", (long) RA_BOOL_UNIFORM, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RA_BOOL_BERNOUILLI", (long) RA_BOOL_BERNOUILLI, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RA_INT_CONSTANT", (long) RA_INT_CONSTANT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RA_INT_UNIFORM", (long) RA_INT_UNIFORM, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RA_INT_POISSON", (long) RA_INT_POISSON, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RA_FLOAT_CONSTANT", (long) RA_FLOAT_CONSTANT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RA_FLOAT_UNIFORM", (long) RA_FLOAT_UNIFORM, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RA_FLOAT_NORMAL", (long) RA_FLOAT_NORMAL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RA_FLOAT_NEGEXP", (long) RA_FLOAT_NEGEXP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SC_RESTART", (long) SC_RESTART, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SC_SET_SCENE", (long) SC_SET_SCENE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SC_SET_CAMERA", (long) SC_SET_CAMERA, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SC_ADD_BACK", (long) SC_ADD_BACK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SC_ADD_FRONT", (long) SC_ADD_FRONT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SC_REMOVE", (long) SC_REMOVE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SC_SUSPEND", (long) SC_SUSPEND, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SC_RESUME", (long) SC_RESUME, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SA_PLAY_STOP", (long) SA_PLAY_STOP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SA_PLAY_END", (long) SA_PLAY_END, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SA_LOOP_STOP", (long) SA_LOOP_STOP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SA_LOOP_END", (long) SA_LOOP_END, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SOP_ADD", (long) SOP_ADD, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SOP_SUB", (long) SOP_SUB, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SOP_CPY", (long) SOP_CPY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SOP_INV", (long) SOP_INV, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"VA_INVIS_FLAG", (long) VA_INVIS_FLAG, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"VA_OCCLUDER", (long) VA_OCCLUDER, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"VA_CHILDREN", (long) VA_CHILDREN, 0, 0, 0},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_gsActionActuatorTo_p_gsActuator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsActuator *)  ((gsActionActuator *) x));
}
static void *_p_gsEditObjectActuatorTo_p_gsActuator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsActuator *)  ((gsEditObjectActuator *) x));
}
static void *_p_gsGameActuatorTo_p_gsActuator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsActuator *)  ((gsGameActuator *) x));
}
static void *_p_gsMessageActuatorTo_p_gsActuator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsActuator *)  ((gsMessageActuator *) x));
}
static void *_p_gsMotionActuatorTo_p_gsActuator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsActuator *)  ((gsMotionActuator *) x));
}
static void *_p_gsParentActuatorTo_p_gsActuator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsActuator *)  ((gsParentActuator *) x));
}
static void *_p_gsPropertyActuatorTo_p_gsActuator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsActuator *)  ((gsPropertyActuator *) x));
}
static void *_p_gsRandomActuatorTo_p_gsActuator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsActuator *)  ((gsRandomActuator *) x));
}
static void *_p_gsSceneActuatorTo_p_gsActuator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsActuator *)  ((gsSceneActuator *) x));
}
static void *_p_gsSoundActuatorTo_p_gsActuator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsActuator *)  ((gsSoundActuator *) x));
}
static void *_p_gsStateActuatorTo_p_gsActuator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsActuator *)  ((gsStateActuator *) x));
}
static void *_p_gsVisibilityActuatorTo_p_gsActuator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsActuator *)  ((gsVisibilityActuator *) x));
}
static void *_p_gsParticlesTo_p_gsGameObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsGameObject *)  ((gsParticles *) x));
}
static void *_p_gsLightTo_p_gsGameObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsGameObject *)  ((gsLight *) x));
}
static void *_p_gsEntityTo_p_gsGameObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsGameObject *)  ((gsEntity *) x));
}
static void *_p_gsCameraTo_p_gsGameObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsGameObject *)  ((gsCamera *) x));
}
static void *_p_gsSkeletonTo_p_gsGameObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsGameObject *)  ((gsSkeleton *) x));
}
static void *_p_gsParticlesTo_p_gsObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsObject *) (gsGameObject *) ((gsParticles *) x));
}
static void *_p_gsSceneTo_p_gsObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsObject *)  ((gsScene *) x));
}
static void *_p_gsLightTo_p_gsObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsObject *) (gsGameObject *) ((gsLight *) x));
}
static void *_p_gsGameObjectTo_p_gsObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsObject *)  ((gsGameObject *) x));
}
static void *_p_gsEntityTo_p_gsObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsObject *) (gsGameObject *) ((gsEntity *) x));
}
static void *_p_gsCameraTo_p_gsObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsObject *) (gsGameObject *) ((gsCamera *) x));
}
static void *_p_gsSkeletonTo_p_gsObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsObject *) (gsGameObject *) ((gsSkeleton *) x));
}
static void *_p_gsRandomSensorTo_p_gsBrick(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsBrick *) (gsSensor *) ((gsRandomSensor *) x));
}
static void *_p_gsRaySensorTo_p_gsBrick(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsBrick *) (gsSensor *) ((gsRaySensor *) x));
}
static void *_p_gsPropertySensorTo_p_gsBrick(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsBrick *) (gsSensor *) ((gsPropertySensor *) x));
}
static void *_p_gsMouseSensorTo_p_gsBrick(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsBrick *) (gsSensor *) ((gsMouseSensor *) x));
}
static void *_p_gsMessageSensorTo_p_gsBrick(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsBrick *) (gsSensor *) ((gsMessageSensor *) x));
}
static void *_p_gsDelaySensorTo_p_gsBrick(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsBrick *) (gsSensor *) ((gsDelaySensor *) x));
}
static void *_p_gsAlwaysSensorTo_p_gsBrick(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsBrick *) (gsSensor *) ((gsAlwaysSensor *) x));
}
static void *_p_gsSensorTo_p_gsBrick(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsBrick *)  ((gsSensor *) x));
}
static void *_p_gsRadarSensorTo_p_gsBrick(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsBrick *) (gsSensor *) ((gsRadarSensor *) x));
}
static void *_p_gsNearSensorTo_p_gsBrick(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsBrick *) (gsSensor *) ((gsNearSensor *) x));
}
static void *_p_gsKeyboardSensorTo_p_gsBrick(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsBrick *) (gsSensor *) ((gsKeyboardSensor *) x));
}
static void *_p_gsTouchSensorTo_p_gsBrick(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsBrick *) (gsSensor *) ((gsTouchSensor *) x));
}
static void *_p_gsCollisionSensorTo_p_gsBrick(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsBrick *) (gsSensor *) ((gsCollisionSensor *) x));
}
static void *_p_gsActuatorSensorTo_p_gsBrick(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsBrick *) (gsSensor *) ((gsActuatorSensor *) x));
}
static void *_p_gsControllerTo_p_gsBrick(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsBrick *)  ((gsController *) x));
}
static void *_p_gsLogicOpControllerTo_p_gsBrick(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsBrick *) (gsController *) ((gsLogicOpController *) x));
}
static void *_p_gsExpressionControllerTo_p_gsBrick(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsBrick *) (gsController *) ((gsExpressionController *) x));
}
static void *_p_gsScriptControllerTo_p_gsBrick(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsBrick *) (gsController *) ((gsScriptController *) x));
}
static void *_p_gsActuatorTo_p_gsBrick(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsBrick *)  ((gsActuator *) x));
}
static void *_p_gsActionActuatorTo_p_gsBrick(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsBrick *) (gsActuator *) ((gsActionActuator *) x));
}
static void *_p_gsEditObjectActuatorTo_p_gsBrick(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsBrick *) (gsActuator *) ((gsEditObjectActuator *) x));
}
static void *_p_gsGameActuatorTo_p_gsBrick(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsBrick *) (gsActuator *) ((gsGameActuator *) x));
}
static void *_p_gsMessageActuatorTo_p_gsBrick(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsBrick *) (gsActuator *) ((gsMessageActuator *) x));
}
static void *_p_gsMotionActuatorTo_p_gsBrick(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsBrick *) (gsActuator *) ((gsMotionActuator *) x));
}
static void *_p_gsParentActuatorTo_p_gsBrick(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsBrick *) (gsActuator *) ((gsParentActuator *) x));
}
static void *_p_gsPropertyActuatorTo_p_gsBrick(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsBrick *) (gsActuator *) ((gsPropertyActuator *) x));
}
static void *_p_gsRandomActuatorTo_p_gsBrick(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsBrick *) (gsActuator *) ((gsRandomActuator *) x));
}
static void *_p_gsSceneActuatorTo_p_gsBrick(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsBrick *) (gsActuator *) ((gsSceneActuator *) x));
}
static void *_p_gsSoundActuatorTo_p_gsBrick(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsBrick *) (gsActuator *) ((gsSoundActuator *) x));
}
static void *_p_gsStateActuatorTo_p_gsBrick(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsBrick *) (gsActuator *) ((gsStateActuator *) x));
}
static void *_p_gsVisibilityActuatorTo_p_gsBrick(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsBrick *) (gsActuator *) ((gsVisibilityActuator *) x));
}
static void *_p_gsActuatorSensorTo_p_gsSensor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsSensor *)  ((gsActuatorSensor *) x));
}
static void *_p_gsCollisionSensorTo_p_gsSensor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsSensor *)  ((gsCollisionSensor *) x));
}
static void *_p_gsTouchSensorTo_p_gsSensor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsSensor *)  ((gsTouchSensor *) x));
}
static void *_p_gsKeyboardSensorTo_p_gsSensor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsSensor *)  ((gsKeyboardSensor *) x));
}
static void *_p_gsNearSensorTo_p_gsSensor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsSensor *)  ((gsNearSensor *) x));
}
static void *_p_gsRadarSensorTo_p_gsSensor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsSensor *)  ((gsRadarSensor *) x));
}
static void *_p_gsAlwaysSensorTo_p_gsSensor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsSensor *)  ((gsAlwaysSensor *) x));
}
static void *_p_gsDelaySensorTo_p_gsSensor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsSensor *)  ((gsDelaySensor *) x));
}
static void *_p_gsMessageSensorTo_p_gsSensor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsSensor *)  ((gsMessageSensor *) x));
}
static void *_p_gsMouseSensorTo_p_gsSensor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsSensor *)  ((gsMouseSensor *) x));
}
static void *_p_gsPropertySensorTo_p_gsSensor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsSensor *)  ((gsPropertySensor *) x));
}
static void *_p_gsRaySensorTo_p_gsSensor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsSensor *)  ((gsRaySensor *) x));
}
static void *_p_gsRandomSensorTo_p_gsSensor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsSensor *)  ((gsRandomSensor *) x));
}
static void *_p_gsLogicOpControllerTo_p_gsController(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsController *)  ((gsLogicOpController *) x));
}
static void *_p_gsExpressionControllerTo_p_gsController(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsController *)  ((gsExpressionController *) x));
}
static void *_p_gsScriptControllerTo_p_gsController(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gsController *)  ((gsScriptController *) x));
}
static swig_type_info _swigt__p_Array = {"_p_Array", "Array *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BrickList = {"_p_BrickList", "BrickList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Iterator = {"_p_Iterator", "Iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gkCharacter = {"_p_gkCharacter", "gkCharacter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gkDynamicsWorld = {"_p_gkDynamicsWorld", "gkDynamicsWorld *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gkLuaCurState = {"_p_gkLuaCurState", "gsSelf *|gsFunction *|gkLuaCurState *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gsActionActuator = {"_p_gsActionActuator", "gsActionActuator *", 0, 0, (void*)&_wrap_class_gsActionActuator, 0};
static swig_type_info _swigt__p_gsActuator = {"_p_gsActuator", "gsActuator *", 0, 0, (void*)&_wrap_class_gsActuator, 0};
static swig_type_info _swigt__p_gsActuatorSensor = {"_p_gsActuatorSensor", "gsActuatorSensor *", 0, 0, (void*)&_wrap_class_gsActuatorSensor, 0};
static swig_type_info _swigt__p_gsAlwaysSensor = {"_p_gsAlwaysSensor", "gsAlwaysSensor *", 0, 0, (void*)&_wrap_class_gsAlwaysSensor, 0};
static swig_type_info _swigt__p_gsArrayIteratorT_gkGameObject_t = {"_p_gsArrayIteratorT_gkGameObject_t", "gsArrayIterator< gkGameObject > *", 0, 0, (void*)&_wrap_class_gsArrayIterator_Sl_gkGameObject_Sg_, 0};
static swig_type_info _swigt__p_gsArrayIteratorT_gkLogicActuator_t = {"_p_gsArrayIteratorT_gkLogicActuator_t", "gsArrayIterator< gkLogicActuator > *", 0, 0, (void*)&_wrap_class_gsArrayIterator_Sl_gkLogicActuator_Sg_, 0};
static swig_type_info _swigt__p_gsArrayIteratorT_gkLogicController_t = {"_p_gsArrayIteratorT_gkLogicController_t", "gsArrayIterator< gkLogicController > *", 0, 0, (void*)&_wrap_class_gsArrayIterator_Sl_gkLogicController_Sg_, 0};
static swig_type_info _swigt__p_gsArrayIteratorT_gkLogicLink_t = {"_p_gsArrayIteratorT_gkLogicLink_t", "gsArrayIterator< gkLogicLink > *", 0, 0, (void*)&_wrap_class_gsArrayIterator_Sl_gkLogicLink_Sg_, 0};
static swig_type_info _swigt__p_gsArrayIteratorT_gkLogicSensor_t = {"_p_gsArrayIteratorT_gkLogicSensor_t", "gsArrayIterator< gkLogicSensor > *", 0, 0, (void*)&_wrap_class_gsArrayIterator_Sl_gkLogicSensor_Sg_, 0};
static swig_type_info _swigt__p_gsArrayT_gsActuator_gkLogicActuator_t = {"_p_gsArrayT_gsActuator_gkLogicActuator_t", "gsArray< gsActuator,gkLogicActuator > *", 0, 0, (void*)&_wrap_class_gsArray_Sl_gsActuator_Sc_gkLogicActuator_Sg_, 0};
static swig_type_info _swigt__p_gsArrayT_gsController_gkLogicController_t = {"_p_gsArrayT_gsController_gkLogicController_t", "gsArray< gsController,gkLogicController > *", 0, 0, (void*)&_wrap_class_gsArray_Sl_gsController_Sc_gkLogicController_Sg_, 0};
static swig_type_info _swigt__p_gsArrayT_gsGameObject_gkGameObject_t = {"_p_gsArrayT_gsGameObject_gkGameObject_t", "gsArray< gsGameObject,gkGameObject > *", 0, 0, (void*)&_wrap_class_gsArray_Sl_gsGameObject_Sc_gkGameObject_Sg_, 0};
static swig_type_info _swigt__p_gsArrayT_gsLogicObject_gkLogicLink_t = {"_p_gsArrayT_gsLogicObject_gkLogicLink_t", "gsArray< gsLogicObject,gkLogicLink > *", 0, 0, (void*)&_wrap_class_gsArray_Sl_gsLogicObject_Sc_gkLogicLink_Sg_, 0};
static swig_type_info _swigt__p_gsArrayT_gsSensor_gkLogicSensor_t = {"_p_gsArrayT_gsSensor_gkLogicSensor_t", "gsArray< gsSensor,gkLogicSensor > *", 0, 0, (void*)&_wrap_class_gsArray_Sl_gsSensor_Sc_gkLogicSensor_Sg_, 0};
static swig_type_info _swigt__p_gsBrick = {"_p_gsBrick", "gsBrick *", 0, 0, (void*)&_wrap_class_gsBrick, 0};
static swig_type_info _swigt__p_gsCamera = {"_p_gsCamera", "gsCamera *", 0, 0, (void*)&_wrap_class_gsCamera, 0};
static swig_type_info _swigt__p_gsCharacter = {"_p_gsCharacter", "gsCharacter *", 0, 0, (void*)&_wrap_class_gsCharacter, 0};
static swig_type_info _swigt__p_gsCollisionSensor = {"_p_gsCollisionSensor", "gsCollisionSensor *", 0, 0, (void*)&_wrap_class_gsCollisionSensor, 0};
static swig_type_info _swigt__p_gsController = {"_p_gsController", "gsController *", 0, 0, (void*)&_wrap_class_gsController, 0};
static swig_type_info _swigt__p_gsDebugger = {"_p_gsDebugger", "gsDebugger *", 0, 0, (void*)&_wrap_class_gsDebugger, 0};
static swig_type_info _swigt__p_gsDelaySensor = {"_p_gsDelaySensor", "gsDelaySensor *", 0, 0, (void*)&_wrap_class_gsDelaySensor, 0};
static swig_type_info _swigt__p_gsDynamicsWorld = {"_p_gsDynamicsWorld", "gsDynamicsWorld *", 0, 0, (void*)&_wrap_class_gsDynamicsWorld, 0};
static swig_type_info _swigt__p_gsEditObjectActuator = {"_p_gsEditObjectActuator", "gsEditObjectActuator *", 0, 0, (void*)&_wrap_class_gsEditObjectActuator, 0};
static swig_type_info _swigt__p_gsEngine = {"_p_gsEngine", "gsEngine *", 0, 0, (void*)&_wrap_class_gsEngine, 0};
static swig_type_info _swigt__p_gsEntity = {"_p_gsEntity", "gsEntity *", 0, 0, (void*)&_wrap_class_gsEntity, 0};
static swig_type_info _swigt__p_gsExpressionController = {"_p_gsExpressionController", "gsExpressionController *", 0, 0, (void*)&_wrap_class_gsExpressionController, 0};
static swig_type_info _swigt__p_gsFSM = {"_p_gsFSM", "gsFSM *", 0, 0, (void*)&_wrap_class_gsFSM, 0};
static swig_type_info _swigt__p_gsGameActuator = {"_p_gsGameActuator", "gsGameActuator *", 0, 0, (void*)&_wrap_class_gsGameActuator, 0};
static swig_type_info _swigt__p_gsGameObject = {"_p_gsGameObject", "gsGameObject *", 0, 0, (void*)&_wrap_class_gsGameObject, 0};
static swig_type_info _swigt__p_gsHUD = {"_p_gsHUD", "gsHUD *", 0, 0, (void*)&_wrap_class_gsHUD, 0};
static swig_type_info _swigt__p_gsHUDElement = {"_p_gsHUDElement", "gsHUDElement *", 0, 0, (void*)&_wrap_class_gsHUDElement, 0};
static swig_type_info _swigt__p_gsJoystick = {"_p_gsJoystick", "gsJoystick *", 0, 0, (void*)&_wrap_class_gsJoystick, 0};
static swig_type_info _swigt__p_gsKeyboard = {"_p_gsKeyboard", "gsKeyboard *", 0, 0, (void*)&_wrap_class_gsKeyboard, 0};
static swig_type_info _swigt__p_gsKeyboardSensor = {"_p_gsKeyboardSensor", "gsKeyboardSensor *", 0, 0, (void*)&_wrap_class_gsKeyboardSensor, 0};
static swig_type_info _swigt__p_gsLight = {"_p_gsLight", "gsLight *", 0, 0, (void*)&_wrap_class_gsLight, 0};
static swig_type_info _swigt__p_gsLogicManager = {"_p_gsLogicManager", "gsLogicManager *", 0, 0, (void*)&_wrap_class_gsLogicManager, 0};
static swig_type_info _swigt__p_gsLogicObject = {"_p_gsLogicObject", "gsLogicObject *", 0, 0, (void*)&_wrap_class_gsLogicObject, 0};
static swig_type_info _swigt__p_gsLogicOpController = {"_p_gsLogicOpController", "gsLogicOpController *", 0, 0, (void*)&_wrap_class_gsLogicOpController, 0};
static swig_type_info _swigt__p_gsLuaManager = {"_p_gsLuaManager", "gsLuaManager *", 0, 0, (void*)&_wrap_class_gsLuaManager, 0};
static swig_type_info _swigt__p_gsLuaScript = {"_p_gsLuaScript", "gsLuaScript *", 0, 0, (void*)&_wrap_class_gsLuaScript, 0};
static swig_type_info _swigt__p_gsMessageActuator = {"_p_gsMessageActuator", "gsMessageActuator *", 0, 0, (void*)&_wrap_class_gsMessageActuator, 0};
static swig_type_info _swigt__p_gsMessageSensor = {"_p_gsMessageSensor", "gsMessageSensor *", 0, 0, (void*)&_wrap_class_gsMessageSensor, 0};
static swig_type_info _swigt__p_gsMotionActuator = {"_p_gsMotionActuator", "gsMotionActuator *", 0, 0, (void*)&_wrap_class_gsMotionActuator, 0};
static swig_type_info _swigt__p_gsMouse = {"_p_gsMouse", "gsMouse *", 0, 0, (void*)&_wrap_class_gsMouse, 0};
static swig_type_info _swigt__p_gsMouseSensor = {"_p_gsMouseSensor", "gsMouseSensor *", 0, 0, (void*)&_wrap_class_gsMouseSensor, 0};
static swig_type_info _swigt__p_gsNearSensor = {"_p_gsNearSensor", "gsNearSensor *", 0, 0, (void*)&_wrap_class_gsNearSensor, 0};
static swig_type_info _swigt__p_gsObject = {"_p_gsObject", "gsObject *", 0, 0, (void*)&_wrap_class_gsObject, 0};
static swig_type_info _swigt__p_gsParentActuator = {"_p_gsParentActuator", "gsParentActuator *", 0, 0, (void*)&_wrap_class_gsParentActuator, 0};
static swig_type_info _swigt__p_gsParticles = {"_p_gsParticles", "gsParticles *", 0, 0, (void*)&_wrap_class_gsParticles, 0};
static swig_type_info _swigt__p_gsProperty = {"_p_gsProperty", "gsProperty *", 0, 0, (void*)&_wrap_class_gsProperty, 0};
static swig_type_info _swigt__p_gsPropertyActuator = {"_p_gsPropertyActuator", "gsPropertyActuator *", 0, 0, (void*)&_wrap_class_gsPropertyActuator, 0};
static swig_type_info _swigt__p_gsPropertySensor = {"_p_gsPropertySensor", "gsPropertySensor *", 0, 0, (void*)&_wrap_class_gsPropertySensor, 0};
static swig_type_info _swigt__p_gsQuaternion = {"_p_gsQuaternion", "gsQuaternion *", 0, 0, (void*)&_wrap_class_gsQuaternion, 0};
static swig_type_info _swigt__p_gsRadarSensor = {"_p_gsRadarSensor", "gsRadarSensor *", 0, 0, (void*)&_wrap_class_gsRadarSensor, 0};
static swig_type_info _swigt__p_gsRandomActuator = {"_p_gsRandomActuator", "gsRandomActuator *", 0, 0, (void*)&_wrap_class_gsRandomActuator, 0};
static swig_type_info _swigt__p_gsRandomSensor = {"_p_gsRandomSensor", "gsRandomSensor *", 0, 0, (void*)&_wrap_class_gsRandomSensor, 0};
static swig_type_info _swigt__p_gsRay = {"_p_gsRay", "gsRay *", 0, 0, (void*)&_wrap_class_gsRay, 0};
static swig_type_info _swigt__p_gsRaySensor = {"_p_gsRaySensor", "gsRaySensor *", 0, 0, (void*)&_wrap_class_gsRaySensor, 0};
static swig_type_info _swigt__p_gsRayTest = {"_p_gsRayTest", "gsRayTest *", 0, 0, (void*)&_wrap_class_gsRayTest, 0};
static swig_type_info _swigt__p_gsScene = {"_p_gsScene", "gsScene *", 0, 0, (void*)&_wrap_class_gsScene, 0};
static swig_type_info _swigt__p_gsSceneActuator = {"_p_gsSceneActuator", "gsSceneActuator *", 0, 0, (void*)&_wrap_class_gsSceneActuator, 0};
static swig_type_info _swigt__p_gsScriptController = {"_p_gsScriptController", "gsScriptController *", 0, 0, (void*)&_wrap_class_gsScriptController, 0};
static swig_type_info _swigt__p_gsSensor = {"_p_gsSensor", "gsSensor *", 0, 0, (void*)&_wrap_class_gsSensor, 0};
static swig_type_info _swigt__p_gsSkeleton = {"_p_gsSkeleton", "gsSkeleton *", 0, 0, (void*)&_wrap_class_gsSkeleton, 0};
static swig_type_info _swigt__p_gsSoundActuator = {"_p_gsSoundActuator", "gsSoundActuator *", 0, 0, (void*)&_wrap_class_gsSoundActuator, 0};
static swig_type_info _swigt__p_gsStateActuator = {"_p_gsStateActuator", "gsStateActuator *", 0, 0, (void*)&_wrap_class_gsStateActuator, 0};
static swig_type_info _swigt__p_gsSweptTest = {"_p_gsSweptTest", "gsSweptTest *", 0, 0, (void*)&_wrap_class_gsSweptTest, 0};
static swig_type_info _swigt__p_gsTouchSensor = {"_p_gsTouchSensor", "gsTouchSensor *", 0, 0, (void*)&_wrap_class_gsTouchSensor, 0};
static swig_type_info _swigt__p_gsUserDefs = {"_p_gsUserDefs", "gsUserDefs *", 0, 0, (void*)&_wrap_class_gsUserDefs, 0};
static swig_type_info _swigt__p_gsVector3 = {"_p_gsVector3", "gsVector3 *", 0, 0, (void*)&_wrap_class_gsVector3, 0};
static swig_type_info _swigt__p_gsVisibilityActuator = {"_p_gsVisibilityActuator", "gsVisibilityActuator *", 0, 0, (void*)&_wrap_class_gsVisibilityActuator, 0};
static swig_type_info _swigt__p_gsWhenEvent = {"_p_gsWhenEvent", "gsWhenEvent *", 0, 0, (void*)&_wrap_class_gsWhenEvent, 0};
static swig_type_info _swigt__p_utArrayT_gkGameObject_p_t = {"_p_utArrayT_gkGameObject_p_t", "gsArray< gsGameObject,gkGameObject >::Array *|utArray< gkGameObject * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_utArrayT_gkLogicActuator_p_t = {"_p_utArrayT_gkLogicActuator_p_t", "gsArray< gsActuator,gkLogicActuator >::Array *|utArray< gkLogicActuator * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_utArrayT_gkLogicController_p_t = {"_p_utArrayT_gkLogicController_p_t", "gsArray< gsController,gkLogicController >::Array *|utArray< gkLogicController * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_utArrayT_gkLogicLink_p_t = {"_p_utArrayT_gkLogicLink_p_t", "gsArray< gsLogicObject,gkLogicLink >::Array *|utArray< gkLogicLink * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_utArrayT_gkLogicSensor_p_t = {"_p_utArrayT_gkLogicSensor_p_t", "gsArray< gsSensor,gkLogicSensor >::Array *|utArray< gkLogicSensor * > *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Array,
  &_swigt__p_BrickList,
  &_swigt__p_Iterator,
  &_swigt__p_gkCharacter,
  &_swigt__p_gkDynamicsWorld,
  &_swigt__p_gkLuaCurState,
  &_swigt__p_gsActionActuator,
  &_swigt__p_gsActuator,
  &_swigt__p_gsActuatorSensor,
  &_swigt__p_gsAlwaysSensor,
  &_swigt__p_gsArrayIteratorT_gkGameObject_t,
  &_swigt__p_gsArrayIteratorT_gkLogicActuator_t,
  &_swigt__p_gsArrayIteratorT_gkLogicController_t,
  &_swigt__p_gsArrayIteratorT_gkLogicLink_t,
  &_swigt__p_gsArrayIteratorT_gkLogicSensor_t,
  &_swigt__p_gsArrayT_gsActuator_gkLogicActuator_t,
  &_swigt__p_gsArrayT_gsController_gkLogicController_t,
  &_swigt__p_gsArrayT_gsGameObject_gkGameObject_t,
  &_swigt__p_gsArrayT_gsLogicObject_gkLogicLink_t,
  &_swigt__p_gsArrayT_gsSensor_gkLogicSensor_t,
  &_swigt__p_gsBrick,
  &_swigt__p_gsCamera,
  &_swigt__p_gsCharacter,
  &_swigt__p_gsCollisionSensor,
  &_swigt__p_gsController,
  &_swigt__p_gsDebugger,
  &_swigt__p_gsDelaySensor,
  &_swigt__p_gsDynamicsWorld,
  &_swigt__p_gsEditObjectActuator,
  &_swigt__p_gsEngine,
  &_swigt__p_gsEntity,
  &_swigt__p_gsExpressionController,
  &_swigt__p_gsFSM,
  &_swigt__p_gsGameActuator,
  &_swigt__p_gsGameObject,
  &_swigt__p_gsHUD,
  &_swigt__p_gsHUDElement,
  &_swigt__p_gsJoystick,
  &_swigt__p_gsKeyboard,
  &_swigt__p_gsKeyboardSensor,
  &_swigt__p_gsLight,
  &_swigt__p_gsLogicManager,
  &_swigt__p_gsLogicObject,
  &_swigt__p_gsLogicOpController,
  &_swigt__p_gsLuaManager,
  &_swigt__p_gsLuaScript,
  &_swigt__p_gsMessageActuator,
  &_swigt__p_gsMessageSensor,
  &_swigt__p_gsMotionActuator,
  &_swigt__p_gsMouse,
  &_swigt__p_gsMouseSensor,
  &_swigt__p_gsNearSensor,
  &_swigt__p_gsObject,
  &_swigt__p_gsParentActuator,
  &_swigt__p_gsParticles,
  &_swigt__p_gsProperty,
  &_swigt__p_gsPropertyActuator,
  &_swigt__p_gsPropertySensor,
  &_swigt__p_gsQuaternion,
  &_swigt__p_gsRadarSensor,
  &_swigt__p_gsRandomActuator,
  &_swigt__p_gsRandomSensor,
  &_swigt__p_gsRay,
  &_swigt__p_gsRaySensor,
  &_swigt__p_gsRayTest,
  &_swigt__p_gsScene,
  &_swigt__p_gsSceneActuator,
  &_swigt__p_gsScriptController,
  &_swigt__p_gsSensor,
  &_swigt__p_gsSkeleton,
  &_swigt__p_gsSoundActuator,
  &_swigt__p_gsStateActuator,
  &_swigt__p_gsSweptTest,
  &_swigt__p_gsTouchSensor,
  &_swigt__p_gsUserDefs,
  &_swigt__p_gsVector3,
  &_swigt__p_gsVisibilityActuator,
  &_swigt__p_gsWhenEvent,
  &_swigt__p_utArrayT_gkGameObject_p_t,
  &_swigt__p_utArrayT_gkLogicActuator_p_t,
  &_swigt__p_utArrayT_gkLogicController_p_t,
  &_swigt__p_utArrayT_gkLogicLink_p_t,
  &_swigt__p_utArrayT_gkLogicSensor_p_t,
};

static swig_cast_info _swigc__p_Array[] = {  {&_swigt__p_Array, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BrickList[] = {  {&_swigt__p_BrickList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Iterator[] = {  {&_swigt__p_Iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gkCharacter[] = {  {&_swigt__p_gkCharacter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gkDynamicsWorld[] = {  {&_swigt__p_gkDynamicsWorld, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gkLuaCurState[] = {  {&_swigt__p_gkLuaCurState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsActionActuator[] = {  {&_swigt__p_gsActionActuator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsActuator[] = {  {&_swigt__p_gsActuator, 0, 0, 0},  {&_swigt__p_gsActionActuator, _p_gsActionActuatorTo_p_gsActuator, 0, 0},  {&_swigt__p_gsEditObjectActuator, _p_gsEditObjectActuatorTo_p_gsActuator, 0, 0},  {&_swigt__p_gsGameActuator, _p_gsGameActuatorTo_p_gsActuator, 0, 0},  {&_swigt__p_gsMessageActuator, _p_gsMessageActuatorTo_p_gsActuator, 0, 0},  {&_swigt__p_gsMotionActuator, _p_gsMotionActuatorTo_p_gsActuator, 0, 0},  {&_swigt__p_gsParentActuator, _p_gsParentActuatorTo_p_gsActuator, 0, 0},  {&_swigt__p_gsPropertyActuator, _p_gsPropertyActuatorTo_p_gsActuator, 0, 0},  {&_swigt__p_gsRandomActuator, _p_gsRandomActuatorTo_p_gsActuator, 0, 0},  {&_swigt__p_gsSceneActuator, _p_gsSceneActuatorTo_p_gsActuator, 0, 0},  {&_swigt__p_gsSoundActuator, _p_gsSoundActuatorTo_p_gsActuator, 0, 0},  {&_swigt__p_gsStateActuator, _p_gsStateActuatorTo_p_gsActuator, 0, 0},  {&_swigt__p_gsVisibilityActuator, _p_gsVisibilityActuatorTo_p_gsActuator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsActuatorSensor[] = {  {&_swigt__p_gsActuatorSensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsAlwaysSensor[] = {  {&_swigt__p_gsAlwaysSensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsArrayIteratorT_gkGameObject_t[] = {  {&_swigt__p_gsArrayIteratorT_gkGameObject_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsArrayIteratorT_gkLogicActuator_t[] = {  {&_swigt__p_gsArrayIteratorT_gkLogicActuator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsArrayIteratorT_gkLogicController_t[] = {  {&_swigt__p_gsArrayIteratorT_gkLogicController_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsArrayIteratorT_gkLogicLink_t[] = {  {&_swigt__p_gsArrayIteratorT_gkLogicLink_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsArrayIteratorT_gkLogicSensor_t[] = {  {&_swigt__p_gsArrayIteratorT_gkLogicSensor_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsArrayT_gsActuator_gkLogicActuator_t[] = {  {&_swigt__p_gsArrayT_gsActuator_gkLogicActuator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsArrayT_gsController_gkLogicController_t[] = {  {&_swigt__p_gsArrayT_gsController_gkLogicController_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsArrayT_gsGameObject_gkGameObject_t[] = {  {&_swigt__p_gsArrayT_gsGameObject_gkGameObject_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsArrayT_gsLogicObject_gkLogicLink_t[] = {  {&_swigt__p_gsArrayT_gsLogicObject_gkLogicLink_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsArrayT_gsSensor_gkLogicSensor_t[] = {  {&_swigt__p_gsArrayT_gsSensor_gkLogicSensor_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsBrick[] = {  {&_swigt__p_gsAlwaysSensor, _p_gsAlwaysSensorTo_p_gsBrick, 0, 0},  {&_swigt__p_gsDelaySensor, _p_gsDelaySensorTo_p_gsBrick, 0, 0},  {&_swigt__p_gsMessageSensor, _p_gsMessageSensorTo_p_gsBrick, 0, 0},  {&_swigt__p_gsMouseSensor, _p_gsMouseSensorTo_p_gsBrick, 0, 0},  {&_swigt__p_gsPropertySensor, _p_gsPropertySensorTo_p_gsBrick, 0, 0},  {&_swigt__p_gsRaySensor, _p_gsRaySensorTo_p_gsBrick, 0, 0},  {&_swigt__p_gsRandomSensor, _p_gsRandomSensorTo_p_gsBrick, 0, 0},  {&_swigt__p_gsSensor, _p_gsSensorTo_p_gsBrick, 0, 0},  {&_swigt__p_gsBrick, 0, 0, 0},  {&_swigt__p_gsCollisionSensor, _p_gsCollisionSensorTo_p_gsBrick, 0, 0},  {&_swigt__p_gsTouchSensor, _p_gsTouchSensorTo_p_gsBrick, 0, 0},  {&_swigt__p_gsKeyboardSensor, _p_gsKeyboardSensorTo_p_gsBrick, 0, 0},  {&_swigt__p_gsNearSensor, _p_gsNearSensorTo_p_gsBrick, 0, 0},  {&_swigt__p_gsRadarSensor, _p_gsRadarSensorTo_p_gsBrick, 0, 0},  {&_swigt__p_gsActuatorSensor, _p_gsActuatorSensorTo_p_gsBrick, 0, 0},  {&_swigt__p_gsController, _p_gsControllerTo_p_gsBrick, 0, 0},  {&_swigt__p_gsLogicOpController, _p_gsLogicOpControllerTo_p_gsBrick, 0, 0},  {&_swigt__p_gsExpressionController, _p_gsExpressionControllerTo_p_gsBrick, 0, 0},  {&_swigt__p_gsScriptController, _p_gsScriptControllerTo_p_gsBrick, 0, 0},  {&_swigt__p_gsActuator, _p_gsActuatorTo_p_gsBrick, 0, 0},  {&_swigt__p_gsActionActuator, _p_gsActionActuatorTo_p_gsBrick, 0, 0},  {&_swigt__p_gsEditObjectActuator, _p_gsEditObjectActuatorTo_p_gsBrick, 0, 0},  {&_swigt__p_gsGameActuator, _p_gsGameActuatorTo_p_gsBrick, 0, 0},  {&_swigt__p_gsMessageActuator, _p_gsMessageActuatorTo_p_gsBrick, 0, 0},  {&_swigt__p_gsMotionActuator, _p_gsMotionActuatorTo_p_gsBrick, 0, 0},  {&_swigt__p_gsParentActuator, _p_gsParentActuatorTo_p_gsBrick, 0, 0},  {&_swigt__p_gsPropertyActuator, _p_gsPropertyActuatorTo_p_gsBrick, 0, 0},  {&_swigt__p_gsRandomActuator, _p_gsRandomActuatorTo_p_gsBrick, 0, 0},  {&_swigt__p_gsSceneActuator, _p_gsSceneActuatorTo_p_gsBrick, 0, 0},  {&_swigt__p_gsSoundActuator, _p_gsSoundActuatorTo_p_gsBrick, 0, 0},  {&_swigt__p_gsStateActuator, _p_gsStateActuatorTo_p_gsBrick, 0, 0},  {&_swigt__p_gsVisibilityActuator, _p_gsVisibilityActuatorTo_p_gsBrick, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsCamera[] = {  {&_swigt__p_gsCamera, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsCharacter[] = {  {&_swigt__p_gsCharacter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsCollisionSensor[] = {  {&_swigt__p_gsCollisionSensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsController[] = {  {&_swigt__p_gsController, 0, 0, 0},  {&_swigt__p_gsLogicOpController, _p_gsLogicOpControllerTo_p_gsController, 0, 0},  {&_swigt__p_gsExpressionController, _p_gsExpressionControllerTo_p_gsController, 0, 0},  {&_swigt__p_gsScriptController, _p_gsScriptControllerTo_p_gsController, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsDebugger[] = {  {&_swigt__p_gsDebugger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsDelaySensor[] = {  {&_swigt__p_gsDelaySensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsDynamicsWorld[] = {  {&_swigt__p_gsDynamicsWorld, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsEditObjectActuator[] = {  {&_swigt__p_gsEditObjectActuator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsEngine[] = {  {&_swigt__p_gsEngine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsEntity[] = {  {&_swigt__p_gsEntity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsExpressionController[] = {  {&_swigt__p_gsExpressionController, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsFSM[] = {  {&_swigt__p_gsFSM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsGameActuator[] = {  {&_swigt__p_gsGameActuator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsGameObject[] = {  {&_swigt__p_gsParticles, _p_gsParticlesTo_p_gsGameObject, 0, 0},  {&_swigt__p_gsLight, _p_gsLightTo_p_gsGameObject, 0, 0},  {&_swigt__p_gsGameObject, 0, 0, 0},  {&_swigt__p_gsEntity, _p_gsEntityTo_p_gsGameObject, 0, 0},  {&_swigt__p_gsCamera, _p_gsCameraTo_p_gsGameObject, 0, 0},  {&_swigt__p_gsSkeleton, _p_gsSkeletonTo_p_gsGameObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsHUD[] = {  {&_swigt__p_gsHUD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsHUDElement[] = {  {&_swigt__p_gsHUDElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsJoystick[] = {  {&_swigt__p_gsJoystick, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsKeyboard[] = {  {&_swigt__p_gsKeyboard, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsKeyboardSensor[] = {  {&_swigt__p_gsKeyboardSensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsLight[] = {  {&_swigt__p_gsLight, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsLogicManager[] = {  {&_swigt__p_gsLogicManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsLogicObject[] = {  {&_swigt__p_gsLogicObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsLogicOpController[] = {  {&_swigt__p_gsLogicOpController, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsLuaManager[] = {  {&_swigt__p_gsLuaManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsLuaScript[] = {  {&_swigt__p_gsLuaScript, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsMessageActuator[] = {  {&_swigt__p_gsMessageActuator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsMessageSensor[] = {  {&_swigt__p_gsMessageSensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsMotionActuator[] = {  {&_swigt__p_gsMotionActuator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsMouse[] = {  {&_swigt__p_gsMouse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsMouseSensor[] = {  {&_swigt__p_gsMouseSensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsNearSensor[] = {  {&_swigt__p_gsNearSensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsObject[] = {  {&_swigt__p_gsParticles, _p_gsParticlesTo_p_gsObject, 0, 0},  {&_swigt__p_gsScene, _p_gsSceneTo_p_gsObject, 0, 0},  {&_swigt__p_gsLight, _p_gsLightTo_p_gsObject, 0, 0},  {&_swigt__p_gsObject, 0, 0, 0},  {&_swigt__p_gsGameObject, _p_gsGameObjectTo_p_gsObject, 0, 0},  {&_swigt__p_gsEntity, _p_gsEntityTo_p_gsObject, 0, 0},  {&_swigt__p_gsCamera, _p_gsCameraTo_p_gsObject, 0, 0},  {&_swigt__p_gsSkeleton, _p_gsSkeletonTo_p_gsObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsParentActuator[] = {  {&_swigt__p_gsParentActuator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsParticles[] = {  {&_swigt__p_gsParticles, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsProperty[] = {  {&_swigt__p_gsProperty, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsPropertyActuator[] = {  {&_swigt__p_gsPropertyActuator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsPropertySensor[] = {  {&_swigt__p_gsPropertySensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsQuaternion[] = {  {&_swigt__p_gsQuaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsRadarSensor[] = {  {&_swigt__p_gsRadarSensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsRandomActuator[] = {  {&_swigt__p_gsRandomActuator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsRandomSensor[] = {  {&_swigt__p_gsRandomSensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsRay[] = {  {&_swigt__p_gsRay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsRaySensor[] = {  {&_swigt__p_gsRaySensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsRayTest[] = {  {&_swigt__p_gsRayTest, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsScene[] = {  {&_swigt__p_gsScene, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsSceneActuator[] = {  {&_swigt__p_gsSceneActuator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsScriptController[] = {  {&_swigt__p_gsScriptController, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsSensor[] = {  {&_swigt__p_gsAlwaysSensor, _p_gsAlwaysSensorTo_p_gsSensor, 0, 0},  {&_swigt__p_gsDelaySensor, _p_gsDelaySensorTo_p_gsSensor, 0, 0},  {&_swigt__p_gsMessageSensor, _p_gsMessageSensorTo_p_gsSensor, 0, 0},  {&_swigt__p_gsMouseSensor, _p_gsMouseSensorTo_p_gsSensor, 0, 0},  {&_swigt__p_gsPropertySensor, _p_gsPropertySensorTo_p_gsSensor, 0, 0},  {&_swigt__p_gsRaySensor, _p_gsRaySensorTo_p_gsSensor, 0, 0},  {&_swigt__p_gsRandomSensor, _p_gsRandomSensorTo_p_gsSensor, 0, 0},  {&_swigt__p_gsSensor, 0, 0, 0},  {&_swigt__p_gsActuatorSensor, _p_gsActuatorSensorTo_p_gsSensor, 0, 0},  {&_swigt__p_gsCollisionSensor, _p_gsCollisionSensorTo_p_gsSensor, 0, 0},  {&_swigt__p_gsTouchSensor, _p_gsTouchSensorTo_p_gsSensor, 0, 0},  {&_swigt__p_gsKeyboardSensor, _p_gsKeyboardSensorTo_p_gsSensor, 0, 0},  {&_swigt__p_gsNearSensor, _p_gsNearSensorTo_p_gsSensor, 0, 0},  {&_swigt__p_gsRadarSensor, _p_gsRadarSensorTo_p_gsSensor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsSkeleton[] = {  {&_swigt__p_gsSkeleton, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsSoundActuator[] = {  {&_swigt__p_gsSoundActuator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsStateActuator[] = {  {&_swigt__p_gsStateActuator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsSweptTest[] = {  {&_swigt__p_gsSweptTest, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsTouchSensor[] = {  {&_swigt__p_gsTouchSensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsUserDefs[] = {  {&_swigt__p_gsUserDefs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsVector3[] = {  {&_swigt__p_gsVector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsVisibilityActuator[] = {  {&_swigt__p_gsVisibilityActuator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsWhenEvent[] = {  {&_swigt__p_gsWhenEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_utArrayT_gkGameObject_p_t[] = {  {&_swigt__p_utArrayT_gkGameObject_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_utArrayT_gkLogicActuator_p_t[] = {  {&_swigt__p_utArrayT_gkLogicActuator_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_utArrayT_gkLogicController_p_t[] = {  {&_swigt__p_utArrayT_gkLogicController_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_utArrayT_gkLogicLink_p_t[] = {  {&_swigt__p_utArrayT_gkLogicLink_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_utArrayT_gkLogicSensor_p_t[] = {  {&_swigt__p_utArrayT_gkLogicSensor_p_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Array,
  _swigc__p_BrickList,
  _swigc__p_Iterator,
  _swigc__p_gkCharacter,
  _swigc__p_gkDynamicsWorld,
  _swigc__p_gkLuaCurState,
  _swigc__p_gsActionActuator,
  _swigc__p_gsActuator,
  _swigc__p_gsActuatorSensor,
  _swigc__p_gsAlwaysSensor,
  _swigc__p_gsArrayIteratorT_gkGameObject_t,
  _swigc__p_gsArrayIteratorT_gkLogicActuator_t,
  _swigc__p_gsArrayIteratorT_gkLogicController_t,
  _swigc__p_gsArrayIteratorT_gkLogicLink_t,
  _swigc__p_gsArrayIteratorT_gkLogicSensor_t,
  _swigc__p_gsArrayT_gsActuator_gkLogicActuator_t,
  _swigc__p_gsArrayT_gsController_gkLogicController_t,
  _swigc__p_gsArrayT_gsGameObject_gkGameObject_t,
  _swigc__p_gsArrayT_gsLogicObject_gkLogicLink_t,
  _swigc__p_gsArrayT_gsSensor_gkLogicSensor_t,
  _swigc__p_gsBrick,
  _swigc__p_gsCamera,
  _swigc__p_gsCharacter,
  _swigc__p_gsCollisionSensor,
  _swigc__p_gsController,
  _swigc__p_gsDebugger,
  _swigc__p_gsDelaySensor,
  _swigc__p_gsDynamicsWorld,
  _swigc__p_gsEditObjectActuator,
  _swigc__p_gsEngine,
  _swigc__p_gsEntity,
  _swigc__p_gsExpressionController,
  _swigc__p_gsFSM,
  _swigc__p_gsGameActuator,
  _swigc__p_gsGameObject,
  _swigc__p_gsHUD,
  _swigc__p_gsHUDElement,
  _swigc__p_gsJoystick,
  _swigc__p_gsKeyboard,
  _swigc__p_gsKeyboardSensor,
  _swigc__p_gsLight,
  _swigc__p_gsLogicManager,
  _swigc__p_gsLogicObject,
  _swigc__p_gsLogicOpController,
  _swigc__p_gsLuaManager,
  _swigc__p_gsLuaScript,
  _swigc__p_gsMessageActuator,
  _swigc__p_gsMessageSensor,
  _swigc__p_gsMotionActuator,
  _swigc__p_gsMouse,
  _swigc__p_gsMouseSensor,
  _swigc__p_gsNearSensor,
  _swigc__p_gsObject,
  _swigc__p_gsParentActuator,
  _swigc__p_gsParticles,
  _swigc__p_gsProperty,
  _swigc__p_gsPropertyActuator,
  _swigc__p_gsPropertySensor,
  _swigc__p_gsQuaternion,
  _swigc__p_gsRadarSensor,
  _swigc__p_gsRandomActuator,
  _swigc__p_gsRandomSensor,
  _swigc__p_gsRay,
  _swigc__p_gsRaySensor,
  _swigc__p_gsRayTest,
  _swigc__p_gsScene,
  _swigc__p_gsSceneActuator,
  _swigc__p_gsScriptController,
  _swigc__p_gsSensor,
  _swigc__p_gsSkeleton,
  _swigc__p_gsSoundActuator,
  _swigc__p_gsStateActuator,
  _swigc__p_gsSweptTest,
  _swigc__p_gsTouchSensor,
  _swigc__p_gsUserDefs,
  _swigc__p_gsVector3,
  _swigc__p_gsVisibilityActuator,
  _swigc__p_gsWhenEvent,
  _swigc__p_utArrayT_gkGameObject_p_t,
  _swigc__p_utArrayT_gkLogicActuator_p_t,
  _swigc__p_utArrayT_gkLogicController_p_t,
  _swigc__p_utArrayT_gkLogicLink_p_t,
  _swigc__p_utArrayT_gkLogicSensor_p_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an eariler #define will rename it
*/
SWIGEXPORT int SWIG_init(lua_State* L)
{
  int i;
  /* start with global table */
  lua_pushvalue(L,LUA_GLOBALSINDEX);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
  /* set up base class pointers (the hierachy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  lua_pop(L,1);  /* tidy stack (remove module table)*/
  lua_pop(L,1);  /* tidy stack (remove global table)*/
  return 1;
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

